#!/usr/bin/env node
const fileTimeStart = Date.now();
import fs from 'fs';
import path from 'path';
import getRawConfig from './utils/getRawConfig';
import loadApi from './utils/loadApi';
import logInfo from './utils/logInfo';
import logger, { cli } from './utils/logger';
/**
 * Export the API data to a JSON file.
 * @param apiData The API data.
 */
const exportApi = async (apiData) => {
    const timeStart = Date.now();
    logger.info(`${cli.inf} Exporting API data to JSON file`);
    const targetPath = path.join(process.cwd(), apiData.output);
    try {
        // Make ouput directory if it doesn't exist
        if (!fs.existsSync(targetPath))
            await fs.promises.mkdir(targetPath, {
                recursive: true,
            });
        // Write the API data to a JSON file in the out directory
        await fs.promises.writeFile(path.join(targetPath, `./api.json`), JSON.stringify(apiData, null, 2));
        // fs.promises.unlink(path.join(__dirname, `./api.json`));
        const time = `${Date.now() - timeStart}ms`;
        logger.info(`${cli.suc} âš¡ Exported API data in ${time}`);
    }
    catch (error) {
        logger.error(`${cli.err} Failed to export API data to JSON file`);
        logger.info(error);
    }
};
/**
 * The main function.
 */
const main = async () => {
    const rawConfig = await getRawConfig();
    const apiData = await loadApi(rawConfig.file);
    await exportApi(apiData);
    logInfo(apiData, fileTimeStart, 'Exported API to JSON');
    process.exit(1);
};
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vZXhwb3J0LWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFHeEIsT0FBTyxZQUFZLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxPQUFPLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxPQUFPLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3Qzs7O0dBR0c7QUFDSCxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsT0FBb0IsRUFBaUIsRUFBRTtJQUM5RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLGtDQUFrQyxDQUFDLENBQUM7SUFFMUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVELElBQUk7UUFDRiwyQ0FBMkM7UUFDM0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO1lBQzVCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO2dCQUNsQyxTQUFTLEVBQUUsSUFBSTthQUNoQixDQUFDLENBQUM7UUFFTCx5REFBeUQ7UUFDekQsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLEVBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDakMsQ0FBQztRQUVGLDBEQUEwRDtRQUUxRCxNQUFNLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLElBQUksQ0FBQztRQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsMkJBQTJCLElBQUksRUFBRSxDQUFDLENBQUM7S0FDMUQ7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sSUFBSSxHQUFHLEtBQUssSUFBbUIsRUFBRTtJQUNyQyxNQUFNLFNBQVMsR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxNQUFNLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QixPQUFPLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsSUFBSSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXHJcblxyXG5jb25zdCBmaWxlVGltZVN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuXHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IHsgRXhwb3J0ZWRBcGkgfSBmcm9tICdAdHlwaW5ncy9leHBvcnRzJztcclxuaW1wb3J0IGdldFJhd0NvbmZpZyBmcm9tICcuL3V0aWxzL2dldFJhd0NvbmZpZyc7XHJcbmltcG9ydCBsb2FkQXBpIGZyb20gJy4vdXRpbHMvbG9hZEFwaSc7XHJcbmltcG9ydCBsb2dJbmZvIGZyb20gJy4vdXRpbHMvbG9nSW5mbyc7XHJcbmltcG9ydCBsb2dnZXIsIHsgY2xpIH0gZnJvbSAnLi91dGlscy9sb2dnZXInO1xyXG5cclxuLyoqXHJcbiAqIEV4cG9ydCB0aGUgQVBJIGRhdGEgdG8gYSBKU09OIGZpbGUuXHJcbiAqIEBwYXJhbSBhcGlEYXRhIFRoZSBBUEkgZGF0YS5cclxuICovXHJcbmNvbnN0IGV4cG9ydEFwaSA9IGFzeW5jIChhcGlEYXRhOiBFeHBvcnRlZEFwaSk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gIGNvbnN0IHRpbWVTdGFydCA9IERhdGUubm93KCk7XHJcbiAgbG9nZ2VyLmluZm8oYCR7Y2xpLmluZn0gRXhwb3J0aW5nIEFQSSBkYXRhIHRvIEpTT04gZmlsZWApO1xyXG5cclxuICBjb25zdCB0YXJnZXRQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGFwaURhdGEub3V0cHV0KTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIE1ha2Ugb3VwdXQgZGlyZWN0b3J5IGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuICAgIGlmICghZnMuZXhpc3RzU3luYyh0YXJnZXRQYXRoKSlcclxuICAgICAgYXdhaXQgZnMucHJvbWlzZXMubWtkaXIodGFyZ2V0UGF0aCwge1xyXG4gICAgICAgIHJlY3Vyc2l2ZTogdHJ1ZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gV3JpdGUgdGhlIEFQSSBkYXRhIHRvIGEgSlNPTiBmaWxlIGluIHRoZSBvdXQgZGlyZWN0b3J5XHJcbiAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoXHJcbiAgICAgIHBhdGguam9pbih0YXJnZXRQYXRoLCBgLi9hcGkuanNvbmApLFxyXG4gICAgICBKU09OLnN0cmluZ2lmeShhcGlEYXRhLCBudWxsLCAyKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBmcy5wcm9taXNlcy51bmxpbmsocGF0aC5qb2luKF9fZGlybmFtZSwgYC4vYXBpLmpzb25gKSk7XHJcblxyXG4gICAgY29uc3QgdGltZSA9IGAke0RhdGUubm93KCkgLSB0aW1lU3RhcnR9bXNgO1xyXG4gICAgbG9nZ2VyLmluZm8oYCR7Y2xpLnN1Y30g4pqhIEV4cG9ydGVkIEFQSSBkYXRhIGluICR7dGltZX1gKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKGAke2NsaS5lcnJ9IEZhaWxlZCB0byBleHBvcnQgQVBJIGRhdGEgdG8gSlNPTiBmaWxlYCk7XHJcbiAgICBsb2dnZXIuaW5mbyhlcnJvcik7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWluIGZ1bmN0aW9uLlxyXG4gKi9cclxuY29uc3QgbWFpbiA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICBjb25zdCByYXdDb25maWcgPSBhd2FpdCBnZXRSYXdDb25maWcoKTtcclxuICBjb25zdCBhcGlEYXRhID0gYXdhaXQgbG9hZEFwaShyYXdDb25maWcuZmlsZSk7XHJcbiAgYXdhaXQgZXhwb3J0QXBpKGFwaURhdGEpO1xyXG4gIGxvZ0luZm8oYXBpRGF0YSwgZmlsZVRpbWVTdGFydCwgJ0V4cG9ydGVkIEFQSSB0byBKU09OJyk7XHJcbiAgcHJvY2Vzcy5leGl0KDEpO1xyXG59O1xyXG5cclxubWFpbigpO1xyXG4iXX0=