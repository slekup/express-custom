{"version":3,"file":"export-api.js","sourceRoot":"","sources":["../../src/bin/export-api.ts"],"names":[],"mappings":";AAEA,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAEjC,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAGxB,OAAO,YAAY,MAAM,sBAAsB,CAAC;AAChD,OAAO,OAAO,MAAM,iBAAiB,CAAC;AACtC,OAAO,OAAO,MAAM,iBAAiB,CAAC;AACtC,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAE7C;;;GAGG;AACH,MAAM,SAAS,GAAG,KAAK,EAAE,OAAoB,EAAiB,EAAE;IAC9D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC7B,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,kCAAkC,CAAC,CAAC;IAE3D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAE5D,IAAI;QACF,2CAA2C;QAC3C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;YAC5B,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE;gBAClC,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QAEL,yDAAyD;QACzD,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,EACnC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CACjC,CAAC;QAEF,0DAA0D;QAE1D,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,IAAI,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,OAAO,2BAA2B,IAAI,EAAE,CAAC,CAAC;KAC9D;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,yCAAyC,CAAC,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,IAAI,GAAG,KAAK,IAAmB,EAAE;IACrC,MAAM,SAAS,GAAG,MAAM,YAAY,EAAE,CAAC;IACvC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9C,MAAM,SAAS,CAAC,OAAO,CAAC,CAAC;IACzB,OAAO,CAAC,OAAO,EAAE,aAAa,EAAE,sBAAsB,CAAC,CAAC;IACxD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC;AAEF,IAAI,EAAE,CAAC","sourcesContent":["#!/usr/bin/env node\n\nconst fileTimeStart = Date.now();\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { ExportedApi } from '../typings/exports';\nimport getRawConfig from './utils/getRawConfig';\nimport loadApi from './utils/loadApi';\nimport logInfo from './utils/logInfo';\nimport logger, { cli } from './utils/logger';\n\n/**\n * Export the API data to a JSON file.\n * @param apiData The API data.\n */\nconst exportApi = async (apiData: ExportedApi): Promise<void> => {\n  const timeStart = Date.now();\n  logger.info(`${cli.info} Exporting API data to JSON file`);\n\n  const targetPath = path.join(process.cwd(), apiData.output);\n\n  try {\n    // Make ouput directory if it doesn't exist\n    if (!fs.existsSync(targetPath))\n      await fs.promises.mkdir(targetPath, {\n        recursive: true,\n      });\n\n    // Write the API data to a JSON file in the out directory\n    await fs.promises.writeFile(\n      path.join(targetPath, `./api.json`),\n      JSON.stringify(apiData, null, 2)\n    );\n\n    // fs.promises.unlink(path.join(__dirname, `./api.json`));\n\n    const time = `${Date.now() - timeStart}ms`;\n    logger.info(`${cli.success} âš¡ Exported API data in ${time}`);\n  } catch (error) {\n    logger.error(`${cli.error} Failed to export API data to JSON file`);\n    logger.info(error);\n  }\n};\n\n/**\n * The main function.\n */\nconst main = async (): Promise<void> => {\n  const rawConfig = await getRawConfig();\n  const apiData = await loadApi(rawConfig.file);\n  await exportApi(apiData);\n  logInfo(apiData, fileTimeStart, 'Exported API to JSON');\n  process.exit(1);\n};\n\nmain();\n"]}