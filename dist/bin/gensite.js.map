{"version":3,"file":"gensite.js","sourceRoot":"","sources":["../../src/bin/gensite.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nconst fileTimeStart = Date.now();\n\nimport { exec } from 'child_process';\nimport colors from 'colors';\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\n\nimport { ExportedApi } from '../typings/exports';\nimport { ExpressCustomError } from '../utils/index';\nimport getRawConfig from './utils/getRawConfig';\nimport loadApi from './utils/loadApi';\nimport logInfo from './utils/logInfo';\nimport logger, { cli, site } from './utils/logger';\n\nconst debug = process.argv.includes('--debug');\n\nif (debug) logger.info(`${cli.info} ${colors.magenta('Debug mode enabled')}`);\n\n/**\n * Export the routes to a JSON file.\n * @param apiData The API data.\n */\nconst exportRoutes = async (apiData: ExportedApi): Promise<void> => {\n  const timeStart = Date.now();\n  logger.info(`${cli.info} Exporting routes to JSON file`);\n\n  try {\n    // Write the routes to a JSON file in the site directory\n    await fs.promises.writeFile(\n      path.join(__dirname, '../../site/api.json'),\n      JSON.stringify(apiData, null, 2)\n    );\n\n    const time = `${Date.now() - timeStart}ms`;\n    logger.info(`${cli.success} ⚡ Exported routes in ${time}`);\n  } catch (error) {\n    logger.error(`${cli.error} Failed to export routes`);\n    logger.error(error);\n  }\n};\n\n/**\n * Install the dependencies for the site.\n */\nconst installSiteDependencies = async (): Promise<void> => {\n  const timeStart = Date.now();\n  logger.info(`${cli.info} Installing site dependencies`);\n\n  if (fs.existsSync('../../site/node_modules')) {\n    logger.info(\n      `${cli.info} Copying node_modules ${colors.yellow('please wait')}}`\n    );\n    await fs.promises.cp(\n      path.join(__dirname, '../../site/node_modules'),\n      '../site/node_modules'\n    );\n  }\n\n  try {\n    const { stdout, stderr } = await promisify(exec)('npm install', {\n      cwd: path.join(__dirname, '../site'),\n      // shell: true,\n    });\n\n    if (stdout && debug) logger.info(stdout);\n    if (stderr) {\n      logger.error(\n        `${site.err} Error occurred while installing site dependencies`\n      );\n      logger.error(stderr);\n    }\n\n    const time = `${Date.now() - timeStart}ms`;\n    logger.info(`${site.suc} ⚡ Site install dependencies success in ${time}`);\n  } catch (error) {\n    logger.error(`${site.err} Failed to install site dependencies`);\n    logger.error((error as { stack: string }).stack);\n    process.exit(1);\n  }\n};\n\n/**\n * Build the static site with next.js.\n */\nconst buildSite = async (): Promise<void> => {\n  const timeStart = Date.now();\n  logger.info(\n    `${cli.info} Building static site (${colors.yellow('please wait')})`\n  );\n\n  try {\n    const { stdout, stderr } = await promisify(exec)('npx next build', {\n      cwd: path.join(__dirname, '../site'),\n      // shell: true,\n    });\n\n    if (stdout && debug) logger.info(stdout);\n    if (stderr) {\n      logger.error(`${site.err} Error occurred while building site`);\n      logger.error(stderr);\n    }\n\n    const time = `${Date.now() - timeStart}ms`;\n    logger.info(`${site.suc} ⚡ Build success in ${time}`);\n  } catch (error) {\n    logger.error(`${site.err} Failed to build site`);\n    logger.error((error as { stack: string }).stack);\n    process.exit(1);\n  }\n};\n\n/**\n * Copy the site to the ouput directory.\n * @param apiData The API data.\n */\nconst copySite = async (apiData: ExportedApi): Promise<void> => {\n  const timeStart = Date.now();\n  logger.info(`${cli.info} Copying site to ${apiData.output}`);\n\n  const targetPath = path.join(process.cwd(), apiData.output);\n  const targetPathOut = path.join(process.cwd(), `${apiData.output}/out`);\n\n  // Make ouput directory if it doesn't exist\n  if (!fs.existsSync(targetPath)) await fs.promises.mkdir(targetPath);\n  if (!fs.existsSync(targetPathOut)) await fs.promises.mkdir(targetPathOut);\n\n  try {\n    // Copy the site to the ouput directory\n    await fs.promises.cp(path.join(__dirname, '../site/out'), targetPath);\n\n    // Copy the api.json file to the out directory\n    await fs.promises.copyFile(\n      path.join(__dirname, '../site/api.json'),\n      path.join(__dirname, '../site/out/api.json')\n    );\n\n    const time = `${Date.now() - timeStart}ms`;\n    logger.info(`${cli.success} ⚡ Copied site in ${time}`);\n  } catch (error) {\n    logger.error(`${cli.error} Failed to copy site to ${apiData.output}`);\n    throw new ExpressCustomError(error as string);\n  }\n};\n\n/**\n * Main function.\n */\nconst main = async (): Promise<void> => {\n  const rawConfig = await getRawConfig();\n  const apiData = await loadApi(rawConfig.file);\n  await exportRoutes(apiData);\n  await installSiteDependencies();\n  await buildSite();\n  await copySite(apiData);\n  logInfo(apiData, fileTimeStart, 'Generated site');\n  process.exit(1);\n};\n\nmain();\n"]}