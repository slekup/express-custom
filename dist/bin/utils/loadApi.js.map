{"version":3,"file":"loadApi.js","sourceRoot":"","sources":["../../../src/bin/utils/loadApi.ts"],"names":[],"mappings":"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","sourcesContent":["import colors from 'colors';\nimport fs from 'fs';\nimport { createRequire } from 'module';\nimport path from 'path';\nimport * as tsNode from 'ts-node';\nimport * as tsconfigPaths from 'tsconfig-paths';\nimport { CompilerOptions } from 'typescript';\n\nimport Api from '../../builders/Api';\nimport { ExportedApi } from '../../typings/exports';\nimport logger, { cli } from './logger';\n\ninterface TsConfig {\n  compilerOptions?: CompilerOptions;\n  include?: string[];\n  exclude?: string[];\n}\n\n/**\n * Load the API file.\n * @param fileName The file name.\n * @returns The exported API data.\n */\nexport default async (fileName: string): Promise<Readonly<ExportedApi>> => {\n  const timeStart = Date.now();\n  let apiData = {} as Readonly<ExportedApi>;\n\n  try {\n    // Load the file that exports the API\n    const filePath = path.resolve(process.cwd(), fileName).toString();\n\n    // Get the directory containing the tsconfig.json file\n    const tsconfigPath = path.resolve(process.cwd(), 'tsconfig.json');\n    const tsconfigDir = path.dirname(tsconfigPath);\n\n    logger.info(`${cli.info} Loading tsconfig.json`);\n\n    // Load the tsconfig.json file\n    let tsconfigJson: TsConfig;\n    try {\n      tsconfigJson = JSON.parse(\n        (await fs.promises.readFile(tsconfigPath)).toString()\n      ) as TsConfig;\n    } catch (error) {\n      logger.error(\n        `${\n          cli.error\n        } Failed to load tsconfig.json file. If it exists, make sure it is valid JSON: ${colors.cyan(\n          'https://jsonlint.com/'\n        )}.`\n      );\n      process.exit(1);\n    }\n\n    if (!tsconfigJson.compilerOptions) {\n      logger.error(\n        `${cli.error} Failed to load tsconfig.json file, no compilerOptions.`\n      );\n      process.exit(1);\n    }\n\n    const baseUrl = tsconfigJson.compilerOptions.baseUrl ?? '.';\n    const paths = tsconfigJson.compilerOptions.paths ?? {};\n\n    logger.info(`${cli.info} Compiling TypeScript`);\n\n    // Compile TypeScript code to JavaScript using ts-node\n    tsNode\n      .register({\n        transpileOnly: true,\n        project: process.cwd(),\n        compilerOptions: {\n          ...tsconfigJson.compilerOptions,\n          module: 'commonjs',\n          esModuleInterop: true,\n        } /* \n        loader: {\n          '.ts': 'ts-node/esm',\n        }, */,\n        experimentalSpecifierResolution: 'node',\n      })\n      .compile(\n        await fs.promises.readFile(filePath, { encoding: 'utf-8' }),\n        filePath\n      );\n\n    logger.info(`${cli.info} Registering tsconfig paths`);\n\n    tsconfigPaths.register({\n      baseUrl: path.resolve(tsconfigDir, baseUrl),\n      paths: {\n        ...paths,\n        '*': ['node_modules/*'],\n      },\n    });\n\n    logger.info(`${cli.info} Loading API file`);\n\n    const requireModule = createRequire(path.resolve(__dirname, __filename));\n    const module = requireModule(filePath) as { default?: Api };\n\n    const time = `${Date.now() - timeStart}ms`;\n    logger.info(`${cli.success} âš¡ Loaded API file in ${time}`);\n\n    // Access the exported API\n    if (!module.default) {\n      logger.error(\n        `${cli.error} Failed to load the API file, no default export.`\n      );\n      process.exit(1);\n    }\n\n    const api: Api = module.default;\n\n    // Return the exported API\n    apiData = await api.export();\n  } catch (error) {\n    logger.error(\n      `${cli.error} Failed to load the API file, you have errors in your code!`\n    );\n    logger.error((error as { stack: string }).stack);\n    process.exit(1);\n  }\n\n  return apiData;\n};\n"]}