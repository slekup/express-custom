{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/bin/utils/logger.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,MAAM,CAAC,MAAM,GAAG,GAAG;IACjB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACxB,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5B,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;CACzB,CAAC;AAEF,MAAM,CAAC,MAAM,IAAI,GAAG;IAClB,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACxB,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;IACzB,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;CACxB,CAAC;AAEF;;GAEG;AACH,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAC1C,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EACtC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAqB,EAAE,EAAE;IAC9D,IAAI,GAAG,GAAG,OAAiB,CAAC;IAC5B,yDAAyD;IACzD,IAAI,KAAK;QAAE,GAAG,IAAI,KAAK,KAAe,EAAE,CAAC;IACzC,OAAO,GAAG,CAAC;AACb,CAAC,CAAC,CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;IAClC,KAAK,EAAE,MAAM;IACb,MAAM,EAAE,aAAa;IACrB,UAAU,EAAE;QACV,oBAAoB;QACpB,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,MAAM;SACd,CAAC;KACH;CACF,CAAC,CAAC;AAEH,eAAe,MAAM,CAAC","sourcesContent":["import colors from 'colors';\nimport { TransformableInfo } from 'logform';\nimport * as winston from 'winston';\n\nexport const cli = {\n  info: colors.blue('CLI'),\n  success: colors.green('CLI'),\n  warning: colors.yellow('CLI'),\n  error: colors.red('CLI'),\n};\n\nexport const site = {\n  inf: colors.blue('SITE'),\n  suc: colors.green('SITE'),\n  err: colors.red('SITE'),\n};\n\n/**\n * The format for the console transport.\n */\nconst consoleFormat = winston.format.combine(\n  winston.format.colorize(),\n  winston.format.errors({ stack: true }),\n  winston.format.printf(({ message, stack }: TransformableInfo) => {\n    let msg = message as string;\n    // Append the stack trace to the message if it is present\n    if (stack) msg += `\\n${stack as string}`;\n    return msg;\n  })\n);\n\n/**\n * The logger instance - console transports only.\n */\nconst logger = winston.createLogger({\n  level: 'info',\n  format: consoleFormat,\n  transports: [\n    // Console transport\n    new winston.transports.Console({\n      level: 'info',\n    }),\n  ],\n});\n\nexport default logger;\n"]}