{"version":3,"file":"getRawConfig.js","sourceRoot":"","sources":["../../../src/bin/utils/getRawConfig.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAGxB,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAKvC;;;GAGG;AACH,eAAe,KAAK,IAAwB,EAAE;IAC5C,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,gCAAgC,CAAC,CAAC;IAEzD,IAAI,MAAiB,CAAC;IAEtB,IAAI;QACF,2BAA2B;QAC3B,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAC3C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,qBAAqB,CAAC,CAChD,CAAC;QAEF,iBAAiB;QACjB,IAAI;YACF,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAc,CAAC;SACzD;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,qDAAqD,CAClE,CAAC;YACF,MAAM,IAAI,kBAAkB,CAAC,KAAe,CAAC,CAAC;SAC/C;KACF;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,oDAAoD,CACjE,CAAC;QAEF,IAAI;YACF,oBAAoB;YACpB,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,CACzC,CAAC;YAEF,iBAAiB;YACjB,IAAI;gBACF,MAAM,UAAU,GACd,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAClC,CAAC,gBAAgB,CAAC,CAAC;gBAEpB,IAAI,CAAC,UAAU,EAAE;oBACf,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,yDAAyD,CACtE,CAAC;oBACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACjB;gBAED,MAAM,GAAG,UAAU,CAAC;aACrB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,kFAAkF,CAC/F,CAAC;gBACF,MAAM,IAAI,kBAAkB,CAAC,KAAe,CAAC,CAAC;aAC/C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,8BAA8B;YAC9B,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,yDAAyD,CACtE,CAAC;YACF,MAAM,IAAI,kBAAkB,CAAC,KAAe,CAAC,CAAC;SAC/C;KACF;IAED,yCAAyC;IACzC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACnD,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,6CAA6C,CAAC,CAAC;QACxE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IAED,2BAA2B;IAC3B,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;QAC5D,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,wCAAwC,CAAC,CAAC;QACnE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { Config } from '../../typings/exports';\nimport { ExpressCustomError } from '../../utils/index';\nimport logger, { cli } from './logger';\n\nexport type RawConfig = Partial<Pick<Config, 'file'>> &\n  Required<Pick<Config, 'file'>>;\n\n/**\n * Get the express-custom.json config.\n * @returns The express-custom config.\n */\nexport default async (): Promise<RawConfig> => {\n  logger.info(`${cli.info} Loading express-custom config`);\n\n  let config: RawConfig;\n\n  try {\n    // Read express-custom.json\n    const configJSON = await fs.promises.readFile(\n      path.join(process.cwd(), 'express-custom.json')\n    );\n\n    // Parse the JSON\n    try {\n      config = JSON.parse(configJSON.toString()) as RawConfig;\n    } catch (error) {\n      logger.error(\n        `${cli.error} Failed to parse express-custom.json (invalid JSON)`\n      );\n      throw new ExpressCustomError(error as string);\n    }\n  } catch (error) {\n    logger.error(\n      `${cli.error} No express-custom.json found, trying package.json`\n    );\n\n    try {\n      // Read package.json\n      const packageJSON = await fs.promises.readFile(\n        path.join(process.cwd(), 'package.json')\n      );\n\n      // Parse the JSON\n      try {\n        const configFile = (\n          JSON.parse(packageJSON.toString()) as { 'express-custom'?: RawConfig }\n        )['express-custom'];\n\n        if (!configFile) {\n          logger.error(\n            `${cli.error} Failed to load express-custom config from package.json`\n          );\n          process.exit(1);\n        }\n\n        config = configFile;\n      } catch (error) {\n        logger.error(\n          `${cli.error} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n        );\n        throw new ExpressCustomError(error as string);\n      }\n    } catch (error) {\n      // Failed to read package.json\n      logger.error(\n        `${cli.error} Failed to load express-custom config from package.json`\n      );\n      throw new ExpressCustomError(error as string);\n    }\n  }\n\n  // Check if the file is a .js or .ts file\n  if (!['.js', '.ts'].includes(config.file.slice(-3))) {\n    logger.error(`${cli.error} Specified \"file\" must be a .js or .ts file`);\n    process.exit(1);\n  }\n\n  // Check if the file exists\n  if (!fs.existsSync(path.resolve(process.cwd(), config.file))) {\n    logger.error(`${cli.error} The specified API file does not exist`);\n    process.exit(1);\n  }\n\n  return config;\n};\n"]}