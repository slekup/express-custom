import fs from 'fs';
import path from 'path';
import { PackageError } from '@utils/index';
import logger, { cli } from './logger';
/**
 * Get the express-custom.json config.
 * @returns The express-custom config.
 */
export default async () => {
    logger.info(`${cli.inf} Loading express-custom config`);
    let config;
    try {
        // Read express-custom.json
        const configJSON = await fs.promises.readFile(path.join(process.cwd(), 'express-custom.json'));
        // Parse the JSON
        try {
            config = JSON.parse(configJSON.toString());
        }
        catch (error) {
            logger.error(`${cli.err} Failed to parse express-custom.json (invalid JSON)`);
            throw new PackageError(error);
        }
    }
    catch (error) {
        logger.error(`${cli.err} No express-custom.json found, trying package.json`);
        try {
            // Read package.json
            const packageJSON = await fs.promises.readFile(path.join(process.cwd(), 'package.json'));
            // Parse the JSON
            try {
                const configFile = JSON.parse(packageJSON.toString())['express-custom'];
                if (!configFile) {
                    logger.error(`${cli.err} Failed to load express-custom config from package.json`);
                    process.exit(1);
                }
                config = configFile;
            }
            catch (error) {
                logger.error(`${cli.err} Failed to parse express-custom.json (invalid JSON or no "express-custom" block)`);
                throw new PackageError(error);
            }
        }
        catch (error) {
            // Failed to read package.json
            logger.error(`${cli.err} Failed to load express-custom config from package.json`);
            throw new PackageError(error);
        }
    }
    // Check if the file is a .js or .ts file
    if (!['.js', '.ts'].includes(config.file.slice(-3))) {
        logger.error(`${cli.err} Specified "file" must be a .js or .ts file`);
        process.exit(1);
    }
    // Check if the file exists
    if (!fs.existsSync(path.resolve(process.cwd(), config.file))) {
        logger.error(`${cli.err} The specified API file does not exist`);
        process.exit(1);
    }
    return config;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UmF3Q29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Jpbi91dGlscy9nZXRSYXdDb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTVDLE9BQU8sTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBS3ZDOzs7R0FHRztBQUNILGVBQWUsS0FBSyxJQUF3QixFQUFFO0lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBRXhELElBQUksTUFBaUIsQ0FBQztJQUV0QixJQUFJO1FBQ0YsMkJBQTJCO1FBQzNCLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLHFCQUFxQixDQUFDLENBQ2hELENBQUM7UUFFRixpQkFBaUI7UUFDakIsSUFBSTtZQUNGLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBYyxDQUFDO1NBQ3pEO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxNQUFNLENBQUMsS0FBSyxDQUNWLEdBQUcsR0FBRyxDQUFDLEdBQUcscURBQXFELENBQ2hFLENBQUM7WUFDRixNQUFNLElBQUksWUFBWSxDQUFDLEtBQWUsQ0FBQyxDQUFDO1NBQ3pDO0tBQ0Y7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQ1YsR0FBRyxHQUFHLENBQUMsR0FBRyxvREFBb0QsQ0FDL0QsQ0FBQztRQUVGLElBQUk7WUFDRixvQkFBb0I7WUFDcEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQ3pDLENBQUM7WUFFRixpQkFBaUI7WUFDakIsSUFBSTtnQkFDRixNQUFNLFVBQVUsR0FDZCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FDbEMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUVwQixJQUFJLENBQUMsVUFBVSxFQUFFO29CQUNmLE1BQU0sQ0FBQyxLQUFLLENBQ1YsR0FBRyxHQUFHLENBQUMsR0FBRyx5REFBeUQsQ0FDcEUsQ0FBQztvQkFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNqQjtnQkFFRCxNQUFNLEdBQUcsVUFBVSxDQUFDO2FBQ3JCO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsTUFBTSxDQUFDLEtBQUssQ0FDVixHQUFHLEdBQUcsQ0FBQyxHQUFHLGtGQUFrRixDQUM3RixDQUFDO2dCQUNGLE1BQU0sSUFBSSxZQUFZLENBQUMsS0FBZSxDQUFDLENBQUM7YUFDekM7U0FDRjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsOEJBQThCO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQ1YsR0FBRyxHQUFHLENBQUMsR0FBRyx5REFBeUQsQ0FDcEUsQ0FBQztZQUNGLE1BQU0sSUFBSSxZQUFZLENBQUMsS0FBZSxDQUFDLENBQUM7U0FDekM7S0FDRjtJQUVELHlDQUF5QztJQUN6QyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNuRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsNkNBQTZDLENBQUMsQ0FBQztRQUN0RSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsMkJBQTJCO0lBQzNCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1FBQzVELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IFBhY2thZ2VFcnJvciB9IGZyb20gJ0B1dGlscy9pbmRleCc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi90eXBpbmdzL2V4cG9ydHMnO1xuaW1wb3J0IGxvZ2dlciwgeyBjbGkgfSBmcm9tICcuL2xvZ2dlcic7XG5cbmV4cG9ydCB0eXBlIFJhd0NvbmZpZyA9IFBhcnRpYWw8UGljazxDb25maWcsICdmaWxlJz4+ICZcbiAgUmVxdWlyZWQ8UGljazxDb25maWcsICdmaWxlJz4+O1xuXG4vKipcbiAqIEdldCB0aGUgZXhwcmVzcy1jdXN0b20uanNvbiBjb25maWcuXG4gKiBAcmV0dXJucyBUaGUgZXhwcmVzcy1jdXN0b20gY29uZmlnLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoKTogUHJvbWlzZTxSYXdDb25maWc+ID0+IHtcbiAgbG9nZ2VyLmluZm8oYCR7Y2xpLmluZn0gTG9hZGluZyBleHByZXNzLWN1c3RvbSBjb25maWdgKTtcblxuICBsZXQgY29uZmlnOiBSYXdDb25maWc7XG5cbiAgdHJ5IHtcbiAgICAvLyBSZWFkIGV4cHJlc3MtY3VzdG9tLmpzb25cbiAgICBjb25zdCBjb25maWdKU09OID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUoXG4gICAgICBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2V4cHJlc3MtY3VzdG9tLmpzb24nKVxuICAgICk7XG5cbiAgICAvLyBQYXJzZSB0aGUgSlNPTlxuICAgIHRyeSB7XG4gICAgICBjb25maWcgPSBKU09OLnBhcnNlKGNvbmZpZ0pTT04udG9TdHJpbmcoKSkgYXMgUmF3Q29uZmlnO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgIGAke2NsaS5lcnJ9IEZhaWxlZCB0byBwYXJzZSBleHByZXNzLWN1c3RvbS5qc29uIChpbnZhbGlkIEpTT04pYFxuICAgICAgKTtcbiAgICAgIHRocm93IG5ldyBQYWNrYWdlRXJyb3IoZXJyb3IgYXMgc3RyaW5nKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nZ2VyLmVycm9yKFxuICAgICAgYCR7Y2xpLmVycn0gTm8gZXhwcmVzcy1jdXN0b20uanNvbiBmb3VuZCwgdHJ5aW5nIHBhY2thZ2UuanNvbmBcbiAgICApO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFJlYWQgcGFja2FnZS5qc29uXG4gICAgICBjb25zdCBwYWNrYWdlSlNPTiA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKFxuICAgICAgICBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3BhY2thZ2UuanNvbicpXG4gICAgICApO1xuXG4gICAgICAvLyBQYXJzZSB0aGUgSlNPTlxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29uZmlnRmlsZSA9IChcbiAgICAgICAgICBKU09OLnBhcnNlKHBhY2thZ2VKU09OLnRvU3RyaW5nKCkpIGFzIHsgJ2V4cHJlc3MtY3VzdG9tJz86IFJhd0NvbmZpZyB9XG4gICAgICAgIClbJ2V4cHJlc3MtY3VzdG9tJ107XG5cbiAgICAgICAgaWYgKCFjb25maWdGaWxlKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgYCR7Y2xpLmVycn0gRmFpbGVkIHRvIGxvYWQgZXhwcmVzcy1jdXN0b20gY29uZmlnIGZyb20gcGFja2FnZS5qc29uYFxuICAgICAgICAgICk7XG4gICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnID0gY29uZmlnRmlsZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgJHtjbGkuZXJyfSBGYWlsZWQgdG8gcGFyc2UgZXhwcmVzcy1jdXN0b20uanNvbiAoaW52YWxpZCBKU09OIG9yIG5vIFwiZXhwcmVzcy1jdXN0b21cIiBibG9jaylgXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IG5ldyBQYWNrYWdlRXJyb3IoZXJyb3IgYXMgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRmFpbGVkIHRvIHJlYWQgcGFja2FnZS5qc29uXG4gICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgIGAke2NsaS5lcnJ9IEZhaWxlZCB0byBsb2FkIGV4cHJlc3MtY3VzdG9tIGNvbmZpZyBmcm9tIHBhY2thZ2UuanNvbmBcbiAgICAgICk7XG4gICAgICB0aHJvdyBuZXcgUGFja2FnZUVycm9yKGVycm9yIGFzIHN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYSAuanMgb3IgLnRzIGZpbGVcbiAgaWYgKCFbJy5qcycsICcudHMnXS5pbmNsdWRlcyhjb25maWcuZmlsZS5zbGljZSgtMykpKSB7XG4gICAgbG9nZ2VyLmVycm9yKGAke2NsaS5lcnJ9IFNwZWNpZmllZCBcImZpbGVcIiBtdXN0IGJlIGEgLmpzIG9yIC50cyBmaWxlYCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGZpbGUgZXhpc3RzXG4gIGlmICghZnMuZXhpc3RzU3luYyhwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLmZpbGUpKSkge1xuICAgIGxvZ2dlci5lcnJvcihgJHtjbGkuZXJyfSBUaGUgc3BlY2lmaWVkIEFQSSBmaWxlIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iXX0=