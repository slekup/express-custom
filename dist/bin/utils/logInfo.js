import colors from 'colors';
import logger, { cli } from './logger';
/**
 * Log information about the process.
 * @param apiData The API data.
 * @param fileTimeStart The time the file started.
 * @param text The text to log.
 */
export default (apiData, fileTimeStart, text) => {
    const fileTimeEnd = Date.now();
    const fileTime = `${fileTimeEnd - fileTimeStart}ms`;
    logger.info(`${cli.suc} âš¡ ${text} in ${fileTime}`);
    const info = `
${colors.magenta('Name:')} ${apiData.name}  
${colors.magenta('Description:')} ${apiData.description}
${colors.magenta('Base URL:')} ${apiData.baseUrl}

${colors.cyan('Versions:')} ${apiData.versions
        .map((version) => version.version)
        .join(', ')}
${colors.cyan('Groups:')} ${apiData.versions.reduce((prev, current) => prev + current.groups.length, 0)}
${colors.cyan('Routes:')} ${apiData.versions.reduce((prev, current) => prev +
        current.groups.reduce((prev, current) => prev + current.routes.length, 0), 0)}
${colors.cyan('Endpoints:')} ${apiData.versions.reduce((prev, current) => prev +
        current.groups.reduce((prev, current) => prev +
            current.routes.reduce((prev, current) => prev + current.endpoints.length, 0), 0), 0)}
  `;
    logger.info(info);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nSW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vdXRpbHMvbG9nSW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdkM7Ozs7O0dBS0c7QUFDSCxlQUFlLENBQ2IsT0FBOEIsRUFDOUIsYUFBcUIsRUFDckIsSUFBWSxFQUNOLEVBQUU7SUFDUixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsTUFBTSxRQUFRLEdBQUcsR0FBRyxXQUFXLEdBQUcsYUFBYSxJQUFJLENBQUM7SUFFcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLE1BQU0sSUFBSSxPQUFPLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkQsTUFBTSxJQUFJLEdBQUc7RUFDYixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJO0VBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksT0FBTyxDQUFDLFdBQVc7RUFDckQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTzs7RUFFOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUTtTQUN6QyxHQUFHLENBQUMsQ0FBQyxPQUE0QixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQ3RELElBQUksQ0FBQyxJQUFJLENBQUM7RUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUMvQyxDQUFDLElBQVksRUFBRSxPQUE4QixFQUFFLEVBQUUsQ0FDL0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUM5QixDQUFDLENBQ0Y7RUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUMvQyxDQUFDLElBQVksRUFBRSxPQUE0QyxFQUFFLEVBQUUsQ0FDN0QsSUFBSTtRQUNKLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUNuQixDQUFDLElBQVksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFDdkQsQ0FBQyxDQUNGLEVBQ0gsQ0FBQyxDQUNGO0VBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDbEQsQ0FDRSxJQUFZLEVBQ1osT0FBNkQsRUFDN0QsRUFBRSxDQUNGLElBQUk7UUFDSixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDbkIsQ0FBQyxJQUFZLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDeEIsSUFBSTtZQUNKLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUNuQixDQUFDLElBQVksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFDMUQsQ0FBQyxDQUNGLEVBQ0gsQ0FBQyxDQUNGLEVBQ0gsQ0FBQyxDQUNGO0dBQ0EsQ0FBQztJQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwb3J0ZWRBcGkgfSBmcm9tICdAdHlwaW5ncy9leHBvcnRzJztcclxuaW1wb3J0IGNvbG9ycyBmcm9tICdjb2xvcnMnO1xyXG5pbXBvcnQgbG9nZ2VyLCB7IGNsaSB9IGZyb20gJy4vbG9nZ2VyJztcclxuXHJcbi8qKlxyXG4gKiBMb2cgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb2Nlc3MuXHJcbiAqIEBwYXJhbSBhcGlEYXRhIFRoZSBBUEkgZGF0YS5cclxuICogQHBhcmFtIGZpbGVUaW1lU3RhcnQgVGhlIHRpbWUgdGhlIGZpbGUgc3RhcnRlZC5cclxuICogQHBhcmFtIHRleHQgVGhlIHRleHQgdG8gbG9nLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgKFxyXG4gIGFwaURhdGE6IFJlYWRvbmx5PEV4cG9ydGVkQXBpPixcclxuICBmaWxlVGltZVN0YXJ0OiBudW1iZXIsXHJcbiAgdGV4dDogc3RyaW5nXHJcbik6IHZvaWQgPT4ge1xyXG4gIGNvbnN0IGZpbGVUaW1lRW5kID0gRGF0ZS5ub3coKTtcclxuICBjb25zdCBmaWxlVGltZSA9IGAke2ZpbGVUaW1lRW5kIC0gZmlsZVRpbWVTdGFydH1tc2A7XHJcblxyXG4gIGxvZ2dlci5pbmZvKGAke2NsaS5zdWN9IOKaoSAke3RleHR9IGluICR7ZmlsZVRpbWV9YCk7XHJcblxyXG4gIGNvbnN0IGluZm8gPSBgXHJcbiR7Y29sb3JzLm1hZ2VudGEoJ05hbWU6Jyl9ICR7YXBpRGF0YS5uYW1lfSAgXHJcbiR7Y29sb3JzLm1hZ2VudGEoJ0Rlc2NyaXB0aW9uOicpfSAke2FwaURhdGEuZGVzY3JpcHRpb259XHJcbiR7Y29sb3JzLm1hZ2VudGEoJ0Jhc2UgVVJMOicpfSAke2FwaURhdGEuYmFzZVVybH1cclxuXHJcbiR7Y29sb3JzLmN5YW4oJ1ZlcnNpb25zOicpfSAke2FwaURhdGEudmVyc2lvbnNcclxuICAgIC5tYXAoKHZlcnNpb246IHsgdmVyc2lvbjogbnVtYmVyIH0pID0+IHZlcnNpb24udmVyc2lvbilcclxuICAgIC5qb2luKCcsICcpfVxyXG4ke2NvbG9ycy5jeWFuKCdHcm91cHM6Jyl9ICR7YXBpRGF0YS52ZXJzaW9ucy5yZWR1Y2UoXHJcbiAgICAocHJldjogbnVtYmVyLCBjdXJyZW50OiB7IGdyb3VwczogdW5rbm93bltdIH0pID0+XHJcbiAgICAgIHByZXYgKyBjdXJyZW50Lmdyb3Vwcy5sZW5ndGgsXHJcbiAgICAwXHJcbiAgKX1cclxuJHtjb2xvcnMuY3lhbignUm91dGVzOicpfSAke2FwaURhdGEudmVyc2lvbnMucmVkdWNlKFxyXG4gICAgKHByZXY6IG51bWJlciwgY3VycmVudDogeyBncm91cHM6IHsgcm91dGVzOiB1bmtub3duW10gfVtdIH0pID0+XHJcbiAgICAgIHByZXYgK1xyXG4gICAgICBjdXJyZW50Lmdyb3Vwcy5yZWR1Y2UoXHJcbiAgICAgICAgKHByZXY6IG51bWJlciwgY3VycmVudCkgPT4gcHJldiArIGN1cnJlbnQucm91dGVzLmxlbmd0aCxcclxuICAgICAgICAwXHJcbiAgICAgICksXHJcbiAgICAwXHJcbiAgKX1cclxuJHtjb2xvcnMuY3lhbignRW5kcG9pbnRzOicpfSAke2FwaURhdGEudmVyc2lvbnMucmVkdWNlKFxyXG4gICAgKFxyXG4gICAgICBwcmV2OiBudW1iZXIsXHJcbiAgICAgIGN1cnJlbnQ6IHsgZ3JvdXBzOiB7IHJvdXRlczogeyBlbmRwb2ludHM6IHVua25vd25bXSB9W10gfVtdIH1cclxuICAgICkgPT5cclxuICAgICAgcHJldiArXHJcbiAgICAgIGN1cnJlbnQuZ3JvdXBzLnJlZHVjZShcclxuICAgICAgICAocHJldjogbnVtYmVyLCBjdXJyZW50KSA9PlxyXG4gICAgICAgICAgcHJldiArXHJcbiAgICAgICAgICBjdXJyZW50LnJvdXRlcy5yZWR1Y2UoXHJcbiAgICAgICAgICAgIChwcmV2OiBudW1iZXIsIGN1cnJlbnQpID0+IHByZXYgKyBjdXJyZW50LmVuZHBvaW50cy5sZW5ndGgsXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICAgICksXHJcbiAgICAgICAgMFxyXG4gICAgICApLFxyXG4gICAgMFxyXG4gICl9XHJcbiAgYDtcclxuXHJcbiAgbG9nZ2VyLmluZm8oaW5mbyk7XHJcbn07XHJcbiJdfQ==