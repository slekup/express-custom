import colors from 'colors';
import logger, { cli } from './logger';
/**
 * Log information about the process.
 * @param apiData The API data.
 * @param fileTimeStart The time the file started.
 * @param text The text to log.
 */
export default (apiData, fileTimeStart, text) => {
    const fileTimeEnd = Date.now();
    const fileTime = `${fileTimeEnd - fileTimeStart}ms`;
    logger.info(`${cli.suc} âš¡ ${text} in ${fileTime}`);
    const info = `
${colors.magenta('Name:')} ${apiData.name}  
${colors.magenta('Description:')} ${apiData.description}
${colors.magenta('Base URL:')} ${apiData.baseUrl}

${colors.cyan('Versions:')} ${apiData.versions
        .map((version) => version.version)
        .join(', ')}
${colors.cyan('Groups:')} ${apiData.versions.reduce((prev, current) => prev + current.groups.length, 0)}
${colors.cyan('Routes:')} ${apiData.versions.reduce((prev, current) => prev +
        current.groups.reduce((prev, current) => prev + current.routes.length, 0), 0)}
${colors.cyan('Endpoints:')} ${apiData.versions.reduce((prev, current) => prev +
        current.groups.reduce((prev, current) => prev +
            current.routes.reduce((prev, current) => prev + current.endpoints.length, 0), 0), 0)}
  `;
    logger.info(info);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nSW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vdXRpbHMvbG9nSW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdkM7Ozs7O0dBS0c7QUFDSCxlQUFlLENBQ2IsT0FBOEIsRUFDOUIsYUFBcUIsRUFDckIsSUFBWSxFQUNOLEVBQUU7SUFDUixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsTUFBTSxRQUFRLEdBQUcsR0FBRyxXQUFXLEdBQUcsYUFBYSxJQUFJLENBQUM7SUFFcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLE1BQU0sSUFBSSxPQUFPLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbkQsTUFBTSxJQUFJLEdBQUc7RUFDYixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJO0VBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksT0FBTyxDQUFDLFdBQVc7RUFDckQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTzs7RUFFOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUTtTQUN6QyxHQUFHLENBQUMsQ0FBQyxPQUE0QixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQ3RELElBQUksQ0FBQyxJQUFJLENBQUM7RUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUMvQyxDQUFDLElBQVksRUFBRSxPQUE4QixFQUFFLEVBQUUsQ0FDL0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUM5QixDQUFDLENBQ0Y7RUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUMvQyxDQUFDLElBQVksRUFBRSxPQUE0QyxFQUFFLEVBQUUsQ0FDN0QsSUFBSTtRQUNKLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUNuQixDQUFDLElBQVksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFDdkQsQ0FBQyxDQUNGLEVBQ0gsQ0FBQyxDQUNGO0VBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDbEQsQ0FDRSxJQUFZLEVBQ1osT0FBNkQsRUFDN0QsRUFBRSxDQUNGLElBQUk7UUFDSixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDbkIsQ0FBQyxJQUFZLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDeEIsSUFBSTtZQUNKLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUNuQixDQUFDLElBQVksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFDMUQsQ0FBQyxDQUNGLEVBQ0gsQ0FBQyxDQUNGLEVBQ0gsQ0FBQyxDQUNGO0dBQ0EsQ0FBQztJQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwb3J0ZWRBcGkgfSBmcm9tICdAdHlwaW5ncy9leHBvcnRzJztcbmltcG9ydCBjb2xvcnMgZnJvbSAnY29sb3JzJztcbmltcG9ydCBsb2dnZXIsIHsgY2xpIH0gZnJvbSAnLi9sb2dnZXInO1xuXG4vKipcbiAqIExvZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvY2Vzcy5cbiAqIEBwYXJhbSBhcGlEYXRhIFRoZSBBUEkgZGF0YS5cbiAqIEBwYXJhbSBmaWxlVGltZVN0YXJ0IFRoZSB0aW1lIHRoZSBmaWxlIHN0YXJ0ZWQuXG4gKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBsb2cuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChcbiAgYXBpRGF0YTogUmVhZG9ubHk8RXhwb3J0ZWRBcGk+LFxuICBmaWxlVGltZVN0YXJ0OiBudW1iZXIsXG4gIHRleHQ6IHN0cmluZ1xuKTogdm9pZCA9PiB7XG4gIGNvbnN0IGZpbGVUaW1lRW5kID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgZmlsZVRpbWUgPSBgJHtmaWxlVGltZUVuZCAtIGZpbGVUaW1lU3RhcnR9bXNgO1xuXG4gIGxvZ2dlci5pbmZvKGAke2NsaS5zdWN9IOKaoSAke3RleHR9IGluICR7ZmlsZVRpbWV9YCk7XG5cbiAgY29uc3QgaW5mbyA9IGBcbiR7Y29sb3JzLm1hZ2VudGEoJ05hbWU6Jyl9ICR7YXBpRGF0YS5uYW1lfSAgXG4ke2NvbG9ycy5tYWdlbnRhKCdEZXNjcmlwdGlvbjonKX0gJHthcGlEYXRhLmRlc2NyaXB0aW9ufVxuJHtjb2xvcnMubWFnZW50YSgnQmFzZSBVUkw6Jyl9ICR7YXBpRGF0YS5iYXNlVXJsfVxuXG4ke2NvbG9ycy5jeWFuKCdWZXJzaW9uczonKX0gJHthcGlEYXRhLnZlcnNpb25zXG4gICAgLm1hcCgodmVyc2lvbjogeyB2ZXJzaW9uOiBudW1iZXIgfSkgPT4gdmVyc2lvbi52ZXJzaW9uKVxuICAgIC5qb2luKCcsICcpfVxuJHtjb2xvcnMuY3lhbignR3JvdXBzOicpfSAke2FwaURhdGEudmVyc2lvbnMucmVkdWNlKFxuICAgIChwcmV2OiBudW1iZXIsIGN1cnJlbnQ6IHsgZ3JvdXBzOiB1bmtub3duW10gfSkgPT5cbiAgICAgIHByZXYgKyBjdXJyZW50Lmdyb3Vwcy5sZW5ndGgsXG4gICAgMFxuICApfVxuJHtjb2xvcnMuY3lhbignUm91dGVzOicpfSAke2FwaURhdGEudmVyc2lvbnMucmVkdWNlKFxuICAgIChwcmV2OiBudW1iZXIsIGN1cnJlbnQ6IHsgZ3JvdXBzOiB7IHJvdXRlczogdW5rbm93bltdIH1bXSB9KSA9PlxuICAgICAgcHJldiArXG4gICAgICBjdXJyZW50Lmdyb3Vwcy5yZWR1Y2UoXG4gICAgICAgIChwcmV2OiBudW1iZXIsIGN1cnJlbnQpID0+IHByZXYgKyBjdXJyZW50LnJvdXRlcy5sZW5ndGgsXG4gICAgICAgIDBcbiAgICAgICksXG4gICAgMFxuICApfVxuJHtjb2xvcnMuY3lhbignRW5kcG9pbnRzOicpfSAke2FwaURhdGEudmVyc2lvbnMucmVkdWNlKFxuICAgIChcbiAgICAgIHByZXY6IG51bWJlcixcbiAgICAgIGN1cnJlbnQ6IHsgZ3JvdXBzOiB7IHJvdXRlczogeyBlbmRwb2ludHM6IHVua25vd25bXSB9W10gfVtdIH1cbiAgICApID0+XG4gICAgICBwcmV2ICtcbiAgICAgIGN1cnJlbnQuZ3JvdXBzLnJlZHVjZShcbiAgICAgICAgKHByZXY6IG51bWJlciwgY3VycmVudCkgPT5cbiAgICAgICAgICBwcmV2ICtcbiAgICAgICAgICBjdXJyZW50LnJvdXRlcy5yZWR1Y2UoXG4gICAgICAgICAgICAocHJldjogbnVtYmVyLCBjdXJyZW50KSA9PiBwcmV2ICsgY3VycmVudC5lbmRwb2ludHMubGVuZ3RoLFxuICAgICAgICAgICAgMFxuICAgICAgICAgICksXG4gICAgICAgIDBcbiAgICAgICksXG4gICAgMFxuICApfVxuICBgO1xuXG4gIGxvZ2dlci5pbmZvKGluZm8pO1xufTtcbiJdfQ==