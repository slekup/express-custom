{"version":3,"file":"BaseValue.js","sourceRoot":"","sources":["../../../src/builders/Base/BaseValue.ts"],"names":[],"mappings":"AAWA;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,SAAS;IACrB,IAAI,CAAS;IACb,WAAW,CAAU;IACrB,QAAQ,CAAU;IAClB,MAAM,CAAe;IACrB,SAAS,CAAU;IACnB,YAAY,CAAe;IAElC;;;;;;;OAOG;IACH,YAAmB,OAAyB;QAC1C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,OAAO,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QAChE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC,mBAAmB;QAC9D,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;QACnC,IAAI,OAAO,CAAC,SAAS;YAAE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QAC1D,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QAEzC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACpD,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAE5E,IAAI,IAAI,CAAC,WAAW,IAAI,OAAO,IAAI,CAAC,WAAW,KAAK,QAAQ;YAC1D,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAElD,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,SAAS;YACpC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAEhD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAE5E,IAAI,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ;YACtD,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["import { BaseValueSchema, SchemaTypes, ValueCheck } from '@typings/schema';\n\nexport interface BaseValueOptions {\n  name: string;\n  description?: string;\n  required?: boolean;\n  checks?: ValueCheck[];\n  structure?: string;\n  defaultValue?: SchemaTypes;\n}\n\n/**\n * The BaseValue class. Used as a foundation for all value builders.\n */\nexport default class BaseValue implements BaseValueSchema {\n  public name: string;\n  public description?: string;\n  public required: boolean;\n  public checks: ValueCheck[];\n  public structure?: string;\n  public defaultValue?: SchemaTypes;\n\n  /**\n   * Creates a new instance of the BaseValue class.\n   * @param options The options for the BaseValue class.\n   * @param options.name The name of the value.\n   * @param options.description The description of the value.\n   * @param options.required Whether the value is required or not.\n   * @param options.checks The value checks. Functions that return a boolean based on the value.\n   */\n  public constructor(options: BaseValueOptions) {\n    this.name = options.name;\n    if (options.description) this.description = options.description;\n    this.required = options.required ?? false; // Default to false\n    this.checks = options.checks ?? [];\n    if (options.structure) this.structure = options.structure;\n    this.defaultValue = options.defaultValue;\n\n    this.validate();\n  }\n\n  /**\n   * Validates the BaseValue instances properties.\n   */\n  public validate(): void {\n    if (!this.name) throw new Error('Name is required');\n    if (typeof this.name !== 'string') throw new Error('Name must be a string');\n\n    if (this.description && typeof this.description !== 'string')\n      throw new Error('Description must be a string');\n\n    if (typeof this.required !== 'boolean')\n      throw new Error('Required must be a boolean');\n\n    if (!Array.isArray(this.checks)) throw new Error('Checks must be an array');\n\n    if (this.structure && typeof this.structure !== 'string')\n      throw new Error('Structure must be a string');\n  }\n}\n"]}