{"version":3,"file":"NumberValue.js","sourceRoot":"","sources":["../../../src/builders/Value/NumberValue.ts"],"names":[],"mappings":"AAAA,OAAO,SAA+B,MAAM,0BAA0B,CAAC;AAQvE;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,SAAS;IACzC,IAAI,GAAG,QAAiB,CAAC;IACzB,GAAG,CAAU;IACb,GAAG,CAAU;IAEpB;;;OAGG;IACH,YAAmB,OAA2B;QAC5C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,OAAO,CAAC,GAAG;YAAE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QACxC,IAAI,OAAO,CAAC,GAAG;YAAE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,MAAM;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;CACF","sourcesContent":["import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { INumberValue } from '@typings/schema';\n\nexport type NumberValueOptions = BaseValueOptions & {\n  min?: number;\n  max?: number;\n};\n\n/**\n * The NumberValue class, used to create number values.\n */\nexport default class NumberValue extends BaseValue implements INumberValue {\n  public type = 'number' as const;\n  public min?: number;\n  public max?: number;\n\n  /**\n   * Creates an instance of the NumberValue class.\n   * @param options The options for the NumberValue class.\n   */\n  public constructor(options: NumberValueOptions) {\n    super(options);\n    if (options.min) this.min = options.min;\n    if (options.max) this.max = options.max;\n  }\n\n  /**\n   * Exports the NumberValue class properties.\n   * @returns The NumberValue class properties.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n"]}