{"version":3,"file":"IntegerValue.js","sourceRoot":"","sources":["../../../src/builders/Value/IntegerValue.ts"],"names":[],"mappings":"AAAA,OAAO,SAA+B,MAAM,0BAA0B,CAAC;AAQvE;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,SAAS;IAC1C,IAAI,GAAG,SAAkB,CAAC;IAC1B,GAAG,CAAU;IACb,GAAG,CAAU;IAEpB;;;OAGG;IACH,YAAmB,OAA4B;QAC7C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,OAAO,CAAC,GAAG;YAAE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QACxC,IAAI,OAAO,CAAC,GAAG;YAAE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,MAAM;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;CACF","sourcesContent":["import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { IIntegerValue } from '@typings/schema';\n\nexport type IntegerValueOptions = BaseValueOptions & {\n  min?: number;\n  max?: number;\n};\n\n/**\n * The InetgerValue class, used to create integer values.\n */\nexport default class IntegerValue extends BaseValue implements IIntegerValue {\n  public type = 'integer' as const;\n  public min?: number;\n  public max?: number;\n\n  /**\n   * Creates an instance of the IntegerValue class.\n   * @param options The options for the IntegerValue class.\n   */\n  public constructor(options: IntegerValueOptions) {\n    super(options);\n    if (options.min) this.min = options.min;\n    if (options.max) this.max = options.max;\n  }\n\n  /**\n   * Exports the IntegerValue class properties.\n   * @returns The IntegerValue class properties.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n"]}