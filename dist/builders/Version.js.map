{"version":3,"file":"Version.js","sourceRoot":"","sources":["../../src/builders/Version.ts"],"names":[],"mappings":"AACA,OAAO,SAAsB,MAAM,oBAAoB,CAAC;AAGxD,OAAO,kBAAkB,MAAM,2BAA2B,CAAC;AAC3D,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAErC,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,OAAQ,SAAQ,OAAc;IACzC,OAAO,CAAS;IAChB,MAAM,CAAU;IAExB;;;;OAIG;IACH,YAAmB,EAAE,OAAO,EAAuB;QACjD,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,0BAA0B;QAC1B,MAAM,iBAAiB,GAAG,IAAI,MAAM,EAAE,CAAC,SAAS,CAAC;YAC/C,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,IAAI;YACd,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,MAAM;SACZ,CAAC,CAAC;QAEH,+CAA+C;QAC/C,iBAAiB,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACtD,IAAI,OAAO,MAAM,KAAK,QAAQ;gBAAE,MAAM,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,sCAAsC;QACtC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACa,YAAY,CAAC,OAAyB;QACpD,IAAI,CAAC,SAAS,GAAG;YACf,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,GAAG;YACrC,GAAG,CAAC,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ;gBACtC,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE;gBAC9B,CAAC,CAAC,EAAE,CAAC;YACP,GAAG,CAAC,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;SACjE,CAAC;QAEF,yCAAyC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAY;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,MAAM;QACX,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;SACnD,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,MAAM;QAKX,OAAO;YACL,IAAI,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE;YACzB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;YAAE,MAAM,IAAI,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;QAC5E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;CACF","sourcesContent":["import { Router } from 'express';\nimport rateLimit, { Options } from 'express-rate-limit';\n\nimport { ExportedVersion } from '@typings/exports';\nimport ExpressCustomError from '@utils/ExpressCustomError';\nimport BaseApp from './Base/BaseApp';\nimport Group from './Group';\nimport Schema from './Schema';\n\n/**\n * The Version class, used to create a version of the API.\n */\nexport default class Version extends BaseApp<'app'> {\n  private version: number;\n  private groups: Group[];\n\n  /**\n   * Creates a new instance of the Version class.\n   * @param options The options for the Version class.\n   * @param options.version The version number of the API.\n   */\n  public constructor({ version }: { version: number }) {\n    super('app');\n\n    // The constructor schema.\n    const constructorSchema = new Schema().addNumber({\n      name: 'version',\n      required: true,\n      min: 1,\n      max: 10_000,\n    });\n\n    // Test the the constructor against the schema.\n    constructorSchema.validate({ version }).then((result) => {\n      if (typeof result === 'string') throw new ExpressCustomError(result);\n    });\n\n    // Assign the options to the instance.\n    this.groups = [];\n    this.version = version;\n  }\n\n  /**\n   * Sets the global rate limit for the version.\n   * @param options The options of the rate limit.\n   * @returns The current Version instance.\n   */\n  public override setRateLimit(options: Partial<Options>): this {\n    this.ratelimit = {\n      statusCode: options.statusCode ?? 429,\n      ...(typeof options.windowMs === 'number'\n        ? { window: options.windowMs }\n        : {}),\n      ...(typeof options.max === 'number' ? { max: options.max } : {}),\n    };\n\n    // Use the express-rate-limit middleware.\n    this.raw.use(`v${this.version}`, rateLimit(options));\n\n    return this;\n  }\n\n  /**\n   * Adds a group to the version.\n   * @param group An instance of the Group class.\n   * @returns The current Version instance.\n   */\n  public addGroup(group: Group): this {\n    this.groups.push(group);\n    const groupValues = group.values();\n    this.raw.use(`v${this.version}`, groupValues.raw);\n    return this;\n  }\n\n  /**\n   * Exports the version as a JSON object.\n   * @returns The Version instance properties as a JSON object.\n   */\n  public export(): Readonly<ExportedVersion> {\n    return {\n      version: this.version,\n      rateLimit: this.ratelimit,\n      groups: this.groups.map((group) => group.export()),\n    };\n  }\n\n  /**\n   * Gets the version values.\n   * @returns The Version instance values.\n   */\n  public values(): Readonly<{\n    path: string;\n    raw: Router;\n    version: number;\n  }> {\n    return {\n      path: `/v${this.version}`,\n      raw: this.raw,\n      version: this.version,\n    };\n  }\n\n  /**\n   * Validates the current instance of the Version class.\n   * @throws Throws an error if the validation fails.\n   */\n  public validate(): void {\n    if (!this.groups.length) throw new ExpressCustomError('No groups provided');\n    this.groups.forEach((group) => group.validate());\n  }\n}\n"]}