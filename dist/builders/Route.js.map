{"version":3,"file":"Route.js","sourceRoot":"","sources":["../../src/builders/Route.ts"],"names":[],"mappings":"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","sourcesContent":["import { PathString } from '@typings/core';\nimport { ExportedRoute } from '@typings/exports';\nimport { PackageError } from '@utils/index';\nimport BaseApp from './Base/BaseApp';\nimport EndpointBuilder from './Endpoint';\nimport SchemaBuilder from './Schema';\n\n/**\n * The route builder class.\n */\nexport default class RouteBuilder extends BaseApp<'router'> {\n  private path: PathString;\n  private name: string;\n  private description: string;\n  private endpoints: EndpointBuilder[] = [];\n\n  /**\n   * Creates a new route.\n   * @param options The options for the route.\n   * @param options.path The path of the route.\n   * @param options.name The name of the route.\n   * @param options.description The description of the route.\n   */\n  public constructor({\n    path,\n    name,\n    description,\n  }: {\n    path: PathString;\n    name: string;\n    description: string;\n  }) {\n    super();\n\n    const constructorSchema = new SchemaBuilder()\n      .addString({\n        name: 'path',\n        required: true,\n        min: 1,\n        max: 100,\n        test: 'path',\n      })\n      .addString({\n        name: 'name',\n        required: true,\n        min: 1,\n        max: 50,\n      })\n      .addString({\n        name: 'description',\n        required: true,\n        min: 1,\n        max: 1000,\n      });\n\n    constructorSchema.validate({ name, description, path }).then((result) => {\n      if (typeof result === 'string')\n        throw new PackageError(`Route (${name || path}): ${result}`);\n    });\n\n    this.path = path;\n    this.name = name;\n    this.description = description;\n  }\n\n  /**\n   * Adds an endpoint to the route.\n   * @param endpoint The endpoint to add to the route.\n   * @returns The route builder.\n   */\n  public addEndpoint(endpoint: EndpointBuilder): this {\n    this.endpoints.push(endpoint);\n\n    // Replace multiple slashes with a single slash.\n    const doubleSlashRegex = /\\/+/g;\n\n    const url: string = `${this.path}${endpoint.path}`.replaceAll(\n      doubleSlashRegex,\n      '/'\n    );\n\n    switch (endpoint.method) {\n      case 'GET':\n        this.raw.get(url, endpoint.execute);\n        break;\n      case 'POST':\n        this.raw.post(url, endpoint.execute);\n        break;\n      case 'PUT':\n        this.raw.put(url, endpoint.execute);\n        break;\n      case 'PATCH':\n        this.raw.patch(url, endpoint.execute);\n        break;\n      case 'DELETE':\n        this.raw.delete(url, endpoint.execute);\n        break;\n      case 'OPTIONS':\n        this.raw.options(url, endpoint.execute);\n        break;\n      default:\n        throw new PackageError(`Invalid method ${String(endpoint.method)}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds all endpoints from an endpoint file to the route.\n   * @param endpointFile The endpoint file to add endpoints from.\n   * @returns The route builder.\n   */\n  public addEndpointFile(endpointFile: Record<string, EndpointBuilder>): this {\n    for (const value of Object.values(endpointFile)) {\n      this.addEndpoint(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Validates the route.\n   */\n  public validate(): void {\n    if (this.endpoints.length === 0)\n      throw new PackageError(`Route ${this.name} has no endpoints`);\n  }\n\n  /**\n   * Exports the route.\n   * @returns The exported route.\n   */\n  public export(): Readonly<ExportedRoute> {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path,\n      endpoints: this.endpoints.map((endpoint) => endpoint.export()),\n    };\n  }\n}\n"]}