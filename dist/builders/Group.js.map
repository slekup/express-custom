{"version":3,"file":"Group.js","sourceRoot":"","sources":["../../src/builders/Group.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAErC,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,OAAiB;IAC1C,IAAI,CAAa;IACjB,IAAI,CAAS;IACb,MAAM,CAAU;IAExB;;;;;OAKG;IACH,YAAmB,EAAE,IAAI,EAAE,IAAI,EAAsC;QACnE,KAAK,EAAE,CAAC;QAER,iDAAiD;QACjD,MAAM,iBAAiB,GAAG,IAAI,MAAM,EAAE;aACnC,SAAS,CAAC;YACT,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI;YACd,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,MAAM;SACb,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI;YACd,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,EAAE;SACR,CAAC,CAAC;QAEL,+CAA+C;QAC/C,iBAAiB,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACzD,IAAI,OAAO,MAAM,KAAK,QAAQ;gBAC5B,MAAM,IAAI,YAAY,CAAC,UAAU,IAAI,IAAI,IAAI,MAAM,MAAM,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,sCAAsC;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAY;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,MAAM;QAQX,OAAO;YACL,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,eAAe,EAAE,IAAI,CAAC,IAAI;YAC1B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;YAAE,MAAM,IAAI,YAAY,CAAC,oBAAoB,CAAC,CAAC;QAEtE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,MAAM;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;SACnD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Router } from 'express';\n\nimport { Middleware, PathString, RateLimit } from '@typings/core';\nimport { ExportedGroup } from '@typings/exports';\nimport { PackageError } from '@utils/index';\nimport BaseApp from './Base/BaseApp';\nimport Route from './Route';\nimport Schema from './Schema';\n\n/**\n * The Group class, used to create a group of routes.\n */\nexport default class Group extends BaseApp<'router'> {\n  private path: PathString;\n  private name: string;\n  private routes: Route[];\n\n  /**\n   * Creates a new instance of the Group class.\n   * @param options Options for the Group instance.\n   * @param options.path The path of the group.\n   * @param options.name The name of the group.\n   */\n  public constructor({ path, name }: { path: PathString; name: string }) {\n    super();\n\n    // Create the schema for the constructor options.\n    const constructorSchema = new Schema()\n      .addString({\n        name: 'path',\n        required: true,\n        min: 1,\n        max: 100,\n        test: 'path',\n      })\n      .addString({\n        name: 'name',\n        required: true,\n        min: 1,\n        max: 50,\n      });\n\n    // Test the the constructor against the schema.\n    constructorSchema.validate({ path, name }).then((result) => {\n      if (typeof result === 'string')\n        throw new PackageError(`Group (${name || path}): ${result}`);\n    });\n\n    // Assign the options to the instance.\n    this.path = path;\n    this.name = name;\n    this.routes = [];\n  }\n\n  /**\n   * Adds a route to the group.\n   * @param route An instance of the Route class.\n   * @returns The current Group instance.\n   */\n  public addRoute(route: Route): this {\n    this.routes.push(route);\n    this.raw.use(this.path, route.raw);\n    return this;\n  }\n\n  /**\n   * Returns the current group instance values.\n   * @returns The current group instance values.\n   */\n  public values(): Readonly<{\n    raw: Router;\n    ratelimit?: Partial<RateLimit> | undefined;\n    path: PathString;\n    defaultCategory: string;\n    routes: Route[];\n    middlewares: Middleware[];\n  }> {\n    return {\n      raw: this.raw,\n      ratelimit: this.ratelimit,\n      path: this.path,\n      defaultCategory: this.name,\n      routes: this.routes,\n      middlewares: this.middlewares,\n    };\n  }\n\n  /**\n   * Validates the group instance and all of its routes.\n   * @throws Throws an error if the group instance is invalid.\n   */\n  public validate(): void {\n    if (!this.routes.length) throw new PackageError('No routes provided');\n\n    this.routes.forEach((route) => route.validate());\n  }\n\n  /**\n   * Exports the routes and endpoints data.\n   * @returns The exported data.\n   */\n  public export(): Readonly<ExportedGroup> {\n    return {\n      name: this.name,\n      path: this.path,\n      routes: this.routes.map((route) => route.export()),\n    };\n  }\n}\n"]}