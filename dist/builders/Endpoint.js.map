{"version":3,"file":"Endpoint.js","sourceRoot":"","sources":["../../src/builders/Endpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\n\nimport {\n  ControllerType,\n  EndpointNote,\n  EndpointResponse,\n  PathString,\n  RateLimit,\n  RequestMethod,\n} from '@typings/core';\nimport { ExportedEndpoint } from '@typings/exports';\nimport { PackageError, logger } from '@utils/index';\nimport { initController } from '@utils/middleware/wrapper.middleware';\nimport SchemaBuilder from './Schema';\n\n/**\n * The endpoint builder class.\n */\nexport default class EndpointBuilder {\n  public disabled: boolean;\n  public name: string;\n  public description: string;\n  public path: PathString;\n  public method: RequestMethod;\n  public notes: EndpointNote[];\n  public paramSchema?: SchemaBuilder;\n  public querySchema?: SchemaBuilder;\n  public bodySchema?: SchemaBuilder;\n  public responses: EndpointResponse[];\n  public controller: (req: Request, res: Response, next: NextFunction) => void;\n  public ratelimit?: Partial<RateLimit>;\n\n  /**\n   * Creates a new endpoint.\n   * @param options The options for the endpoint.\n   * @param options.name The name of the endpoint.\n   * @param options.description The description of the endpoint.\n   * @param options.path The path of the endpoint.\n   * @param options.method The method of the endpoint.\n   * @param options.controller The controller of the endpoint.\n   * @param options.notes The notes of the endpoint.\n   * @param options.responses The responses of the endpoint.\n   * @param options.disabled The disabled state of the endpoint.\n   */\n  public constructor(options: {\n    name: string;\n    description: string;\n    path: PathString;\n    method: RequestMethod;\n    controller: ControllerType;\n    notes?: EndpointNote[];\n    responses?: EndpointResponse[];\n    disabled?: boolean;\n  }) {\n    this.disabled = options.disabled ?? false;\n    this.name = options.name;\n    this.description = options.description;\n    this.path = options.path;\n    this.method = options.method;\n    this.controller = initController(options.controller);\n    this.notes = options.notes ?? [];\n    this.responses = options.responses ?? [];\n\n    const constructorSchema = new SchemaBuilder()\n      .addBoolean({\n        name: 'disabled',\n        required: false,\n        defaultValue: false,\n      })\n      .addString({\n        name: 'name',\n        required: true,\n        min: 1,\n        max: 50,\n      })\n      .addString({\n        name: 'description',\n        required: true,\n        min: 1,\n        max: 1000,\n      })\n      .addString({\n        name: 'path',\n        required: true,\n        min: 1,\n        max: 100,\n        test: 'path',\n      })\n      .addString({\n        name: 'method',\n        required: true,\n        min: 1,\n        max: 100,\n        options: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE', 'OPTIONS'],\n      });\n\n    constructorSchema.validate(options).then((result) => {\n      if (typeof result === 'string')\n        throw new PackageError(\n          `Endpoint (${options.name || options.path}): ${result}`\n        );\n    });\n  }\n\n  /**\n   * Sets the notes of the endpoint.\n   * @param notes The notes of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setNotes(notes: EndpointNote[]): this {\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request parameters against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setParamSchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.paramSchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request queries against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setQuerySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.querySchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request body against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setBodySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.bodySchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the responses of the endpoint.\n   * @param responses The responses of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setResponses(responses: EndpointResponse[]): this {\n    this.responses = responses;\n    return this;\n  }\n\n  /**\n   * Sets the controler to run.\n   * @param controller The controlller function to run.\n   * @returns The endpoint builder.\n   */\n  public setController(\n    controller: (req: Request, res: Response) => Promise<unknown> | unknown\n  ): this {\n    this.controller = initController(controller);\n    return this;\n  }\n\n  /**\n   * Executes the endpoint function.\n   * @param req The request.\n   * @param res The response.\n   * @param next The next function.\n   */\n  public execute = (req: Request, res: Response, next: NextFunction): void => {\n    (async () => {\n      try {\n        // Validate the request\n        if (\n          this.paramSchema &&\n          (await this.paramSchema.validate(req.params, { res }))\n        )\n          return;\n        if (\n          this.querySchema &&\n          (await this.querySchema.validate(req.query, { res }))\n        )\n          return;\n        if (\n          this.bodySchema &&\n          (await this.bodySchema.validate(req.body as Record<string, unknown>, {\n            res,\n          }))\n        )\n          return;\n\n        // Run the controller\n        this.controller(req, res, next);\n      } catch (error) {\n        logger.error(error);\n      }\n    })();\n  };\n\n  /**\n   * Exports the endpoint.\n   * @returns The exported endpoint.\n   */\n  public export(): Readonly<ExportedEndpoint> {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path === '/' ? '' : this.path,\n      method: this.method,\n      notes: this.notes,\n      params: this.paramSchema ? this.paramSchema.export() : {},\n      queries: this.querySchema ? this.querySchema.export() : {},\n      body: this.bodySchema ? this.bodySchema.export() : {},\n      responses: this.responses,\n    };\n  }\n}\n"]}