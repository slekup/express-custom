{"version":3,"file":"Structure.js","sourceRoot":"","sources":["../../src/builders/Structure.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,SAAS;IACpB,IAAI,CAAS;IACb,IAAI,CAAgB;IACpB,MAAM,CAAmB;IAEjC;;;;;;OAMG;IACH,YAAmB,EACjB,IAAI,EACJ,IAAI,EACJ,MAAM,GAKP;QACC,yCAAyC;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,MAAM;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { StructureField, StructureType } from '@typings/core';\nimport { ExportedStructure } from '@typings/exports';\n\n/**\n * The StructureBuilder class, used to build a example structures for object schemas and value options.\n */\nexport default class Structure {\n  private name: string;\n  private type: StructureType;\n  private fields: StructureField[];\n\n  /**\n   * Creates a new instance of the StructureBuilder class.\n   * @param options The options for the StructureBuilder class.\n   * @param options.name The name of the structure.\n   * @param options.type The type of the structure.\n   * @param options.fields The fields of the structure.\n   */\n  public constructor({\n    name,\n    type,\n    fields,\n  }: {\n    name: string;\n    type: StructureType;\n    fields: StructureField[];\n  }) {\n    // Assign the properties to the instance.\n    this.name = name;\n    this.type = type;\n    this.fields = fields;\n  }\n\n  /**\n   * Exports the structure as a JSON object.\n   * @returns The exported structure as a JSON object.\n   */\n  public export(): ExportedStructure {\n    return {\n      name: this.name,\n      type: this.type,\n      fields: this.fields,\n    };\n  }\n}\n"]}