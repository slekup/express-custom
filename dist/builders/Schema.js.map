{"version":3,"file":"Schema.js","sourceRoot":"","sources":["../../src/builders/Schema.ts"],"names":[],"mappings":"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","sourcesContent":["//  Disable the no-param-reassign rule as it is needed to assign default values to undefined parameters.\n/* eslint-disable no-param-reassign */\n\nimport { Response } from 'express';\n\nimport { ExportedSchema, ExportedValue } from '@typings/exports';\nimport { ISchema } from '@typings/schema';\nimport {\n  validateEmail,\n  validateImage,\n  validateIpv4Address,\n  validatePath,\n  validatePhoneNumber,\n  validateUrl,\n  validateUsername,\n  valiedatePassword,\n} from '@utils/validate';\nimport {\n  ArrayValue,\n  BooleanValue,\n  ImageValue,\n  IntegerValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n} from './Value';\nimport { ArrayValueOptions } from './Value/ArrayValue';\nimport { BooleanValueOptions } from './Value/BooleanValue';\nimport { ImageValueOptions } from './Value/ImageValue';\nimport { IntegerValueOptions } from './Value/IntegerValue';\nimport { NumberValueOptions } from './Value/NumberValue';\nimport { ObjectValueOptions } from './Value/ObjectValue';\nimport { StringValueOptions } from './Value/StringValue';\n\ntype ValueBuilders =\n  | ArrayValue\n  | StringValue\n  | NumberValue\n  | IntegerValue\n  | BooleanValue\n  | ObjectValue<ValueBuilders>\n  | ImageValue;\n\nexport type BuildersSchema = Record<string, ValueBuilders>;\n\n/**\n * The Schema class, used to create schemas, which are used to validate data.\n */\nexport default class Schema {\n  public schema: BuildersSchema;\n\n  /**\n   * Creates a new instance of the Schema class.\n   */\n  public constructor() {\n    this.schema = {};\n  }\n\n  /**\n   * Adds a array value to the schema.\n   * @param options The options of the array value.\n   * @returns The current Schema instance.\n   */\n  public addArray(options: ArrayValueOptions): this {\n    const value = new ArrayValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a string value to the schema.\n   * @param options The options of the string value.\n   * @returns The current Schema instance.\n   */\n  public addString(options: StringValueOptions): this {\n    const value = new StringValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a number value to the schema.\n   * @param options The options of the number value.\n   * @returns The current Schema instance.\n   */\n  public addNumber(options: NumberValueOptions): this {\n    const value = new NumberValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a integer value to the schema.\n   * @param options The options of the integer value.\n   * @returns The current Schema instance.\n   */\n  public addInteger(options: IntegerValueOptions): this {\n    const value = new IntegerValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a boolean value to the schema.\n   * @param options The options of the boolean value.\n   * @returns The current Schema instance.\n   */\n  public addBoolean(options: BooleanValueOptions): this {\n    const value = new BooleanValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a object value to the schema.\n   * @param options The options of the object value.\n   * @returns The current Schema instance.\n   */\n  public addObject(options: ObjectValueOptions): this {\n    const value = new ObjectValue<ValueBuilders>(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a image value to the schema.\n   * @param options The options of the image value.\n   * @returns The current Schema instance.\n   */\n  public addImage(options: ImageValueOptions): this {\n    const value = new ImageValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Validate an object against a schema.\n   * @param data The object data to validate.\n   * @param schema The schema to validate against.\n   * @param properties Whether to validate the schema properties or not.\n   * @returns A string if the validation fails, false otherwise.\n   */\n  private async validateBase<T = 'schema'>(\n    data: Record<string, unknown>,\n    schema:\n      | (T extends 'schema' ? BuildersSchema : never)\n      | (T extends 'properties' ? ISchema : never),\n    properties?: boolean\n  ): Promise<string | boolean> {\n    // Check if the data is an object\n    if (typeof data !== 'object') return 'The data provided must be an object.';\n\n    const schemaFields = properties\n      ? Object.entries(schema as ISchema)\n      : Object.entries(schema as BuildersSchema);\n\n    for (const [key, value] of schemaFields) {\n      // Check if all required fields have been provided.\n      // If the field has a default value as the required value is not provided, set the field to the default value.\n      if (value.required) {\n        if (!data[key] && value.defaultValue) {\n          data[key] = value.defaultValue;\n          break;\n        } else if (!data[key]) {\n          return `The field \"${key}\" has not been provided.`;\n        }\n      }\n\n      // For non required fields, if the value is not provided, set the field to the default value if it exists.\n      if (!data[key] && value.defaultValue) {\n        data[key] = value.defaultValue;\n        return false;\n      } else if (!data[key]) {\n        return false;\n      }\n    }\n\n    // Check if all provided fields are the correct type\n    for (const [key, value] of schemaFields) {\n      if (typeof data[key] !== value.type)\n        return `The field \"${key}\" must be of type ${value.type}.`;\n    }\n\n    // Check if all provided fields are valid\n    for (const [key, value] of schemaFields) {\n      // Number validation\n      if (value.type === 'number') {\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          typeof data[key] === 'number' &&\n          ((data[key] as number) < value.min ||\n            (data[key] as number) > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n        // Check if the schema value is above the minimum required value\n        if (\n          value.min &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) < value.min\n        )\n          return `The field \"${key}\" must be at least ${value.min}.`;\n\n        // Check if the schema value is below the maximum required value\n        if (\n          value.max &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) > value.max\n        )\n          return `The field \"${key}\" must be less than ${value.max}.`;\n      }\n\n      // Integer validation\n      if (value.type === 'integer') {\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          typeof data[key] === 'number' &&\n          ((data[key] as number) < value.min ||\n            (data[key] as number) > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n        // Check if the schema value is above the minimum required value\n        if (\n          value.min &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) < value.min\n        )\n          return `The field \"${key}\" must be at least ${value.min}.`;\n\n        // Check if the schema value is below the maximum required value\n        if (\n          value.max &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) > value.max\n        )\n          return `The field \"${key}\" must be less than ${value.max}.`;\n\n        // Check if the schema value is an integer\n        if (\n          typeof data[key] !== 'number' ||\n          !Number.isInteger(data[key] as number)\n        )\n          return `The field \"${key}\" must be an integer.`;\n      }\n\n      // String validation\n      if (value.type === 'string') {\n        const req = value;\n        const testVal = data[key] as string;\n\n        // Check if the schema value is included in the schema options\n        if (\n          value.options &&\n          value.options.length > 0 &&\n          !value.options.includes(data[key] as string)\n        )\n          return `The field \"${key}\" is not a valid option.`;\n\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          (testVal.length < value.min || testVal.length > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max} characters.`;\n\n        // Check if the schema value has the minimum required length\n        if (value.min && testVal.length < value.min)\n          return `The field \"${key}\" must be at least ${value.min} characters.`;\n\n        // Check if the schema value has the maximum required length\n        if (value.max && testVal.length > value.max)\n          return `The field \"${key}\" must be less than ${value.max} characters.`;\n\n        // Test if email is valid\n        if (req.test === 'email' && !validateEmail(testVal))\n          return `The field \"${key}\" must be a valid email address.`;\n\n        // Test if username is valid\n        if (req.test === 'username' && !validateUsername(testVal))\n          return `The field \"${key}\" must be a valid username.`;\n\n        // Test if password is valid\n        if (req.test === 'passwordStrength' && !valiedatePassword(testVal))\n          return `The field \"${key}\" is too weak to be a valid password.`;\n\n        // Test if phone number is valid\n        if (req.test === 'phoneNumber' && !validatePhoneNumber(testVal))\n          return `The field \"${key}\" must be a valid phone number.`;\n\n        // Test if IPv4 address is valid\n        if (req.test === 'ipAddress' && !validateIpv4Address(testVal))\n          return `The field \"${key}\" must be a valid IPv4 address.`;\n\n        // Test if a url is valid\n        if (req.test === 'url' && !validateUrl(testVal))\n          return `The field \"${key}\" must be a valid IPv4 address.`;\n\n        // Test if a path is valid\n        if (req.test === 'path' && !validatePath(testVal))\n          return `The field \"${key}\" must be a valid path.`;\n\n        // Test if the schema value is a string\n        if (typeof data[key] !== 'string')\n          return `The field \"${key}\" must be a string.`;\n      }\n\n      // Check if the schema value passes all checks\n      if (value.checks)\n        for (const check of value.checks) {\n          const passedCheck = await check[0](key);\n          if (!passedCheck) return `${check[1]}.`;\n        }\n\n      // Boolean validation\n      if (value.type === 'boolean') {\n        // TODO: Check this works\n        // Check if the schema value is a boolean\n        if (typeof data[key] !== 'boolean')\n          return `The field \"${key}\" must be a boolean.`;\n      }\n\n      // Object validation\n      if (value.type === 'object') {\n        // TODO: Check this works\n        // Check if the schema value is an object\n        if (typeof data[key] !== 'object')\n          return `The field \"${key}\" must be an object.`;\n\n        // Check if the schema value has the correct properties\n        if (value.properties && Object.keys(value.properties).length > 0) {\n          const result = await this.validateBase<'properties'>(\n            data[key] as Record<string, unknown>,\n            value.properties as ISchema,\n            true\n          );\n          if (result) return result;\n        }\n      }\n\n      // Array validation\n      if (value.type === 'array') {\n        // TODO: Check this works\n        // Check if the schema value is an array\n        if (!Array.isArray(data[key]))\n          return `The field \"${key}\" must be an array.`;\n\n        // TODO: Check if the schema value has the correct items\n        /* if (value.items) {\n          for (const item of data[key] as unknown[]) {\n            if (typeof item !== value.items.type)\n              return `The field \"${key}\" must be an array of ${value.items.type}.`;\n            if (!value.items.options.includes(item))\n              return `The field \"${key}\" must be an array of valid options.`;\n          }\n        } */\n      }\n\n      // Image validation\n      if (value.type === 'image') {\n        // TODO: Check this works\n        // Check if the schema value is a string\n        if (typeof data[key] !== 'string')\n          return `The field \"${key}\" must be a string.`;\n\n        // Check if the schema value is a valid image\n        if (!validateImage(data[key] as string))\n          return `The field \"${key}\" must be a valid image.`;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Run the validation function, and if the response object is provided, send a response if the validation fails.\n   * @param data The object data to validate.\n   * @param options The options to use when validating.\n   * @param options.res The response object.\n   * @returns A JSON response meaning it's invalid, or null if it's valid.\n   */\n  public async validate(\n    data: Record<string, unknown>,\n    options?: { res?: Response }\n  ): Promise<Response | null | string> {\n    const result = await this.validateBase(data, this.schema);\n    if (typeof result !== 'string') return null;\n    if (options?.res)\n      return options.res.status(400).json({ status: 400, message: result });\n    return result;\n  }\n\n  /**\n   * Export the schema as a JSON object.\n   * @returns The exported schema as a JSON object.\n   */\n  public export(): ExportedSchema {\n    const exportSchema: Record<string, ExportedValue<ExportedSchema>> = {};\n\n    Object.entries(this.schema).forEach(([key, value]) => {\n      const exportedValue = value.export() as ExportedValue<ExportedSchema>;\n      exportSchema[key] = exportedValue;\n    });\n\n    return exportSchema;\n  }\n}\n"]}