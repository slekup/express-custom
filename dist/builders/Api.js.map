{"version":3,"file":"Api.js","sourceRoot":"","sources":["../../src/builders/Api.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AAEpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAGxB,OAAO,kBAAkB,MAAM,2BAA2B,CAAC;AAC3D,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAErC,OAAO,MAAM,MAAM,UAAU,CAAC;AAI9B;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,GAAI,SAAQ,OAAc;IACrC,IAAI,CAAS;IACb,QAAQ,CAAY;IACpB,MAAM,CAAU;IAChB,GAAG,CAAS;IACZ,UAAU,CAAc;IACxB,MAAM,CAAU;IAExB;;;;;;OAMG;IACH,YAAmB,OAIlB;QACC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,0BAA0B;QAC1B,MAAM,iBAAiB,GAAG,IAAI,MAAM,EAAE;aACnC,SAAS,CAAC;YACT,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE,IAAI;YACd,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,GAAG;SACT,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI;YACd,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,KAAK;SACX,CAAC,CAAC;QAEL,+CAA+C;QAC/C,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAClD,IAAI,OAAO,MAAM,KAAK,QAAQ;gBAC5B,MAAM,IAAI,kBAAkB,CAAC,QAAQ,MAAM,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,mCAAmC;QACnC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACI,UAAU,CAAC,OAAgB;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QACvC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAY;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,QAA+C;QAC1D,uEAAuE;QACvE,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,uDAAuD;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAC5B,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,cAAc,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,SAAS,EAAE;YACvD,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACxC,OAAO,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE;gBACvC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE;aAChD,CAAC,CAAC;SACJ,CAAC,CACH,CAAC;QAEF,4CAA4C;QAC5C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAE3C,wBAAwB;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAEpD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,UAAU;QACtB,IAAI,MAAM,GAAoB,EAAE,CAAC;QAEjC,mCAAmC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAEnE,IAAI;YACF,wBAAwB;YACxB,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAEnE,IAAI;gBACF,iBAAiB;gBACjB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAoB,CAAC;aAC/D;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,mDAAmD,CAChE,CAAC;gBACF,MAAM,IAAI,kBAAkB,CAAC,KAAe,CAAC,CAAC;aAC/C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,mDAAmD;YACnD,MAAM,CAAC,IAAI,CACT,GAAG,GAAG,CAAC,OAAO,oDAAoD,CACnE,CAAC;YAEF,IAAI;gBACF,8BAA8B;gBAC9B,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,CACzC,CAAC;gBAEF,IAAI;oBACF,qDAAqD;oBACrD,MAAM,UAAU,GACd,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAGlC,CAAC,gBAAgB,CAAC,CAAC;oBAEpB,+DAA+D;oBAC/D,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;wBAClC,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,kFAAkF,CAC/F,CAAC;wBACF,MAAM,IAAI,kBAAkB,CAAC,cAAc,CAAC,CAAC;qBAC9C;oBAED,gDAAgD;oBAChD,MAAM,GAAG,UAAU,CAAC;iBACrB;gBAAC,OAAO,KAAK,EAAE;oBACd,8DAA8D;oBAC9D,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,kFAAkF,CAC/F,CAAC;oBACF,MAAM,IAAI,kBAAkB,CAAC,KAAe,CAAC,CAAC;iBAC/C;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,yDAAyD;gBACzD,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,yDAAyD,CACtE,CAAC;gBACF,MAAM,IAAI,kBAAkB,CAAC,KAAe,CAAC,CAAC;aAC/C;SACF;QAED,iEAAiE;QACjE,MAAM,YAAY,GAAG,aAAa,CAAC;QAEnC,4BAA4B;QAC5B,MAAM,YAAY,GAAG,IAAI,MAAM,EAAE;aAC9B,SAAS,CAAC;YACT,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI;YACd,GAAG,EAAE,GAAG;YACR,MAAM,EAAE;gBACN;oBACE,CAAC,KAAK,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;oBACnC,gEAAgE;iBACjE;aACF;SACF,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,QAAQ;YACd,GAAG,EAAE,GAAG;YACR,YAAY,EAAE,MAAM;SACrB,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,MAAM;YACZ,YAAY,EAAE,QAAQ;SACvB,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,aAAa;YACnB,YAAY,EAAE,0BAA0B;SACzC,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,MAAM;YACZ,YAAY,EAAE,WAAW;SAC1B,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,WAAW;YACjB,GAAG,EAAE,GAAG;SACT,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,OAAO;YACb,YAAY,EAAE,SAAS;SACxB,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,WAAW;YACjB,YAAY,EAAE,QAAQ;SACvB,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,SAAS;YACf,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE;gBACV,OAAO,EAAE;oBACP,IAAI,EAAE,QAAQ;iBACf;gBACD,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;iBACf;gBACD,SAAS,EAAE;oBACT,IAAI,EAAE,QAAQ;iBACf;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;iBACf;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;iBACf;gBACD,OAAO,EAAE;oBACP,IAAI,EAAE,QAAQ;iBACf;gBACD,OAAO,EAAE;oBACP,IAAI,EAAE,QAAQ;iBACf;gBACD,KAAK,EAAE;oBACL,IAAI,EAAE,QAAQ;iBACf;aACF;SACF,CAAC,CAAC;QAEL,sCAAsC;QACtC,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEnD,wFAAwF;QACxF,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,MAAM,CAAC,KAAK,CACV,GAAG,GAAG,CAAC,KAAK,wDAAwD,CACrE,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,WAAW,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,8DAA8D;QAC9D,MAAM,eAAe,GAAG,MAAgB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC;QAE9B,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,SAAS;QACpB,8CAA8C;QAC9C,IAAI,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC,MAAM,CAAC;QACpC,4CAA4C;QAC5C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QACvC,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,QAAQ;QACd,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;YACxD,MAAM,IAAI,kBAAkB,CAAC,2CAA2C,CAAC,CAAC;QAE5E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,MAAM;QACjB,kBAAkB;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QAEtC,OAAO;YACL,GAAG,MAAM;YACT,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YAClE,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YAC1D,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;SACnD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import fs from 'fs';\nimport { Server } from 'http';\nimport path from 'path';\n\nimport { Config, ExportedApi } from '@typings/exports';\nimport ExpressCustomError from '@utils/ExpressCustomError';\nimport { errorMiddleware } from '@utils/middleware';\nimport logger, { cli } from '../bin/utils/logger';\nimport BaseApp from './Base/BaseApp';\nimport Group from './Group';\nimport Schema from './Schema';\nimport Structure from './Structure';\nimport Version from './Version';\n\n/**\n * The ApiBuilder class, used to build an API.\n */\nexport default class Api extends BaseApp<'app'> {\n  private port: number;\n  private versions: Version[];\n  private groups: Group[];\n  private url: string;\n  private structures: Structure[];\n  private config?: Config;\n\n  /**\n   * Creates a new instance of the ApiBuilder class.\n   * @param options The ApiBuilder class options.\n   * @param options.url The Base URL of the API to as the root (reference) for the API.\n   * @param options.port The port the API will listen on when running the start() method.\n   * @param options.structures The structures used in the API endpoint schemas.\n   */\n  public constructor(options: {\n    url: string;\n    port: number;\n    structures?: Structure[];\n  }) {\n    super('app');\n\n    // The constructor schema.\n    const constructorSchema = new Schema()\n      .addString({\n        name: 'url',\n        required: true,\n        min: 1,\n        max: 100,\n      })\n      .addNumber({\n        name: 'port',\n        required: true,\n        min: 0,\n        max: 65536,\n      });\n\n    // Validate the constructor against the schema.\n    constructorSchema.validate(options).then((result) => {\n      if (typeof result === 'string')\n        throw new ExpressCustomError(`Api: ${result}`);\n    });\n\n    // Assign the options to the class.\n    this.versions = [];\n    this.groups = [];\n    this.url = options.url;\n    this.port = options.port;\n    this.structures = options.structures ?? [];\n  }\n\n  /**\n   * Adds a version to the API.\n   * @param version An instance of the Version class.\n   * @returns The current Api instance.\n   */\n  public addVersion(version: Version): this {\n    this.versions.push(version);\n    const versionValues = version.values();\n    this.raw.use(versionValues.path, versionValues.raw);\n    return this;\n  }\n\n  /**\n   * Adds a group directly to the API without a version.\n   * @param group An instance of the Group class.\n   * @returns The current Api instance.\n   */\n  public addGroup(group: Group): this {\n    this.groups.push(group);\n    const groupValues = group.values();\n    this.raw.use(groupValues.path, groupValues.raw);\n    return this;\n  }\n\n  /**\n   * Starts the API server.\n   * @param callback The callback function to run when the API is initialized. Can be async.\n   * @returns The HTTP server (http.Server).\n   */\n  public start(callback?: (() => void) | (() => Promise<void>)): Server {\n    // Validate the API and all of its children before starting the server.\n    this.validate();\n\n    // Set the root route to display basic API information.\n    this.raw.get('/', (__, res) =>\n      res.json({\n        message: `Welcome to ${this.config?.name ?? 'the API'}`,\n        versions: this.versions.map((version) => ({\n          version: `v${version.values().version}`,\n          url: `${this.url}/v${version.values().version}`,\n        })),\n      })\n    );\n\n    // Set the 404 and error handler middleware.\n    this.raw.use(errorMiddleware.notFound);\n    this.raw.use(errorMiddleware.errorHandler);\n\n    // Start the API server.\n    const server = this.raw.listen(this.port, callback);\n\n    return server;\n  }\n\n  /**\n   * Loads the configuration of the API from express-custom.json or package.json > \"express-custom\".\n   * @returns The configuration of the API.\n   */\n  private async loadConfig(): Promise<Readonly<Config>> {\n    let config: Partial<Config> = {};\n\n    // Get the path to the config file.\n    const configPath = path.join(process.cwd(), 'express-custom.json');\n\n    try {\n      // Read the config file.\n      const configFile = await fs.promises.readFile(configPath, 'utf-8');\n\n      try {\n        // Parse the JSON\n        config = JSON.parse(configFile.toString()) as Partial<Config>;\n      } catch (error) {\n        logger.error(\n          `${cli.error} Failed to parse config.json file (invalid JSON).`\n        );\n        throw new ExpressCustomError(error as string);\n      }\n    } catch (error) {\n      // Log an warning if the config file doesn't exist.\n      logger.warn(\n        `${cli.warning} No express-custom.json found, trying package.json`\n      );\n\n      try {\n        // Read the package.json file.\n        const packageJSON = await fs.promises.readFile(\n          path.join(process.cwd(), 'package.json')\n        );\n\n        try {\n          // Parse the JSON and get the \"express-custom\" block.\n          const configFile = (\n            JSON.parse(packageJSON.toString()) as {\n              'express-custom'?: Partial<Config>;\n            }\n          )['express-custom'];\n\n          // Check if the \"express-custom\" block exists and is an object.\n          if (typeof configFile !== 'object') {\n            logger.error(\n              `${cli.error} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n            );\n            throw new ExpressCustomError('Invalid JSON');\n          }\n\n          // Set the config to the \"express-custom\" block.\n          config = configFile;\n        } catch (error) {\n          // Throw an error if the \"express-custom\" block doesn't exist.\n          logger.error(\n            `${cli.error} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n          );\n          throw new ExpressCustomError(error as string);\n        }\n      } catch (error) {\n        // Throw an error if the package.json file doesn't exist.\n        logger.error(\n          `${cli.error} Failed to load express-custom config from package.json`\n        );\n        throw new ExpressCustomError(error as string);\n      }\n    }\n\n    // Regex to check if the file is a JavaScript or TypeScript file.\n    const fileExtRegex = /\\.ts$|\\.js$/;\n\n    // Create the config schema.\n    const configSchema = new Schema()\n      .addString({\n        name: 'file',\n        required: true,\n        max: 256,\n        checks: [\n          [\n            (value) => fileExtRegex.test(value),\n            'The file must be a JavaScript or TypeScript file (.js or .ts).',\n          ],\n        ],\n      })\n      .addString({\n        name: 'output',\n        max: 256,\n        defaultValue: 'docs',\n      })\n      .addString({\n        name: 'name',\n        defaultValue: 'My API',\n      })\n      .addString({\n        name: 'description',\n        defaultValue: 'Made with Express Custom',\n      })\n      .addString({\n        name: 'logo',\n        defaultValue: '/logo.png',\n      })\n      .addString({\n        name: 'customDir',\n        max: 256,\n      })\n      .addString({\n        name: 'theme',\n        defaultValue: 'default',\n      })\n      .addString({\n        name: 'codeTheme',\n        defaultValue: 'framer',\n      })\n      .addObject({\n        name: 'socials',\n        defaultValue: {},\n        properties: {\n          discord: {\n            type: 'string',\n          },\n          github: {\n            type: 'string',\n          },\n          instagram: {\n            type: 'string',\n          },\n          facebook: {\n            type: 'string',\n          },\n          linkedin: {\n            type: 'string',\n          },\n          youtube: {\n            type: 'string',\n          },\n          twitter: {\n            type: 'string',\n          },\n          email: {\n            type: 'string',\n          },\n        },\n      });\n\n    // Test the config against the schema.\n    const result = await configSchema.validate(config);\n\n    // If the result is a string, the config is invalid, log the error and exit the process.\n    if (typeof result === 'string') {\n      logger.error(\n        `${cli.error} Validation error while processing express-config.json`\n      );\n      logger.error(`${cli.error} Error: ${result}`);\n      process.exit(1);\n    }\n\n    // Get the validated config and assign it to the API instance.\n    const validatedConfig = config as Config;\n    this.config = validatedConfig;\n\n    return validatedConfig;\n  }\n\n  /**\n   * Gets the configuration of the API.\n   * @returns The configuration of the API.\n   */\n  public async getConfig(): Promise<Readonly<Config>> {\n    // If the config is already loaded, return it.\n    if (this.config) return this.config;\n    // Otherwise, load the config and return it.\n    const config = await this.loadConfig();\n    return config;\n  }\n\n  /**\n   * Validates the API instance and all of it's children instances.\n   * @throws An error if the API instance or any of it's children instances are invalid.\n   */\n  private validate(): void {\n    if (this.versions.length === 0 && this.groups.length === 0)\n      throw new ExpressCustomError('No versions or groups provided to the API');\n\n    this.versions.forEach((version) => version.validate());\n    this.groups.forEach((group) => group.validate());\n  }\n\n  /**\n   * Exports the Api class properties to a JSON object.\n   * @returns The exported API as a JSON object.\n   */\n  public async export(): Promise<Readonly<ExportedApi>> {\n    // Get the config.\n    const config = await this.getConfig();\n\n    return {\n      ...config,\n      url: this.url,\n      port: this.port,\n      structures: this.structures.map((structure) => structure.export()),\n      rateLimit: this.ratelimit,\n      versions: this.versions.map((version) => version.export()),\n      groups: this.groups.map((group) => group.export()),\n    };\n  }\n}\n"]}