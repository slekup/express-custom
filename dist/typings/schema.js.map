{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/typings/schema.ts"],"names":[],"mappings":"","sourcesContent":["export type StringTest =\n  | 'email'\n  | 'username'\n  | 'passwordStrength'\n  | 'phoneNumber'\n  | 'ipAddress'\n  | 'url'\n  | 'path';\n\nexport type SchemaOption = string | number | boolean | null | undefined;\n\nexport type SchemaTypes =\n  | string\n  | number\n  | boolean\n  | unknown[]\n  | object\n  | null\n  | undefined\n  | unknown;\n\nexport type ValueTypes =\n  | 'string'\n  | 'number'\n  | 'integer'\n  | 'boolean'\n  | 'object'\n  | 'array'\n  | 'image';\n\nexport type ValueCheck = [\n  ((value: string) => boolean) | ((value: string) => Promise<boolean>),\n  string\n];\n\nexport type StructureType = `{${string}}` | `[${string}]`;\n\nexport interface BaseValueSchema {\n  description?: string;\n  required?: boolean;\n  structure?: string;\n  defaultValue?: SchemaTypes;\n  options?: SchemaOption[];\n  checks?: ValueCheck[];\n  type?: ValueTypes;\n}\n\nexport interface ArrayContains {\n  type: ValueTypes;\n  min?: number;\n  max?: number;\n}\n\nexport interface ArrayValue<T> extends BaseValueSchema {\n  type: 'array';\n  min?: number;\n  max?: number;\n  unique?: boolean;\n  contains?: ArrayContains;\n  items?: T | T[];\n}\n\nexport interface BooleanValue extends BaseValueSchema {\n  type: 'boolean';\n}\n\nexport interface ImageValue extends BaseValueSchema {\n  type: 'image';\n}\n\nexport interface NumberValue extends BaseValueSchema {\n  type: 'number';\n  min?: number;\n  max?: number;\n}\n\nexport interface IntegerValue extends BaseValueSchema {\n  type: 'integer';\n  min?: number;\n  max?: number;\n}\n\nexport interface ObjectValue<T> extends BaseValueSchema {\n  type: 'object';\n  properties?: T | unknown;\n}\n\nexport interface StringValue extends BaseValueSchema {\n  type: 'string';\n  min?: number;\n  max?: number;\n  options?: string[];\n  test?: StringTest;\n}\n\nexport type ValueSchema =\n  | ArrayValue<ValueSchema>\n  | BooleanValue\n  | ImageValue\n  | NumberValue\n  | IntegerValue\n  | ObjectValue<Record<string, ValueSchema>>\n  | StringValue;\n\nexport type Schema = Record<string, ValueSchema>;\n"]}