{"version":3,"sources":["../src/index.ts","../src/builders/Api.ts","../src/utils/PackageError.ts","../src/utils/logger.ts","../src/utils/validate.ts","../src/utils/middleware/error.middleware.ts","../src/utils/middleware/wrapper.middleware.ts","../src/bin/utils/logger.ts","../src/builders/Base/BaseApp.ts","../src/builders/Base/BaseValue.ts","../src/builders/Value/ArrayValue.ts","../src/builders/Value/BooleanValue.ts","../src/builders/Value/ImageValue.ts","../src/builders/Value/IntegerValue.ts","../src/builders/Value/NumberValue.ts","../src/builders/Value/ObjectValue.ts","../src/builders/Value/StringValue.ts","../src/builders/Schema.ts","../src/builders/Endpoint.ts","../src/builders/Group.ts","../src/builders/Route.ts","../src/builders/Structure.ts","../src/builders/Version.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport express from 'express';\n\ndotenv.config();\n\nexport { default as Api } from './builders/Api';\nexport { default as Endpoint } from './builders/Endpoint';\nexport { default as Group } from './builders/Group';\nexport { default as Route } from './builders/Route';\nexport { default as Schema } from './builders/Schema';\nexport { default as Structure } from './builders/Structure';\nexport { default as Version } from './builders/Version';\n\nexport { Config } from './typings/exports';\n\nexport default express;\n","import fs from 'fs';\nimport { Server } from 'http';\nimport path from 'path';\n\nimport { Config, ExportedApi } from '@typings/exports';\nimport PackageError from '@utils/PackageError';\nimport { errorMiddleware } from '@utils/middleware';\nimport logger, { cli } from '../bin/utils/logger';\nimport BaseApp from './Base/BaseApp';\nimport GroupBuilder from './Group';\nimport SchemaBuilder from './Schema';\nimport StructureBuilder from './Structure';\nimport VersionBuilder from './Version';\n\n/**\n * The ApiBuilder class is used to build the API.\n */\nexport default class Api extends BaseApp<'app'> {\n  private port: number;\n  private versions: VersionBuilder[];\n  private groups: GroupBuilder[];\n  private baseUrl: string;\n  private structures: StructureBuilder[];\n  private config?: Config;\n\n  /**\n   * The constructor of the ApiBuilder class.\n   * @param options The configuration of the API.\n   * @param options.url The base URL of the API.\n   * @param options.port The port of the API.\n   * @param options.structures The structures of the API.\n   */\n  public constructor(options: {\n    url: string;\n    port: number;\n    structures?: StructureBuilder[];\n  }) {\n    super('app');\n\n    const constructorSchema = new SchemaBuilder()\n      .addString({\n        name: 'url',\n        required: true,\n        min: 1,\n        max: 100,\n      })\n      .addNumber({\n        name: 'port',\n        required: true,\n        min: 0,\n        max: 65536,\n      });\n\n    constructorSchema.validate(options).then((result) => {\n      if (typeof result === 'string') throw new PackageError(result);\n    });\n\n    this.versions = [];\n    this.groups = [];\n    this.baseUrl = options.url;\n    this.port = options.port;\n    this.structures = options.structures ?? [];\n    this.config = undefined;\n  }\n\n  /**\n   * Adds a version to the API.\n   * @param version The version to add.\n   * @returns The API builder.\n   */\n  public addVersion(version: VersionBuilder): this {\n    this.versions.push(version);\n    const versionValues = version.values();\n    this.raw.use(versionValues.path, versionValues.raw);\n    return this;\n  }\n\n  /**\n   * Adds a group directly to the API without a version.\n   * @param group An instance of the GroupBuilder class.\n   * @returns The API builder.\n   */\n  public addGroup(group: GroupBuilder): this {\n    this.groups.push(group);\n    const groupValues = group.values();\n    this.raw.use(groupValues.path, groupValues.raw);\n    return this;\n  }\n\n  /**\n   * Initializes the API.\n   * @param callback The callback to run when the API is initialized.\n   * @returns The server.\n   */\n  public start(callback?: (() => void) | (() => Promise<void>)): Server {\n    this.validate();\n\n    this.raw.get('/', (__, res) =>\n      res.json({\n        message: `Welcome to ${this.config?.name ?? 'the API'}`,\n        versions: this.versions.map((version) => ({\n          version: `v${version.values().version}`,\n          url: `${this.baseUrl}/v${version.values().version}`,\n        })),\n      })\n    );\n\n    this.raw.use(errorMiddleware.notFound);\n    this.raw.use(errorMiddleware.errorHandler);\n\n    const server = this.raw.listen(this.port, callback);\n\n    return server;\n  }\n\n  /**\n   * Loads the configuration of the API.\n   * @returns The configuration of the API.\n   */\n  private async loadConfig(): Promise<Readonly<Config>> {\n    let config: Partial<Config> = {};\n    const configPath = path.join(process.cwd(), 'express-custom.json');\n\n    try {\n      const configFile = await fs.promises.readFile(configPath, 'utf-8');\n      try {\n        config = JSON.parse(configFile.toString()) as Partial<Config>;\n      } catch (error) {\n        logger.error(\n          `${cli.err} Failed to parse config.json file (invalid JSON).`\n        );\n        throw new PackageError(error as string);\n      }\n    } catch (error) {\n      logger.error(\n        `${cli.err} No express-custom.json found, trying package.json`\n      );\n\n      try {\n        // Read package.json\n        const packageJSON = await fs.promises.readFile(\n          path.join(process.cwd(), 'package.json')\n        );\n\n        // Parse the JSON\n        try {\n          const configFile = (\n            JSON.parse(packageJSON.toString()) as {\n              'express-custom'?: Partial<Config>;\n            }\n          )['express-custom'];\n\n          if (typeof configFile !== 'object') {\n            logger.error(\n              `${cli.err} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n            );\n            throw new PackageError('Invalid JSON');\n          }\n\n          config = configFile;\n        } catch (error) {\n          logger.error(\n            `${cli.err} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n          );\n          throw new PackageError(error as string);\n        }\n      } catch (error) {\n        // Failed to read package.json\n        logger.error(\n          `${cli.err} Failed to load express-custom config from package.json`\n        );\n        throw new PackageError(error as string);\n      }\n    }\n\n    const fileExtRegex = /\\.ts$|\\.js$/;\n\n    const configSchema = new SchemaBuilder()\n      .addString({\n        name: 'file',\n        required: true,\n        max: 256,\n        checks: [\n          [\n            (value) => fileExtRegex.test(value),\n            'The file must be a JavaScript or TypeScript file (.js or .ts).',\n          ],\n        ],\n      })\n      .addString({\n        name: 'output',\n        max: 256,\n        defaultValue: 'docs',\n      })\n      .addString({\n        name: 'name',\n        defaultValue: 'My API',\n      })\n      .addString({\n        name: 'description',\n        defaultValue: 'Made with Express Custom',\n      })\n      .addString({\n        name: 'logo',\n        defaultValue: '/logo.png',\n      })\n      .addString({\n        name: 'customDir',\n        max: 256,\n      })\n      .addString({\n        name: 'theme',\n        defaultValue: 'default',\n      })\n      .addString({\n        name: 'codeTheme',\n        defaultValue: 'framer',\n      })\n      .addObject({\n        name: 'socials',\n        defaultValue: {},\n        properties: {\n          discord: {\n            type: 'string',\n          },\n          github: {\n            type: 'string',\n          },\n          instagram: {\n            type: 'string',\n          },\n          facebook: {\n            type: 'string',\n          },\n          linkedin: {\n            type: 'string',\n          },\n          youtube: {\n            type: 'string',\n          },\n          twitter: {\n            type: 'string',\n          },\n          email: {\n            type: 'string',\n          },\n        },\n      });\n\n    const result = await configSchema.validate(config);\n\n    if (typeof result === 'string') {\n      logger.error(\n        `${cli.err} Validation error while processing express-config.json`\n      );\n      logger.error(`${cli.err} Error: ${result}`);\n      process.exit(1);\n    }\n\n    const validatedConfig = config as Config;\n\n    this.config = validatedConfig;\n\n    return validatedConfig;\n  }\n\n  /**\n   * Gets the configuration of the API.\n   * @returns The configuration of the API.\n   */\n  public async getConfig(): Promise<Readonly<Config>> {\n    if (this.config) return this.config;\n    const config = await this.loadConfig();\n    return config;\n  }\n\n  /**\n   * Validates the API instance.\n   */\n  private validate(): void {\n    if (this.versions.length === 0 && this.groups.length === 0)\n      throw new PackageError('No versions or groups provided to the API');\n\n    this.versions.forEach((version) => version.validate());\n    this.groups.forEach((group) => group.validate());\n  }\n\n  /**\n   * Adds a group to the API.\n   * @returns The API data.\n   */\n  public async export(): Promise<Readonly<ExportedApi>> {\n    if (!this.baseUrl)\n      throw new PackageError('The base URL of the API is not set.');\n    if (!this.port) throw new PackageError('The port of the API is not set.');\n\n    const config = await this.loadConfig();\n\n    return {\n      ...config,\n      baseUrl: this.baseUrl,\n      port: this.port,\n      structures: this.structures.map((structure) => structure.export()),\n      rateLimit: this.ratelimit,\n      versions: this.versions.map((version) => version.export()),\n      groups: this.groups.map((group) => group.export()),\n    };\n  }\n}\n","/**\n * PackageError class.\n */\nexport default class PackageError extends Error {\n  /**\n   * The constructor of the PackageError class.\n   * @param message The message of the error.\n   */\n  public constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, PackageError.prototype);\n    this.name = 'PackageError';\n    this.stack = '';\n  }\n}\n","import colors from 'colors';\nimport { TransformableInfo } from 'logform';\nimport * as winston from 'winston';\n\n/**\n * Returns a color based on the log level.\n * @param level The log level.\n * @returns The colored log level.\n */\nconst levelColor = (level: string): string => {\n  switch (level) {\n    case 'error': {\n      return colors.red(level.toUpperCase());\n    }\n    case 'warn': {\n      return colors.yellow(level.toUpperCase());\n    }\n    case 'info': {\n      return colors.green(level.toUpperCase());\n    }\n    case 'debug': {\n      return colors.blue(level.toUpperCase());\n    }\n    case 'trace': {\n      return colors.magenta(level.toUpperCase());\n    }\n    default: {\n      return colors.white(level.toUpperCase());\n    }\n  }\n};\n\n/**\n * The format for the console transport.\n */\nconst consoleFormat = winston.format.combine(\n  // winston.format.prettyPrint(),\n  winston.format.colorize(),\n  winston.format.ms(),\n  winston.format.errors({ stack: true }),\n  // winston.format.splat(),\n  // winston.format.json(),\n  winston.format.printf(({ ms, level, message, stack }: TransformableInfo) => {\n    let msg = message as string;\n\n    // Append the stack trace to the message if it is present\n    if (stack) msg += `\\n${stack as string}`;\n\n    /* eslint-disable no-control-regex */\n    const ANSI_REGEX = /\\u001b\\[[0-9]{1,2}m/gi;\n\n    return `[${colors.gray('express-custom')}] ${colors.cyan(\n      ms as string\n    )} [${levelColor(level.replace(ANSI_REGEX, ''))}]: ${msg}`;\n  })\n);\n\n/**\n * The logger instance - console transports only.\n */\nconst logger = winston.createLogger({\n  level: 'debug',\n  format: consoleFormat,\n  transports: [\n    // Console transport\n    new winston.transports.Console({\n      level: 'info',\n    }),\n  ],\n});\n\nexport default logger;\n","/**\n * Validate a cron expression.\n * @param expression The cron expression to validate.\n * @returns Whether the cron expression is valid.\n */\nexport const validateCronExpression = (expression: string): boolean => {\n  const cronExpressionRegex =\n    /^(\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2})$/;\n  return cronExpressionRegex.test(expression);\n};\n\n/**\n * Convert a time to cron time.\n * @param time The time to convert to cron time.\n * @returns The converted time.\n */\nexport const timeToCronExpression = (time: string): string | null => {\n  const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d)$/; // Regular expression to validate HH:MM format\n\n  // Check if the time matches the HH:MM format\n  if (timeRegex.test(time)) {\n    const [hours, minutes] = time.split(':'); // Split the time into hours and minutes\n\n    if (!hours || !minutes) return null; // Return null if the time is invalid\n\n    // Format hours and minutes for cron time\n    const cronHours = hours === '00' ? '0' : hours.replace(/^0+/, ''); // Remove leading zeros, except for '00'\n    const cronMinutes = minutes.replace(/^0+/, ''); // Remove leading zeros\n\n    return `${cronMinutes} ${cronHours} * * *`; // Return the cron time format\n  }\n\n  return null; // Return null if the time is invalid\n};\n\n/**\n * Validate a time.\n * @param time The time to validate.\n * @returns Whether the time is valid.\n */\nexport const validateTime = (time: string): boolean => {\n  const timeRegex = /^(?:[01]\\d|2[0-3]):(?:00|30)$/; // Regular expression to validate HH:MM format\n  return timeRegex.test(time);\n};\n\n/**\n * Tests if a string is empty.\n * @param str The string to test.\n * @returns True if the string is empty, false otherwise.\n */\nexport const validateEmail = (str: string): boolean => {\n  // /^\\S+@\\S+\\.\\S+$/\n  // /\\S+@\\S+\\.\\S+/\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(str);\n};\n\n/**\n * Tests if a username is valid.\n * @param str The username to test.\n * @returns True if the username is valid, false otherwise.\n */\nexport const validateUsername = (str: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_]{3,16}$/;\n  return usernameRegex.test(str);\n};\n\n/**\n * Tests if a password is valid.\n * @param str The password to test.\n * @returns True if the password is valid, false otherwise.\n */\nexport const valiedatePassword = (str: string): boolean => {\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  return passwordRegex.test(str);\n};\n\n/**\n * Tests if a phone number is valid.\n * @param str The phone number to test.\n * @returns True if the phone number is valid, false otherwise.\n */\nexport const validatePhoneNumber = (str: string): boolean => {\n  const phoneNumberRegex = /^\\d{10}$/;\n  return phoneNumberRegex.test(str);\n};\n\n/**\n * Tests if a ipv4 address is valid.\n * @param str The IPv4 address to test.\n * @returns True if the IPv4 address is valid, false otherwise.\n */\nexport const validateIpv4Address = (str: string): boolean => {\n  // ^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$ - https://stackoverflow.com/questions/5284147/validating-ipv4-addresses-with-regexp\n  const ipv4AddressRegex =\n    /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/;\n  return ipv4AddressRegex.test(str);\n};\n\n/**\n * Tests if a color is valid.\n * @param color The color string to test.\n * @returns True if the color is valid, false otherwise.\n */\nexport const validateColor = (color: string): boolean => {\n  // Remove any whitespace from the input\n  const cleanedColor = color.replace(/\\s/g, '');\n\n  // Check if the input matches a valid hex color pattern\n  if (/^#?[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/.test(cleanedColor)) {\n    // If it does, add a '#' if it's missing and return the cleanedColor\n    return cleanedColor.startsWith('#');\n  }\n\n  return false;\n};\n\n/**\n * Tests if a url is valid.\n * @param url The url to test.\n * @returns True if the url is valid, false otherwise.\n */\nexport const validateUrl = (url: string): boolean => {\n  // Check if the url is valid\n  try {\n    const urlObject = new URL(url);\n    return urlObject.href === url; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * Tests if a path is valid.\n * @param path The path to test.\n * @returns True if the path is valid, false otherwise.\n */\nexport const validatePath = (path: string): boolean => {\n  const pathRegex = /^\\/(?:[a-zA-Z0-9_]+\\/)?[a-zA-Z0-9_]*$/;\n  return pathRegex.test(path);\n};\n\n/**\n * Tests if an image is valid.\n * @param image The image to test.\n * @returns True if the image is valid, false otherwise.\n */\nexport const validateImage = (image: string): boolean => {\n  // Check if the image is valid\n  try {\n    const imageObject = new URL(image);\n    return imageObject.href === image; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n","import { NextFunction, Request, Response } from 'express';\n\nimport { logger } from '..';\n\n/**\n * Middleware to handle 404 errors.\n * @param __ The response object.\n * @param res The response object.\n * @param next The next function.\n */\nfunction notFound(__: Request, res: Response, next: NextFunction): void {\n  res.status(404).json({\n    status: 404,\n    message: 'The server cannot find the requested resource',\n  });\n  next();\n}\n\ninterface HttpError extends Error {\n  status: number;\n  field?: string;\n}\n\n/**\n * Middleware to handle errors.\n * @param err The error object.\n * @param __ The request object.\n * @param res The response object.\n */\nfunction errorHandler(err: HttpError, __: Request, res: Response): void {\n  logger.error(err.message);\n\n  res.status(500).json({\n    status: 500,\n    message: 'Internal Server Error',\n    // stack: err.stack,\n    field: err.field,\n  });\n}\n\nexport default {\n  notFound,\n  errorHandler,\n};\n","import { NextFunction, Request, Response } from 'express';\nimport { ClientSession, startSession } from 'mongoose';\n\nimport { logger } from '@utils/index';\n\ntype ControllerType = (\n  req: Request,\n  res: Response,\n  session: ClientSession\n) => Promise<unknown> | unknown;\n\n/**\n * Handles a function.\n * @param controller The handler function.\n * @param req The request.\n * @param res The response.\n * @param next The next function.\n */\nconst handledFunction = async (\n  controller: ControllerType,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const session = await startSession();\n\n  try {\n    session.startTransaction();\n    await controller(req, res, session);\n    await session.commitTransaction();\n    next();\n  } catch (error) {\n    await session.abortTransaction();\n    logger.error(error);\n    res.status(500).json({ error: 'Internal Server Error' });\n  } finally {\n    session.endSession();\n  }\n};\n\n/**\n * Wraps a handler function in error handling.\n * @param controller The handler function.\n * @returns The handler function wrapped in error handling.\n */\nexport const withErrorHandling =\n  (controller: ControllerType) =>\n  (req: Request, res: Response, next: NextFunction): void => {\n    handledFunction(controller, req, res, next);\n  };\n","import colors from 'colors';\nimport { TransformableInfo } from 'logform';\nimport * as winston from 'winston';\n\nexport const cli = {\n  inf: colors.blue('CLI'),\n  suc: colors.green('CLI'),\n  err: colors.red('CLI'),\n};\n\nexport const site = {\n  inf: colors.blue('SITE'),\n  suc: colors.green('SITE'),\n  err: colors.red('SITE'),\n};\n\n/**\n * The format for the console transport.\n */\nconst consoleFormat = winston.format.combine(\n  winston.format.colorize(),\n  winston.format.errors({ stack: true }),\n  winston.format.printf(({ message, stack }: TransformableInfo) => {\n    let msg = message as string;\n    // Append the stack trace to the message if it is present\n    if (stack) msg += `\\n${stack as string}`;\n    return msg;\n  })\n);\n\n/**\n * The logger instance - console transports only.\n */\nconst logger = winston.createLogger({\n  level: 'info',\n  format: consoleFormat,\n  transports: [\n    // Console transport\n    new winston.transports.Console({\n      level: 'info',\n    }),\n  ],\n});\n\nexport default logger;\n","import express, { Express, Router } from 'express';\nimport { Options, rateLimit } from 'express-rate-limit';\n\nimport { Middleware, RateLimit } from '@typings/core';\nimport PackageError from '@utils/PackageError';\n\n/**\n * The BaseApp class, used to build on top of an express app or router.\n */\nexport default class BaseApp<T extends 'router' | 'app'> {\n  public raw:\n    | (T extends 'app' ? Express : never)\n    | (T extends 'router' ? Router : never);\n  protected ratelimit?: Partial<RateLimit>;\n  protected middlewares: Middleware[];\n\n  /**\n   * Creates an instance of the BaseApp class.\n   * Pass 'app' to create an express app, and 'router' for an express router.\n   * @param type The type of the base app - 'app' or 'router'.\n   */\n  public constructor(type: T = 'router' as T) {\n    if (type === 'app') {\n      this.raw = express() as T extends 'app' ? Express : never;\n    } else {\n      this.raw = Router() as T extends 'router' ? Router : never;\n    }\n    this.middlewares = [];\n  }\n\n  /**\n   * Sets the rate limit for the base app or router.\n   * @param options The rate limit options provided by the express-rate-limit package.\n   * @returns The BaseApp class.\n   */\n  public setRateLimit(options: Partial<Options>): this {\n    if (this.ratelimit) throw new PackageError('Rate limit already set.');\n\n    this.ratelimit = {\n      statusCode: options.statusCode ?? 429,\n      ...(typeof options.windowMs === 'number'\n        ? { window: options.windowMs }\n        : {}),\n      ...(typeof options.max === 'number' ? { max: options.max } : {}),\n    };\n\n    // Use the express-rate-limit middleware.\n    this.raw.use(rateLimit(options));\n\n    return this;\n  }\n\n  /**\n   * Adds a middleware to the route. Add it before adding the route.\n   * @param middleware The middleware to add to the route.\n   * @returns The BaseApp class.\n   */\n  public addMiddleware(middleware: Middleware): this {\n    this.middlewares.push(middleware);\n    this.raw.use(middleware);\n    return this;\n  }\n}\n","import { BaseValueSchema, SchemaTypes, ValueCheck } from '@typings/schema';\n\nexport interface BaseValueOptions {\n  name: string;\n  description?: string;\n  required?: boolean;\n  checks?: ValueCheck[];\n  structure?: string;\n  defaultValue?: SchemaTypes;\n}\n\n/**\n * The BaseValue class. Used as a foundation for all value builders.\n */\nexport default class BaseValue implements BaseValueSchema {\n  public name: string;\n  public description?: string;\n  public required: boolean;\n  public checks: ValueCheck[];\n  public structure?: string;\n  public defaultValue?: SchemaTypes;\n\n  /**\n   * Creates a new instance of the BaseValue class.\n   * @param options The options of the value.\n   * @param options.name The name of the value.\n   * @param options.description The description of the value.\n   * @param options.required Whether the value is required.\n   * @param options.checks The checks of the value.\n   */\n  public constructor(options: BaseValueOptions) {\n    this.name = options.name;\n    this.description = options.description;\n    this.required = options.required ?? false; // Default to false\n    this.checks = options.checks ?? [];\n    this.structure = options.structure;\n    this.defaultValue = options.defaultValue;\n\n    this.validate();\n  }\n\n  /**\n   * Validates the value.\n   */\n  public validate(): void {\n    if (!this.name) throw new Error('Name is required');\n    if (typeof this.name !== 'string') throw new Error('Name must be a string');\n\n    if (this.description && typeof this.description !== 'string')\n      throw new Error('Description must be a string');\n\n    if (typeof this.required !== 'boolean')\n      throw new Error('Required must be a boolean');\n\n    if (!Array.isArray(this.checks)) throw new Error('Checks must be an array');\n\n    if (this.structure && typeof this.structure !== 'string')\n      throw new Error('Structure must be a string');\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { ArrayContains, ArrayValue, ValueSchema } from '@typings/schema';\n\nexport type ArrayValueOptions = BaseValueOptions & {\n  min?: number;\n  max?: number;\n  unique?: boolean;\n  contains?: ArrayContains;\n  items?: ValueSchema | ValueSchema[];\n};\n\n/**\n * The array value builder class.\n */\nexport default class ArrayValueBuilder\n  extends BaseValue\n  implements ArrayValue<ValueSchema>\n{\n  public type = 'array' as const;\n  public min?: number;\n  public max?: number;\n  public unique: boolean;\n  public contains?: ArrayContains;\n  public items?: ValueSchema | ValueSchema[];\n\n  /**\n   * Creates an instance of the array value builder class.\n   * @param options The options of the array value.\n   * @param options.min The minimum amount of items in the array value.\n   * @param options.max The maximum amount of items in the array value.\n   * @param options.unique Whether the array value is unique.\n   * @param options.contains The type that the array value needs to contain.\n   * @param options.items The items of the array value.\n   */\n  public constructor({\n    min,\n    max,\n    unique,\n    contains,\n    items,\n    ...options\n  }: ArrayValueOptions) {\n    super(options);\n    this.min = min;\n    this.max = max;\n    this.unique = unique ?? false;\n    this.contains = contains;\n    this.items = items;\n  }\n\n  /**\n   * Exports the array value.\n   * @returns The array value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n      max: this.max,\n      min: this.min,\n      unique: this.unique,\n    };\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { BooleanValue } from '@typings/schema';\n\nexport type BooleanValueOptions = BaseValueOptions;\n\n/**\n * The boolean value builder class.\n */\nexport default class BooleanValueBuilder\n  extends BaseValue\n  implements BooleanValue\n{\n  public type = 'boolean' as const;\n\n  /**\n   * Creates an instance of the boolean value builder class.\n   * @param options The options of the boolean value.\n   */\n  public constructor(options: BooleanValueOptions) {\n    super(options);\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { ImageValue } from '@typings/schema';\n\nexport type ImageValueOptions = BaseValueOptions;\n\n/**\n * The image value builder class.\n */\nexport default class ImageValueBuilder extends BaseValue implements ImageValue {\n  public type = 'image' as const;\n\n  /**\n   * Creates an instance of the image value builder class.\n   * @param options The options of the image value.\n   */\n  public constructor(options: ImageValueOptions) {\n    super(options);\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { IntegerValue } from '@typings/schema';\n\nexport type IntegerValueOptions = BaseValueOptions & {\n  min?: number;\n  max?: number;\n};\n\n/**\n * The integer value builder class.\n */\nexport default class IntegerValueBuilder\n  extends BaseValue\n  implements IntegerValue\n{\n  public type = 'integer' as const;\n  public min?: number;\n  public max?: number;\n\n  /**\n   * Creates an instance of the integer value builder class.\n   * @param options The options of the integer value.\n   */\n  public constructor(options: IntegerValueOptions) {\n    super(options);\n    this.min = options.min;\n    this.max = options.max;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { NumberValue } from '@typings/schema';\n\nexport type NumberValueOptions = BaseValueOptions & {\n  min?: number;\n  max?: number;\n};\n\n/**\n * The number value builder class.\n */\nexport default class NumberValueBuilder\n  extends BaseValue\n  implements NumberValue\n{\n  public type = 'number' as const;\n  public min?: number;\n  public max?: number;\n\n  /**\n   * Creates an instance of the number value builder class.\n   * @param options The options of the number value.\n   */\n  public constructor(options: NumberValueOptions) {\n    super(options);\n    this.min = options.min;\n    this.max = options.max;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { ObjectValue, Schema } from '@typings/schema';\n\nexport type ObjectValueOptions = BaseValueOptions & {\n  properties: Schema;\n};\n\n/**\n * The object value builder class.\n */\nexport default class ObjectValueBuilder<T>\n  extends BaseValue\n  implements ObjectValue<T>\n{\n  public type = 'object' as const;\n  public properties: Schema;\n\n  /**\n   * Creates an instance of the object value builder class.\n   * @param options The options of the object value builder class.\n   */\n  public constructor(options: ObjectValueOptions) {\n    super(options);\n    this.properties = {};\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValue, { BaseValueOptions } from '@builders/Base/BaseValue';\nimport { StringTest, StringValue } from '@typings/schema';\n\nexport type StringValueOptions = BaseValueOptions & {\n  min?: number;\n  max?: number;\n  options?: string[];\n  test?: StringTest;\n};\n\n/**\n * The string value builder class.\n */\nexport default class StringValueBuilder\n  extends BaseValue\n  implements StringValue\n{\n  public type = 'string' as const;\n  public min?: number;\n  public max?: number;\n  public options: string[];\n  public test?: StringTest;\n\n  /**\n   * Creates an instance of the string value builder class.\n   * @param options The options of the string value.\n   */\n  public constructor(options: StringValueOptions) {\n    super(options);\n    this.min = options.min;\n    this.max = options.max;\n    this.options = options.options ?? [];\n    this.test = options.test;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","//  Disable the no-param-reassign rule as it is needed to assign default values to undefined parameters.\n/* eslint-disable no-param-reassign */\n\nimport { Response } from 'express';\n\nimport { ExportedSchema, ExportedValue } from '@typings/exports';\nimport { Schema } from '@typings/schema';\nimport {\n  validateEmail,\n  validateImage,\n  validateIpv4Address,\n  validatePath,\n  validatePhoneNumber,\n  validateUrl,\n  validateUsername,\n  valiedatePassword,\n} from '@utils/validate';\nimport {\n  ArrayValue,\n  BooleanValue,\n  ImageValue,\n  IntegerValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n} from './Value';\nimport { ArrayValueOptions } from './Value/ArrayValue';\nimport { BooleanValueOptions } from './Value/BooleanValue';\nimport { ImageValueOptions } from './Value/ImageValue';\nimport { IntegerValueOptions } from './Value/IntegerValue';\nimport { NumberValueOptions } from './Value/NumberValue';\nimport { ObjectValueOptions } from './Value/ObjectValue';\nimport { StringValueOptions } from './Value/StringValue';\n\ntype ValueBuilders =\n  | ArrayValue\n  | StringValue\n  | NumberValue\n  | IntegerValue\n  | BooleanValue\n  | ObjectValue<ValueBuilders>\n  | ImageValue;\n\nexport type BuildersSchema = Record<string, ValueBuilders>;\n\n/**\n * The Schema Builder class.\n */\nexport default class SchemaBuilder {\n  public schema: BuildersSchema;\n\n  /**\n   * Creates a new schema.\n   */\n  public constructor() {\n    this.schema = {};\n  }\n\n  /**\n   * Adds a array value to the schema.\n   * @param options The options of the array value.\n   * @returns The schema builder.\n   */\n  public addArray(options: ArrayValueOptions): this {\n    const value = new ArrayValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a string value to the schema.\n   * @param options The options of the string value.\n   * @returns The schema builder.\n   */\n  public addString(options: StringValueOptions): this {\n    const value = new StringValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a number value to the schema.\n   * @param options The options of the number value.\n   * @returns The schema builder.\n   */\n  public addNumber(options: NumberValueOptions): this {\n    const value = new NumberValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a integer value to the schema.\n   * @param options The options of the integer value.\n   * @returns The schema builder.\n   */\n  public addInteger(options: IntegerValueOptions): this {\n    const value = new IntegerValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a boolean value to the schema.\n   * @param options The options of the boolean value.\n   * @returns The schema builder.\n   */\n  public addBoolean(options: BooleanValueOptions): this {\n    const value = new BooleanValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a object value to the schema.\n   * @param options The options of the object value.\n   * @returns The schema builder.\n   */\n  public addObject(options: ObjectValueOptions): this {\n    const value = new ObjectValue<ValueBuilders>(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a image value to the schema.\n   * @param options The options of the image value.\n   * @returns The schema builder.\n   */\n  public addImage(options: ImageValueOptions): this {\n    const value = new ImageValue(options);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Validate an object against a schema.\n   * @param data The object data to validate.\n   * @param schema The schema to validate against.\n   * @param properties Whether to validate the schema properties or not.\n   * @returns A string if the validation fails, false otherwise.\n   */\n  private async validateBase<T = 'schema'>(\n    data: Record<string, unknown>,\n    schema:\n      | (T extends 'schema' ? BuildersSchema : never)\n      | (T extends 'properties' ? Schema : never),\n    properties?: boolean\n  ): Promise<string | boolean> {\n    // Check if the data is an object\n    if (typeof data !== 'object') return 'The data provided must be an object.';\n\n    const schemaFields = properties\n      ? Object.entries(schema as Schema)\n      : Object.entries(schema as BuildersSchema);\n\n    for (const [key, value] of schemaFields) {\n      // Check if all required fields have been provided.\n      // If the field has a default value as the required value is not provided, set the field to the default value.\n      if (value.required) {\n        if (!data[key] && value.defaultValue) {\n          data[key] = value.defaultValue;\n          break;\n        } else if (!data[key]) {\n          return `The field \"${key}\" has not been provided.`;\n        }\n      }\n\n      // For non required fields, if the value is not provided, set the field to the default value if it exists.\n      if (!data[key] && value.defaultValue) {\n        data[key] = value.defaultValue;\n        return false;\n      } else if (!data[key]) {\n        return false;\n      }\n    }\n\n    // Check if all provided fields are the correct type\n    for (const [key, value] of schemaFields) {\n      if (typeof data[key] !== value.type)\n        return `The field \"${key}\" must be of type ${value.type}.`;\n    }\n\n    // Check if all provided fields are valid\n    for (const [key, value] of schemaFields) {\n      // Number validation\n      if (value.type === 'number') {\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          typeof data[key] === 'number' &&\n          ((data[key] as number) < value.min ||\n            (data[key] as number) > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n        // Check if the schema value is above the minimum required value\n        if (\n          value.min &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) < value.min\n        )\n          return `The field \"${key}\" must be at least ${value.min}.`;\n\n        // Check if the schema value is below the maximum required value\n        if (\n          value.max &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) > value.max\n        )\n          return `The field \"${key}\" must be less than ${value.max}.`;\n      }\n\n      // Integer validation\n      if (value.type === 'integer') {\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          typeof data[key] === 'number' &&\n          ((data[key] as number) < value.min ||\n            (data[key] as number) > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n        // Check if the schema value is above the minimum required value\n        if (\n          value.min &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) < value.min\n        )\n          return `The field \"${key}\" must be at least ${value.min}.`;\n\n        // Check if the schema value is below the maximum required value\n        if (\n          value.max &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) > value.max\n        )\n          return `The field \"${key}\" must be less than ${value.max}.`;\n\n        // Check if the schema value is an integer\n        if (\n          typeof data[key] !== 'number' ||\n          !Number.isInteger(data[key] as number)\n        )\n          return `The field \"${key}\" must be an integer.`;\n      }\n\n      // String validation\n      if (value.type === 'string') {\n        const req = value;\n        const testVal = data[key] as string;\n\n        // Check if the schema value is included in the schema options\n        if (value.options && !value.options.includes(data[key] as string))\n          return `The field \"${key}\" is not a valid option.`;\n\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          (testVal.length < value.min || testVal.length > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max} characters.`;\n\n        // Check if the schema value has the minimum required length\n        if (value.min && testVal.length < value.min)\n          return `The field \"${key}\" must be at least ${value.min} characters.`;\n\n        // Check if the schema value has the maximum required length\n        if (value.max && testVal.length > value.max)\n          return `The field \"${key}\" must be less than ${value.max} characters.`;\n\n        // Test if email is valid\n        if (req.test === 'email' && !validateEmail(testVal))\n          return `The field \"${key}\" must be a valid email address.`;\n\n        // Test if username is valid\n        if (req.test === 'username' && !validateUsername(testVal))\n          return `The field \"${key}\" must be a valid username.`;\n\n        // Test if password is valid\n        if (req.test === 'passwordStrength' && !valiedatePassword(testVal))\n          return `The field \"${key}\" is too weak to be a valid password.`;\n\n        // Test if phone number is valid\n        if (req.test === 'phoneNumber' && !validatePhoneNumber(testVal))\n          return `The field \"${key}\" must be a valid phone number.`;\n\n        // Test if IPv4 address is valid\n        if (req.test === 'ipAddress' && !validateIpv4Address(testVal))\n          return `The field \"${key}\" must be a valid IPv4 address.`;\n\n        // Test if a url is valid\n        if (req.test === 'url' && !validateUrl(testVal))\n          return `The field \"${key}\" must be a valid IPv4 address.`;\n\n        // Test if a path is valid\n        if (req.test === 'path' && !validatePath(testVal))\n          return `The field \"${key}\" must be a valid path.`;\n\n        // Test if the schema value is a string\n        if (typeof data[key] !== 'string')\n          return `The field \"${key}\" must be a string.`;\n      }\n\n      // Check if the schema value passes all checks\n      if (value.checks)\n        for (const check of value.checks) {\n          const passedCheck = await check[0](key);\n          if (!passedCheck) return `${check[1]}.`;\n        }\n\n      // Boolean validation\n      if (value.type === 'boolean') {\n        // TODO: Check this works\n        // Check if the schema value is a boolean\n        if (typeof data[key] !== 'boolean')\n          return `The field \"${key}\" must be a boolean.`;\n      }\n\n      // Object validation\n      if (value.type === 'object') {\n        // TODO: Check this works\n        // Check if the schema value is an object\n        if (typeof data[key] !== 'object')\n          return `The field \"${key}\" must be an object.`;\n\n        // Check if the schema value has the correct properties\n        if (value.properties && Object.keys(value.properties).length > 0) {\n          const result = await this.validateBase<'properties'>(\n            data[key] as Record<string, unknown>,\n            value.properties as Schema,\n            true\n          );\n          if (result) return result;\n        }\n      }\n\n      // Array validation\n      if (value.type === 'array') {\n        // TODO: Check this works\n        // Check if the schema value is an array\n        if (!Array.isArray(data[key]))\n          return `The field \"${key}\" must be an array.`;\n\n        // TODO: Check if the schema value has the correct items\n        /* if (value.items) {\n          for (const item of data[key] as unknown[]) {\n            if (typeof item !== value.items.type)\n              return `The field \"${key}\" must be an array of ${value.items.type}.`;\n            if (!value.items.options.includes(item))\n              return `The field \"${key}\" must be an array of valid options.`;\n          }\n        } */\n      }\n\n      // Image validation\n      if (value.type === 'image') {\n        // TODO: Check this works\n        // Check if the schema value is a string\n        if (typeof data[key] !== 'string')\n          return `The field \"${key}\" must be a string.`;\n\n        // Check if the schema value is a valid image\n        if (!validateImage(data[key] as string))\n          return `The field \"${key}\" must be a valid image.`;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Run the validation function, and if the response object is provided, send a response if the validation fails.\n   * @param data The object data to validate.\n   * @param options The options to use when validating.\n   * @param options.res The response object.\n   * @returns A JSON response meaning it's invalid, or null if it's valid.\n   */\n  public async validate(\n    data: Record<string, unknown>,\n    options?: { res?: Response }\n  ): Promise<Response | null | string> {\n    const result = await this.validateBase(data, this.schema);\n    if (typeof result !== 'string') return null;\n    if (options?.res)\n      return options.res.status(400).json({ status: 400, message: result });\n    return result;\n  }\n\n  /**\n   * Export the schema.\n   * @returns The exported schema.\n   */\n  public export(): ExportedSchema {\n    const exportSchema: Record<string, ExportedValue<ExportedSchema>> = {};\n\n    Object.entries(this.schema).forEach(([key, value]) => {\n      const exportedValue = value.export() as ExportedValue<ExportedSchema>;\n      exportSchema[key] = exportedValue;\n    });\n\n    return exportSchema;\n  }\n}\n","import { NextFunction, Request, Response } from 'express';\nimport { ClientSession } from 'mongoose';\n\nimport {\n  ControllerType,\n  EndpointNote,\n  EndpointResponse,\n  PathString,\n  RateLimit,\n  RequestMethod,\n} from '@typings/core';\nimport { ExportedEndpoint } from '@typings/exports';\nimport { PackageError, logger } from '@utils/index';\nimport { withErrorHandling } from '@utils/middleware';\nimport SchemaBuilder from './Schema';\n\n/**\n * The endpoint builder class.\n */\nexport default class EndpointBuilder {\n  public disabled: boolean;\n  public name: string;\n  public description: string;\n  public path: PathString;\n  public method: RequestMethod;\n  public notes: EndpointNote[];\n  public paramSchema?: SchemaBuilder;\n  public querySchema?: SchemaBuilder;\n  public bodySchema?: SchemaBuilder;\n  public responses: EndpointResponse[];\n  public controller?: (req: Request, res: Response, next: NextFunction) => void;\n  public ratelimit?: Partial<RateLimit>;\n\n  /**\n   * Creates a new endpoint.\n   * @param options The options for the endpoint.\n   * @param options.name The name of the endpoint.\n   * @param options.description The description of the endpoint.\n   * @param options.path The path of the endpoint.\n   * @param options.method The method of the endpoint.\n   * @param options.controller The controller of the endpoint.\n   * @param options.notes The notes of the endpoint.\n   * @param options.responses The responses of the endpoint.\n   * @param options.disabled The disabled state of the endpoint.\n   */\n  public constructor(options: {\n    name: string;\n    description: string;\n    path: PathString;\n    method: RequestMethod;\n    controller?: ControllerType;\n    notes?: EndpointNote[];\n    responses?: EndpointResponse[];\n    disabled?: boolean;\n  }) {\n    this.disabled = options.disabled ?? false;\n    this.name = options.name;\n    this.description = options.description;\n    this.path = options.path;\n    this.method = options.method;\n    if (options.controller)\n      this.controller = withErrorHandling(options.controller);\n    else this.controller = undefined;\n    this.notes = options.notes ?? [];\n    this.responses = options.responses ?? [];\n\n    const constructorSchema = new SchemaBuilder()\n      .addBoolean({\n        name: 'disabled',\n        required: false,\n        defaultValue: false,\n      })\n      .addString({\n        name: 'name',\n        required: true,\n        min: 1,\n        max: 50,\n      })\n      .addString({\n        name: 'description',\n        required: true,\n        min: 1,\n        max: 1000,\n      })\n      .addString({\n        name: 'path',\n        required: true,\n        min: 1,\n        max: 100,\n        test: 'path',\n      })\n      .addString({\n        name: 'method',\n        required: true,\n        min: 1,\n        max: 100,\n        options: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE', 'OPTIONS'],\n      });\n\n    constructorSchema.validate(options).then((result) => {\n      if (typeof result === 'string')\n        throw new PackageError(\n          `Endpoint (${options.name || options.path}): ${result}`\n        );\n    });\n  }\n\n  /**\n   * Sets the notes of the endpoint.\n   * @param notes The notes of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setNotes(notes: EndpointNote[]): this {\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request parameters against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setParamSchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.paramSchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request queries against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setQuerySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.querySchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request body against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setBodySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.bodySchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the responses of the endpoint.\n   * @param responses The responses of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setResponses(responses: EndpointResponse[]): this {\n    this.responses = responses;\n    return this;\n  }\n\n  /**\n   * Sets the controler to run.\n   * @param controller The controlller function to run.\n   * @returns The endpoint builder.\n   */\n  public setController(\n    controller: (\n      req: Request,\n      res: Response,\n      session: ClientSession\n    ) => Promise<unknown> | unknown\n  ): this {\n    this.controller = withErrorHandling(controller);\n    return this;\n  }\n\n  /**\n   * Executes the endpoint function.\n   * @param req The request.\n   * @param res The response.\n   * @param next The next function.\n   */\n  public execute = (req: Request, res: Response, next: NextFunction): void => {\n    logger.info('[T] running controller');\n\n    (async () => {\n      try {\n        // Validate the request\n        if (\n          this.paramSchema &&\n          (await this.paramSchema.validate(req.params, { res }))\n        )\n          return;\n        if (\n          this.querySchema &&\n          (await this.querySchema.validate(req.query, { res }))\n        )\n          return;\n        if (\n          this.bodySchema &&\n          (await this.bodySchema.validate(req.body as Record<string, unknown>, {\n            res,\n          }))\n        )\n          return;\n\n        logger.info('[T] running controller #2');\n\n        // Return the execution of the controller\n        if (this.controller) {\n          logger.info('[T] running controller #3');\n          this.controller(req, res, next);\n        } else {\n          logger.info('[T] running controller #4');\n          logger.error(\n            `Endpoint (${this.name || this.path}): Controller not set`\n          );\n          res.status(500).json({\n            status: 500,\n            message: 'Controller not set for endpoint.',\n          });\n        }\n      } catch (error) {\n        logger.error(error);\n      }\n    })();\n  };\n\n  /**\n   * Validates the endpoint.\n   */\n  public validate(): void {\n    if (!this.controller) throw new PackageError('Controller not set');\n  }\n\n  /**\n   * Exports the endpoint.\n   * @returns The exported endpoint.\n   */\n  public export(): Readonly<ExportedEndpoint> {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path === '/' ? '' : this.path,\n      method: this.method,\n      notes: this.notes,\n      params: this.paramSchema ? this.paramSchema.export() : {},\n      queries: this.querySchema ? this.querySchema.export() : {},\n      body: this.bodySchema ? this.bodySchema.export() : {},\n      responses: this.responses,\n    };\n  }\n}\n","import { Router } from 'express';\n\nimport { Middleware, PathString, RateLimit } from '@typings/core';\nimport { ExportedGroup } from '@typings/exports';\nimport { PackageError } from '@utils/index';\nimport BaseApp from './Base/BaseApp';\nimport RouteBuilder from './Route';\nimport SchemaBuilder from './Schema';\n\n/**\n * The group builder class, used to build a group of routes.\n */\nexport default class GroupBuilder extends BaseApp<'router'> {\n  private path: PathString;\n  private name: string;\n  private routes: RouteBuilder[];\n\n  /**\n   * Creates a new group builder.\n   * @param params The group parameters.\n   * @param params.path The path of the group.\n   * @param params.name The name of the group.\n   */\n  public constructor({ path, name }: { path: PathString; name: string }) {\n    super();\n\n    const constructorSchema = new SchemaBuilder()\n      .addString({\n        name: 'path',\n        required: true,\n        min: 1,\n        max: 100,\n        test: 'path',\n      })\n      .addString({\n        name: 'name',\n        required: true,\n        min: 1,\n        max: 50,\n      });\n\n    constructorSchema.validate({ path, name }).then((result) => {\n      if (typeof result === 'string')\n        throw new PackageError(`Group (${name || path}): ${result}`);\n    });\n\n    this.path = path;\n    this.name = name;\n    this.routes = [];\n  }\n\n  /**\n   * Uses a group.\n   * @param route The group to use.\n   * @returns The group builder.\n   */\n  public addRoute(route: RouteBuilder): this {\n    this.routes.push(route);\n    this.raw.use(this.path, route.raw);\n    return this;\n  }\n\n  /**\n   * Returns the group values.\n   * @returns The group values.\n   */\n  public values(): Readonly<{\n    raw: Router;\n    ratelimit?: Partial<RateLimit>;\n    path: PathString;\n    defaultCategory: string;\n    routes: RouteBuilder[];\n    middlewares: Middleware[];\n  }> {\n    return {\n      raw: this.raw,\n      ratelimit: this.ratelimit,\n      path: this.path,\n      defaultCategory: this.name,\n      routes: this.routes,\n      middlewares: this.middlewares,\n    };\n  }\n\n  /**\n   * Validates the group.\n   */\n  public validate(): void {\n    if (!this.routes.length) throw new PackageError('No routes provided');\n\n    this.routes.forEach((route) => route.validate());\n  }\n\n  /**\n   * Exports the routes and endpoints data.\n   * @returns The exported data.\n   */\n  public export(): Readonly<ExportedGroup> {\n    return {\n      name: this.name,\n      path: this.path,\n      routes: this.routes.map((route) => route.export()),\n    };\n  }\n}\n","import { Router } from 'express';\n\nimport { PathString } from '@typings/core';\nimport { ExportedRoute } from '@typings/exports';\nimport { PackageError } from '@utils/index';\nimport BaseApp from './Base/BaseApp';\nimport EndpointBuilder from './Endpoint';\nimport SchemaBuilder from './Schema';\n\n/**\n * The route builder class.\n */\nexport default class RouteBuilder extends BaseApp<'router'> {\n  public raw: Router = Router();\n  private path: PathString;\n  private name: string;\n  private description: string;\n  private endpoints: EndpointBuilder[] = [];\n\n  /**\n   * Creates a new route.\n   * @param options The options for the route.\n   * @param options.path The path of the route.\n   * @param options.name The name of the route.\n   * @param options.description The description of the route.\n   */\n  public constructor({\n    path,\n    name,\n    description,\n  }: {\n    path: PathString;\n    name: string;\n    description: string;\n  }) {\n    super();\n\n    const constructorSchema = new SchemaBuilder()\n      .addString({\n        name: 'path',\n        required: true,\n        min: 1,\n        max: 100,\n        test: 'path',\n      })\n      .addString({\n        name: 'name',\n        required: true,\n        min: 1,\n        max: 50,\n      })\n      .addString({\n        name: 'description',\n        required: true,\n        min: 1,\n        max: 1000,\n      });\n\n    constructorSchema.validate({ name, description, path }).then((result) => {\n      if (typeof result === 'string')\n        throw new PackageError(`Route (${name || path}): ${result}`);\n    });\n\n    this.path = path;\n    this.name = name;\n    this.description = description;\n  }\n\n  /**\n   * Adds an endpoint to the route.\n   * @param endpoint The endpoint to add to the route.\n   * @returns The route builder.\n   */\n  public addEndpoint(endpoint: EndpointBuilder): this {\n    this.endpoints.push(endpoint);\n\n    // Replace multiple slashes with a single slash.\n    const doubleSlashRegex = /\\/+/g;\n\n    const url: string = `${this.path}${endpoint.path}`.replaceAll(\n      doubleSlashRegex,\n      '/'\n    );\n\n    switch (endpoint.method) {\n      case 'GET':\n        this.raw.get(url, endpoint.execute);\n        break;\n      case 'POST':\n        this.raw.post(url, endpoint.execute);\n        break;\n      case 'PUT':\n        this.raw.put(url, endpoint.execute);\n        break;\n      case 'PATCH':\n        this.raw.patch(url, endpoint.execute);\n        break;\n      case 'DELETE':\n        this.raw.delete(url, endpoint.execute);\n        break;\n      case 'OPTIONS':\n        this.raw.options(url, endpoint.execute);\n        break;\n      default:\n        throw new PackageError(`Invalid method ${String(endpoint.method)}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds all endpoints from an endpoint file to the route.\n   * @param endpointFile The endpoint file to add endpoints from.\n   * @returns The route builder.\n   */\n  public addEndpointFile(endpointFile: Record<string, EndpointBuilder>): this {\n    for (const value of Object.values(endpointFile)) {\n      this.addEndpoint(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Validates the route.\n   */\n  public validate(): void {\n    if (this.endpoints.length === 0)\n      throw new PackageError(`Route ${this.name} has no endpoints`);\n\n    this.endpoints.forEach((endpoint) => endpoint.validate());\n  }\n\n  /**\n   * Exports the route.\n   * @returns The exported route.\n   */\n  public export(): Readonly<ExportedRoute> {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path,\n      endpoints: this.endpoints.map((endpoint) => endpoint.export()),\n    };\n  }\n}\n","import { StructureField, StructureType } from '@typings/core';\nimport { ExportedStructure } from '@typings/exports';\n\n/**\n * The StructureBuilder class is used to build a example structures for object schemas and value options.\n */\nexport default class StructureBuilder {\n  private name: string;\n  private type: StructureType;\n  private fields: StructureField[];\n\n  /**\n   * The name of the structure.\n   * @param fields The fields of the structure.\n   * @param fields.name The name of the field.\n   * @param fields.type The type of the field.\n   * @param fields.fields The fields of the field.\n   */\n  public constructor({\n    name,\n    type,\n    fields,\n  }: {\n    name: string;\n    type: StructureType;\n    fields: StructureField[];\n  }) {\n    this.name = name;\n    this.type = type;\n    this.fields = fields;\n  }\n\n  /**\n   * Exports the structure.\n   * @returns The exported structure.\n   */\n  public export(): ExportedStructure {\n    return {\n      name: this.name,\n      type: this.type,\n      fields: this.fields,\n    };\n  }\n}\n","import { Router } from 'express';\nimport rateLimit, { Options } from 'express-rate-limit';\n\nimport { ExportedVersion } from '@typings/exports';\nimport PackageError from '@utils/PackageError';\nimport BaseApp from './Base/BaseApp';\nimport GroupBuilder from './Group';\nimport SchemaBuilder from './Schema';\n\n/**\n * The version builder class.\n */\nexport default class VersionBuilder extends BaseApp<'app'> {\n  private version: number;\n  private groups: GroupBuilder[];\n\n  /**\n   * Creates a new version builder.\n   * @param config The configuration of the API.\n   * @param config.version The version of the API.\n   */\n  public constructor({ version }: { version: number }) {\n    super('app');\n\n    const constructorSchema = new SchemaBuilder().addNumber({\n      name: 'version',\n      required: true,\n      min: 1,\n      max: 10_000,\n    });\n\n    constructorSchema.validate({ version }).then((result) => {\n      if (typeof result === 'string') throw new PackageError(result);\n    });\n\n    this.groups = [];\n    this.version = version;\n  }\n\n  /**\n   * Sets the global rate limit for the version.\n   * @param options The options of the rate limit.\n   * @param showInDocs Whether to show the rate limit in the docs.\n   * @returns The API builder.\n   */\n  public setRateLimit(options: Partial<Options>, showInDocs?: boolean): this {\n    // If showInDocs is undefined, it will default to true.\n    if (showInDocs || showInDocs === undefined)\n      this.ratelimit = {\n        statusCode: options.statusCode ?? 429,\n        ...(typeof options.windowMs === 'number'\n          ? { window: options.windowMs }\n          : {}),\n        ...(typeof options.max === 'number' ? { max: options.max } : {}),\n      };\n\n    // Use the express-rate-limit middleware.\n    this.raw.use(`v${this.version}`, rateLimit(options));\n\n    return this;\n  }\n\n  /**\n   * Adds a group to the API.\n   * @param group The group to add.\n   * @returns The API builder.\n   */\n  public addGroup(group: GroupBuilder): this {\n    this.groups.push(group);\n    const groupValues = group.values();\n    this.raw.use(`v${this.version}`, groupValues.raw);\n    return this;\n  }\n\n  /**\n   * Adds a group to the API.\n   * @returns The API data.\n   */\n  public export(): Readonly<ExportedVersion> {\n    return {\n      version: this.version,\n      rateLimit: this.ratelimit,\n      groups: this.groups.map((group) => group.export()),\n    };\n  }\n\n  /**\n   * Gets the version values.\n   * @returns The API data.\n   */\n  public values(): Readonly<{\n    path: string;\n    raw: Router;\n    version: number;\n  }> {\n    return {\n      path: `/v${this.version}`,\n      raw: this.raw,\n      version: this.version,\n    };\n  }\n\n  /**\n   * Validates the version builder.\n   */\n  public validate(): void {\n    if (!this.groups.length) throw new PackageError('No groups provided');\n    this.groups.forEach((group) => group.validate());\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","Api","EndpointBuilder","GroupBuilder","RouteBuilder","SchemaBuilder","StructureBuilder","VersionBuilder","src_default","__toCommonJS","import_dotenv","import_express","import_fs","import_path","PackageError","message","import_colors","winston","levelColor","level","colors","consoleFormat","ms","message","stack","msg","ANSI_REGEX","logger","logger_default","validateEmail","str","validateUsername","valiedatePassword","validatePhoneNumber","validateIpv4Address","validateUrl","url","validatePath","path","validateImage","image","notFound","__","res","next","errorHandler","err","logger_default","error_middleware_default","import_mongoose","handledFunction","controller","req","res","next","session","error","logger_default","withErrorHandling","import_colors","winston","cli","colors","site","consoleFormat","message","stack","msg","logger","logger_default","import_express","import_express_rate_limit","BaseApp","type","express","options","PackageError","middleware","BaseValue","options","ArrayValueBuilder","BaseValue","min","max","unique","contains","items","options","BooleanValueBuilder","BaseValue","options","ImageValueBuilder","BaseValue","options","IntegerValueBuilder","BaseValue","options","NumberValueBuilder","BaseValue","options","ObjectValueBuilder","BaseValue","options","StringValueBuilder","BaseValue","options","SchemaBuilder","options","value","ArrayValueBuilder","StringValueBuilder","NumberValueBuilder","IntegerValueBuilder","BooleanValueBuilder","ObjectValueBuilder","ImageValueBuilder","data","schema","properties","schemaFields","key","req","testVal","validateEmail","validateUsername","valiedatePassword","validatePhoneNumber","validateIpv4Address","validateUrl","validatePath","check","result","validateImage","exportSchema","exportedValue","Api","BaseApp","options","SchemaBuilder","result","PackageError","version","versionValues","group","groupValues","callback","__","res","error_middleware_default","config","configPath","path","configFile","fs","error","logger_default","cli","packageJSON","fileExtRegex","value","validatedConfig","structure","EndpointBuilder","options","withErrorHandling","SchemaBuilder","result","PackageError","notes","callback","schema","responses","controller","req","res","next","logger_default","error","GroupBuilder","BaseApp","path","name","SchemaBuilder","result","PackageError","route","import_express","RouteBuilder","BaseApp","path","name","description","SchemaBuilder","result","PackageError","endpoint","doubleSlashRegex","url","endpointFile","value","StructureBuilder","name","type","fields","import_express_rate_limit","VersionBuilder","BaseApp","version","SchemaBuilder","result","PackageError","options","showInDocs","rateLimit","group","groupValues","dotenv","src_default","express"]}