{"version":3,"sources":["../src/index.ts","../src/builders/ApiBuilder.ts","../src/utils/middleware/error.middleware.ts","../src/utils/logger.ts","../src/utils/validate.ts","../src/utils/middleware/wrapper.middleware.ts","../src/bin/utils/logger.ts","../src/builders/Base/BaseAppBuilder.ts","../src/builders/Base/BaseValueBuilder.ts","../src/builders/Value/ArrayValueBuilder.ts","../src/builders/Value/BooleanValueBuilder.ts","../src/builders/Value/ImageValueBuilder.ts","../src/builders/Value/IntegerValueBuilder.ts","../src/builders/Value/NumberValueBuilder.ts","../src/builders/Value/ObjectValueBuilder.ts","../src/builders/Value/StringValueBuilder.ts","../src/builders/SchemaBuilder.ts","../src/builders/EndpointBuilder.ts","../src/builders/RouteBuilder.ts","../src/builders/RouterBuilder.ts","../src/builders/StructureBuilder.ts","../src/builders/VersionBuilder.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport express from 'express';\n\ndotenv.config();\n\nexport * from './builders';\nexport { default as Config } from './typings/config';\n\nexport default express;\n","import fs from 'fs';\nimport { Server } from 'http';\nimport path from 'path';\n\nimport Config from '@typings/config';\nimport { RateLimit } from '@typings/core';\nimport { errorMiddleware } from '@utils/middleware';\nimport logger, { cli } from '../bin/utils/logger';\nimport BaseAppBuilder from './Base/BaseAppBuilder';\nimport SchemaBuilder from './SchemaBuilder';\nimport StructureBuilder from './StructureBuilder';\nimport VersionBuilder, { ExportedVersion } from './VersionBuilder';\n\nexport type ExportedApi = Config & {\n  baseUrl: string;\n  port: number;\n  structures: StructureBuilder[];\n  rateLimit?: Partial<RateLimit>;\n  versions: ExportedVersion[];\n};\n\n/**\n * The ApiBuilder class is used to build the API.\n */\nexport default class ApiBuilder extends BaseAppBuilder<'app'> {\n  private port: number;\n  private versions: VersionBuilder[];\n  private baseUrl: string;\n  private structures: StructureBuilder[];\n\n  /**\n   * The constructor of the ApiBuilder class.\n   * @param config The configuration of the API.\n   * @param config.baseUrl The base URL of the API.\n   * @param config.port The port of the API.\n   * @param config.structures The structures of the API.\n   */\n  public constructor({\n    baseUrl,\n    port,\n    structures,\n  }: {\n    baseUrl: string;\n    port: number;\n    structures?: StructureBuilder[];\n  }) {\n    super('app');\n    this.versions = [];\n    this.baseUrl = baseUrl;\n    this.port = port;\n    this.structures = structures ?? [];\n  }\n\n  /**\n   * Adds a version to the API.\n   * @param version The version to add.\n   * @returns The API builder.\n   */\n  public addVersion(version: VersionBuilder): this {\n    this.versions.push(version);\n    const versionValues = version.values();\n    this.raw.use(versionValues.path, versionValues.raw);\n    return this;\n  }\n\n  /**\n   * Initializes the API.\n   * @param callback The callback to run when the API is initialized.\n   * @returns The server.\n   */\n  public startServer(callback?: () => void): Server {\n    this.raw.get('/', (req, res) =>\n      res.json({\n        message: 'Welcome to Slekup API',\n        versions: this.versions.map((version) => ({\n          version: `v${version.values().version}`,\n          url: `${this.baseUrl}/v${version.values().version}`,\n        })),\n      })\n    );\n\n    this.raw.use(errorMiddleware.notFound);\n    this.raw.use(errorMiddleware.errorHandler);\n\n    const server = this.raw.listen(this.port, callback);\n\n    return server;\n  }\n\n  /**\n   * Loads the configuration of the API.\n   * @returns The configuration of the API.\n   */\n  private static loadConfig = async (): Promise<Readonly<Config>> => {\n    let config: Partial<Config> = {};\n    const configPath = path.join(process.cwd(), 'express-custom.json');\n\n    try {\n      const configFile = await fs.promises.readFile(configPath, 'utf-8');\n      try {\n        config = JSON.parse(configFile.toString()) as Partial<Config>;\n      } catch (error) {\n        logger.error(\n          `${cli.err} Failed to parse config.json file (invalid JSON).`\n        );\n        throw new Error(error as string);\n      }\n    } catch (error) {\n      logger.error(\n        `${cli.err} No express-custom.json found, trying package.json`\n      );\n\n      try {\n        // Read package.json\n        const packageJSON = await fs.promises.readFile(\n          path.join(process.cwd(), 'package.json')\n        );\n\n        // Parse the JSON\n        try {\n          const configFile = (\n            JSON.parse(packageJSON.toString()) as {\n              'express-custom'?: Partial<Config>;\n            }\n          )['express-custom'];\n\n          if (typeof configFile !== 'object') {\n            logger.error(\n              `${cli.err} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n            );\n            throw new Error('Invalid JSON');\n          }\n\n          config = configFile;\n        } catch (error) {\n          logger.error(\n            `${cli.err} Failed to parse express-custom.json (invalid JSON or no \"express-custom\" block)`\n          );\n          throw new Error(error as string);\n        }\n      } catch (error) {\n        // Failed to read package.json\n        logger.error(\n          `${cli.err} Failed to load express-custom config from package.json`\n        );\n        throw new Error(error as string);\n      }\n    }\n\n    const fileExtRegex = /\\.ts$|\\.js$/;\n\n    const configSchema = new SchemaBuilder()\n      .addString((option) =>\n        option\n          .setName('file')\n          .setRequired(true)\n          .setMax(256)\n          .addCheck({\n            /**\n             * Checks if the value ends with .ts or .js.\n             * @param value The value to check.\n             * @returns Whether the value passes the check.\n             */\n            run: (value) => fileExtRegex.test(value),\n            response:\n              'The file must be a JavaScript or TypeScript file (.js or .ts).',\n          })\n      )\n      .addString((value) =>\n        value.setName('output').setDefault('docs').setMax(256)\n      )\n      .addString((option) => option.setName('name').setDefault('My API'))\n      .addString((option) =>\n        option.setName('description').setDefault('Made with Express Custom')\n      )\n      .addString((option) => option.setName('logo').setDefault('/logo.png'))\n      .addString((option) => option.setName('customDir').setMax(256))\n      .addString((option) => option.setName('theme').setDefault('default'))\n      .addString((option) => option.setName('codeTheme').setDefault('framer'))\n      .addObject((option) =>\n        option\n          .setName('socials')\n          .setDefault({})\n          .setProperties({\n            discord: {\n              type: 'string',\n            },\n            github: {\n              type: 'string',\n            },\n            instagram: {\n              type: 'string',\n            },\n            facebook: {\n              type: 'string',\n            },\n            linkedin: {\n              type: 'string',\n            },\n            youtube: {\n              type: 'string',\n            },\n            twitter: {\n              type: 'string',\n            },\n            email: {\n              type: 'string',\n            },\n          })\n      );\n\n    const result = await configSchema.validate(config);\n\n    if (typeof result === 'string') {\n      logger.error(\n        `${cli.err} Validation error while processing express-config.json`\n      );\n      logger.error(`${cli.err} Error: ${result}`);\n      process.exit(1);\n    }\n\n    const validatedConfig = config as Config;\n\n    return validatedConfig;\n  };\n\n  /**\n   * Adds a router to the API.\n   * @returns The API data.\n   */\n  public async export(): Promise<Readonly<ExportedApi>> {\n    if (!this.baseUrl) throw new Error('The base URL of the API is not set.');\n    if (!this.port) throw new Error('The port of the API is not set.');\n\n    logger.info('Running export');\n\n    const config = await ApiBuilder.loadConfig();\n\n    return {\n      ...config,\n      baseUrl: this.baseUrl,\n      port: this.port,\n      structures: this.structures,\n      rateLimit: this.ratelimit,\n      versions: this.versions.map((version) => version.export()),\n    };\n  }\n}\n","import colors from 'colors';\nimport { NextFunction, Request, Response } from 'express';\n\nimport { logger } from '..';\n\n/**\n * Middleware to handle 404 errors.\n * @param req The request object.\n * @param res The response object.\n * @param next The next function.\n */\nfunction notFound(req: Request, res: Response, next: NextFunction): void {\n  res.status(404).json({\n    status: 404,\n    message: 'The server cannot find the requested resource',\n  });\n  logger.error(\n    colors.red(`The route at ${req.originalUrl} was not found - ${req.method}`)\n  );\n  next();\n}\n\ninterface HttpError extends Error {\n  status: number;\n  field?: string;\n}\n\n/**\n * Middleware to handle errors.\n * @param err The error object.\n * @param req The request object.\n * @param res The response object.\n */\nfunction errorHandler(err: HttpError, req: Request, res: Response): void {\n  logger.error(err);\n\n  res.status(err.status || 500);\n\n  res.json({\n    error: {\n      status: err.status || 500,\n      message: 'Internal Server Error',\n      // stack: err.stack,\n      field: err.field,\n    },\n  });\n}\n\nexport default {\n  notFound,\n  errorHandler,\n};\n","import colors from 'colors';\nimport { TransformableInfo } from 'logform';\nimport * as winston from 'winston';\n\nconst debug = process.env.DEBUG ? true : false;\n\n/**\n * Returns a color based on the log level.\n * @param level The log level.\n * @returns The colored log level.\n */\nconst levelColor = (level: string): string => {\n  switch (level) {\n    case 'error': {\n      return colors.red(level.toUpperCase());\n    }\n    case 'warn': {\n      return colors.yellow(level.toUpperCase());\n    }\n    case 'info': {\n      return colors.green(level.toUpperCase());\n    }\n    case 'debug': {\n      return colors.blue(level.toUpperCase());\n    }\n    case 'trace': {\n      return colors.magenta(level.toUpperCase());\n    }\n    default: {\n      return colors.white(level.toUpperCase());\n    }\n  }\n};\n\n/**\n * The format for the console transport.\n */\nconst consoleFormat = winston.format.combine(\n  // winston.format.prettyPrint(),\n  winston.format.colorize(),\n  winston.format.timestamp(),\n  winston.format.ms(),\n  winston.format.errors({ stack: true }),\n  // winston.format.splat(),\n  // winston.format.json(),\n  winston.format.printf(\n    ({ timestamp, ms, level, message, stack }: TransformableInfo) => {\n      let msg = message as string;\n\n      // Append the stack trace to the message if it is present\n      if (stack) msg += `\\n${stack as string}`;\n\n      /* eslint-disable no-control-regex */\n      const ANSI_REGEX = /\\u001b\\[[0-9]{1,2}m/gi;\n\n      return `${colors.gray(timestamp as string)} (${colors.magenta(\n        ms as string\n      )}) [${levelColor(level.replace(ANSI_REGEX, ''))}]: ${msg}`;\n    }\n  )\n);\n\n/**\n * The logger instance - console transports only.\n */\nconst logger = winston.createLogger({\n  level: 'debug',\n  format: consoleFormat,\n  transports: [\n    // Console transport\n    new winston.transports.Console({\n      level: debug ? 'debug' : 'info',\n    }),\n    new winston.transports.Console({\n      level: 'error',\n    }),\n    new winston.transports.Console({\n      level: 'warn',\n    }),\n    new winston.transports.Console({\n      level: 'trace',\n    }),\n  ],\n});\n\nexport default logger;\n","/**\n * Validate a cron expression.\n * @param expression The cron expression to validate.\n * @returns Whether the cron expression is valid.\n */\nexport const validateCronExpression = (expression: string): boolean => {\n  const cronExpressionRegex =\n    /^(\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2})$/;\n  return cronExpressionRegex.test(expression);\n};\n\n/**\n * Convert a time to cron time.\n * @param time The time to convert to cron time.\n * @returns The converted time.\n */\nexport const timeToCronExpression = (time: string): string | null => {\n  const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d)$/; // Regular expression to validate HH:MM format\n\n  // Check if the time matches the HH:MM format\n  if (timeRegex.test(time)) {\n    const [hours, minutes] = time.split(':'); // Split the time into hours and minutes\n\n    if (!hours || !minutes) return null; // Return null if the time is invalid\n\n    // Format hours and minutes for cron time\n    const cronHours = hours === '00' ? '0' : hours.replace(/^0+/, ''); // Remove leading zeros, except for '00'\n    const cronMinutes = minutes.replace(/^0+/, ''); // Remove leading zeros\n\n    return `${cronMinutes} ${cronHours} * * *`; // Return the cron time format\n  }\n\n  return null; // Return null if the time is invalid\n};\n\n/**\n * Validate a time.\n * @param time The time to validate.\n * @returns Whether the time is valid.\n */\nexport const validateTime = (time: string): boolean => {\n  const timeRegex = /^(?:[01]\\d|2[0-3]):(?:00|30)$/; // Regular expression to validate HH:MM format\n  return timeRegex.test(time);\n};\n\n/**\n * Tests if a string is empty.\n * @param str The string to test.\n * @returns True if the string is empty, false otherwise.\n */\nexport const validateEmail = (str: string): boolean => {\n  // /^\\S+@\\S+\\.\\S+$/\n  // /\\S+@\\S+\\.\\S+/\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(str);\n};\n\n/**\n * Tests if a username is valid.\n * @param str The username to test.\n * @returns True if the username is valid, false otherwise.\n */\nexport const validateUsername = (str: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_]{3,16}$/;\n  return usernameRegex.test(str);\n};\n\n/**\n * Tests if a password is valid.\n * @param str The password to test.\n * @returns True if the password is valid, false otherwise.\n */\nexport const valiedatePassword = (str: string): boolean => {\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  return passwordRegex.test(str);\n};\n\n/**\n * Tests if a phone number is valid.\n * @param str The phone number to test.\n * @returns True if the phone number is valid, false otherwise.\n */\nexport const validatePhoneNumber = (str: string): boolean => {\n  const phoneNumberRegex = /^\\d{10}$/;\n  return phoneNumberRegex.test(str);\n};\n\n/**\n * Tests if a ipv4 address is valid.\n * @param str The IPv4 address to test.\n * @returns True if the IPv4 address is valid, false otherwise.\n */\nexport const validateIpv4Address = (str: string): boolean => {\n  // ^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$ - https://stackoverflow.com/questions/5284147/validating-ipv4-addresses-with-regexp\n  const ipv4AddressRegex =\n    /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/;\n  return ipv4AddressRegex.test(str);\n};\n\n/**\n * Tests if a color is valid.\n * @param color The color string to test.\n * @returns True if the color is valid, false otherwise.\n */\nexport const validateColor = (color: string): boolean => {\n  // Remove any whitespace from the input\n  const cleanedColor = color.replace(/\\s/g, '');\n\n  // Check if the input matches a valid hex color pattern\n  if (/^#?[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/.test(cleanedColor)) {\n    // If it does, add a '#' if it's missing and return the cleanedColor\n    return cleanedColor.startsWith('#');\n  }\n\n  return false;\n};\n\n/**\n * Tests if a url is valid.\n * @param url The url to test.\n * @returns True if the url is valid, false otherwise.\n */\nexport const validateUrl = (url: string): boolean => {\n  // Check if the url is valid\n  try {\n    const urlObject = new URL(url);\n    return urlObject.href === url; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * Tests if an image is valid.\n * @param image The image to test.\n * @returns True if the image is valid, false otherwise.\n */\nexport const validateImage = (image: string): boolean => {\n  // Check if the image is valid\n  try {\n    const imageObject = new URL(image);\n    return imageObject.href === image; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n","import { NextFunction, Request, Response } from 'express';\nimport { ClientSession, startSession } from 'mongoose';\n\nimport { logger } from '@utils/index';\n\ntype ControllerType = (\n  req: Request,\n  res: Response,\n  session: ClientSession\n) => Promise<unknown> | unknown;\n\n/**\n * Handles a function.\n * @param controller The handler function.\n * @param req The request.\n * @param res The response.\n * @param next The next function.\n */\nconst handledFunction = async (\n  controller: ControllerType,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const session = await startSession();\n\n  try {\n    session.startTransaction();\n    await controller(req, res, session);\n    await session.commitTransaction();\n    next();\n  } catch (error) {\n    await session.abortTransaction();\n    logger.error(error);\n    res.status(500).json({ error: 'Internal Server Error' });\n  } finally {\n    session.endSession();\n  }\n};\n\n/**\n * Wraps a handler function in error handling.\n * @param controller The handler function.\n * @returns The handler function wrapped in error handling.\n */\nexport const withErrorHandling =\n  (controller: ControllerType) =>\n  (req: Request, res: Response, next: NextFunction): void => {\n    handledFunction(controller, req, res, next);\n  };\n","import colors from 'colors';\r\nimport { TransformableInfo } from 'logform';\r\nimport * as winston from 'winston';\r\n\r\nexport const cli = {\r\n  inf: colors.blue('CLI'),\r\n  suc: colors.green('CLI'),\r\n  err: colors.red('CLI'),\r\n};\r\n\r\nexport const site = {\r\n  inf: colors.blue('SITE'),\r\n  suc: colors.green('SITE'),\r\n  err: colors.red('SITE'),\r\n};\r\n\r\n/**\r\n * The format for the console transport.\r\n */\r\nconst consoleFormat = winston.format.combine(\r\n  winston.format.colorize(),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.printf(({ message, stack }: TransformableInfo) => {\r\n    let msg = message as string;\r\n    // Append the stack trace to the message if it is present\r\n    if (stack) msg += `\\n${stack as string}`;\r\n    return msg;\r\n  })\r\n);\r\n\r\n/**\r\n * The logger instance - console transports only.\r\n */\r\nconst logger = winston.createLogger({\r\n  level: 'info',\r\n  format: consoleFormat,\r\n  transports: [\r\n    // Console transport\r\n    new winston.transports.Console({\r\n      level: 'info',\r\n    }),\r\n  ],\r\n});\r\n\r\nexport default logger;\r\n","import express, { Express, Router } from 'express';\nimport { Options, rateLimit } from 'express-rate-limit';\n\nimport { Middleware, RateLimit } from '@typings/core';\n\n/**\n * Base app builder class.\n */\nexport default class BaseAppBuilder<T = 'router'> {\n  public raw:\n    | (T extends 'app' ? Express : never)\n    | (T extends 'router' ? Router : never);\n  protected ratelimit?: Partial<RateLimit>;\n  protected middlewares: Middleware[];\n\n  /**\n   * Creates an instance of the base app builder class.\n   * Router is the default type, so only pass 'app' to create an express app.\n   * @param type The type of the builder.\n   */\n  public constructor(type: T = 'router' as T) {\n    if (type === 'app') {\n      this.raw = express() as T extends 'app' ? Express : never;\n    } else {\n      this.raw = Router() as T extends 'router' ? Router : never;\n    }\n    this.middlewares = [];\n  }\n\n  /**\n   * Adds a router to the API.\n   * @param options The options of the rate limit.\n   * @param showInDocs Whether to show the rate limit in the docs.\n   * @returns The API builder.\n   */\n  public setRateLimit(options: Partial<Options>, showInDocs?: boolean): this {\n    if (this.ratelimit) throw new Error('Rate limit already set.');\n\n    // If showInDocs is undefined, it will default to true.\n    if (showInDocs || showInDocs === undefined)\n      this.ratelimit = {\n        statusCode: options.statusCode ?? 429,\n        ...(typeof options.windowMs === 'number'\n          ? { window: options.windowMs }\n          : {}),\n        ...(typeof options.max === 'number' ? { max: options.max } : {}),\n      };\n\n    // Use the express-rate-limit middleware.\n    this.raw.use(rateLimit(options));\n\n    return this;\n  }\n\n  /**\n   * Adds a middleware to the route. Add it before adding the route.\n   * @param middleware The middleware to add to the route.\n   * @returns The router builder.\n   */\n  public addMiddleware(middleware: Middleware): this {\n    this.middlewares.push(middleware);\n    this.raw.use(middleware);\n    return this;\n  }\n}\n","import { BaseValueSchema, SchemaTypes, ValueCheck } from '@typings/schema';\n\nexport interface ExportedValue<T> {\n  type: string;\n  min?: number;\n  max?: number;\n  options?: string[];\n  test?: string;\n  items?: T;\n  properties?: T;\n}\n\n/**\n * The base value builder class.\n * This class is not used for any value types, but is used to provide a base for all value builders.\n */\nexport default class BaseValueBuilder implements BaseValueSchema {\n  public name: string;\n  public description: string;\n  public required: boolean;\n  public checks: ValueCheck[];\n  public structure?: string;\n  public defaultValue?: SchemaTypes;\n\n  /**\n   * Sets the name of the value.\n   */\n  public constructor() {\n    this.name = 'Name not provided';\n    this.description = 'Description not provided';\n    this.required = false; // Default to false\n    this.checks = [];\n  }\n\n  /**\n   * Sets the name of the value.\n   * @param name The name of the value.\n   * @returns The base value builder.\n   */\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the description of the value.\n   * @param description The description of the value.\n   * @returns The base value builder.\n   */\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets whether the value is required.\n   * @param required Whether the value is required.\n   * @returns The base value builder.\n   */\n  public setRequired(required: boolean): this {\n    this.required = required;\n    return this;\n  }\n\n  /**\n   * Add a custom function that returns a boolean to test the value against.\n   * @param check The checks of the value.\n   * @returns The base value builder.\n   */\n  public addCheck(check: ValueCheck): this {\n    this.checks.push(check);\n    return this;\n  }\n\n  /**\n   * Sets the structure of the value.\n   * @param structure The structure of the value.\n   * @returns The base value builder.\n   */\n  public setStructure(structure: string): this {\n    this.structure = structure;\n    return this;\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport {\n  ArrayContains,\n  ArrayValue,\n  ValueSchema,\n  ValueTypes,\n} from '@typings/schema';\n\n/**\n * The array value builder class.\n */\nexport default class ArrayValueBuilder\n  extends BaseValueBuilder\n  implements ArrayValue<ValueSchema>\n{\n  public type = 'array' as const;\n  public min?: number;\n  public max?: number;\n  public unique?: boolean;\n  public contains?: ArrayContains;\n  public items?: ValueSchema | ValueSchema[];\n\n  /**\n   * Creates an instance of the array value builder class.\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Sets the min of the value.\n   * @param min The min of the value.\n   * @returns The string value builder.\n   */\n  public setMin(min: number): this {\n    this.min = min;\n    return this;\n  }\n\n  /**\n   * Sets the max of the value.\n   * @param max The max of the value.\n   * @returns The string value builder.\n   */\n  public setMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  /**\n   * Sets whether the value is unique.\n   * @param unique Whether the value is unique.\n   * @returns The string value builder.\n   */\n  public setUnique(unique: boolean): this {\n    this.unique = unique;\n    return this;\n  }\n\n  /**\n   * Set only one type that the array needs to contain.\n   * @param contains The type that the array needs to contain.\n   * @param min The minimum amount of times the type needs to be in the array.\n   * @param max The maximum amount of times the type needs to be in the array.\n   * @returns The string value builder.\n   */\n  public setContains(contains: ValueTypes, min?: number, max?: number): this {\n    this.contains = {\n      type: contains,\n      ...(min ? { min } : {}),\n      ...(max ? { max } : {}),\n    };\n    return this;\n  }\n\n  /**\n   * Sets the items that the array needs to contain.\n   * @param items The items that the array needs to contain.\n   * @returns The string value builder.\n   */\n  public setItems(items: ValueSchema | ValueSchema[]): this {\n    this.items = items;\n    return this;\n  }\n\n  /**\n   * Sets the default value of the array.\n   * @param defaultValue The default value of the array.\n   * @returns The array value builder.\n   */\n  public setDefault(defaultValue: unknown[]): this {\n    this.defaultValue = defaultValue;\n    return this;\n  }\n\n  /**\n   * Exports the array value.\n   * @returns The array value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n      max: this.max,\n      min: this.min,\n      unique: this.unique,\n    };\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport { BooleanValue } from '@typings/schema';\n\n/**\n * The boolean value builder class.\n */\nexport default class BooleanValueBuilder\n  extends BaseValueBuilder\n  implements BooleanValue\n{\n  public type = 'boolean' as const;\n\n  /**\n   * Creates an instance of the boolean value builder class.\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Sets the default value of the value.\n   * @param defaultValue The default value of the value.\n   * @returns The boolean value builder.\n   */\n  public setDefault(defaultValue: boolean): this {\n    this.defaultValue = defaultValue;\n    return this;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport { ImageValue } from '@typings/schema';\n\n/**\n * The image value builder class.\n */\nexport default class ImageValueBuilder\n  extends BaseValueBuilder\n  implements ImageValue\n{\n  public type = 'image' as const;\n\n  /**\n   * Creates an instance of the image value builder class.\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport { IntegerValue } from '@typings/schema';\n\n/**\n * The integer value builder class.\n */\nexport default class IntegerValueBuilder\n  extends BaseValueBuilder\n  implements IntegerValue\n{\n  public type = 'integer' as const;\n  public min?: number;\n  public max?: number;\n\n  /**\n   * Creates an instance of the integer value builder class.\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Sets the minimun value the integer can be.\n   * @param min The min of the value.\n   * @returns The integer value builder.\n   */\n  public setMin(min: number): this {\n    this.min = min;\n    return this;\n  }\n\n  /**\n   * Sets the maximum value the integer can be.\n   * @param max The max of the value.\n   * @returns The integer value builder.\n   */\n  public setMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  /**\n   * Sets the default value of the value.\n   * @param defaultValue The default value of the value.\n   * @returns The integer value builder.\n   */\n  public setDefault(defaultValue: number): this {\n    this.defaultValue = defaultValue;\n    return this;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport { NumberValue } from '@typings/schema';\n\n/**\n * The number value builder class.\n */\nexport default class NumberValueBuilder\n  extends BaseValueBuilder\n  implements NumberValue\n{\n  public type = 'number' as const;\n  public min?: number;\n  public max?: number;\n\n  /**\n   * Creates an instance of the number value builder class.\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Sets the minimum value the number can be.\n   * @param min The min of the value.\n   * @returns The number value builder.\n   */\n  public setMin(min: number): this {\n    this.min = min;\n    return this;\n  }\n\n  /**\n   * Sets the maximum value the number can be.\n   * @param max The max of the value.\n   * @returns The number value builder.\n   */\n  public setMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  /**\n   * Sets the default value of the value.\n   * @param defaultValue The default value of the value.\n   * @returns The number value builder.\n   */\n  public setDefault(defaultValue: number): this {\n    this.defaultValue = defaultValue;\n    return this;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport { ObjectValue, Schema } from '@typings/schema';\n\n/**\n * The object value builder class.\n */\nexport default class ObjectValueBuilder<T>\n  extends BaseValueBuilder\n  implements ObjectValue<T>\n{\n  public type = 'object' as const;\n  public properties: Schema;\n\n  /**\n   * Creates an instance of the object value builder class.\n   */\n  public constructor() {\n    super();\n    this.properties = {};\n  }\n\n  /**\n   * Sets the properties of the value.\n   * @param properties The properties of the value.\n   * @returns The value builder.\n   */\n  public setProperties(properties: Schema): this {\n    this.properties = properties;\n    return this;\n  }\n\n  /**\n   * Sets the default value of the value.\n   * @param defaultValue The default value of the value.\n   * @returns The object value builder.\n   */\n  public setDefault(defaultValue: object): this {\n    this.defaultValue = defaultValue;\n    return this;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","import BaseValueBuilder from '@builders/Base/BaseValueBuilder';\nimport { StringTest, StringValue } from '@typings/schema';\n\n/**\n * The string value builder class.\n */\nexport default class StringValueBuilder\n  extends BaseValueBuilder\n  implements StringValue\n{\n  public type = 'string' as const;\n  public min?: number;\n  public max?: number;\n  public options?: string[];\n  public test?: StringTest;\n\n  /**\n   * Creates an instance of the string value builder class.\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * Sets the min of the value.\n   * @param min The min of the value.\n   * @returns The string value builder.\n   */\n  public setMin(min: number): Omit<this, 'setMin'> {\n    this.min = min;\n    return this;\n  }\n\n  /**\n   * Sets the max of the value.\n   * @param max The max of the value.\n   * @returns The string value builder.\n   */\n  public setMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  /**\n   * Set an array of string values which the value must be one of.\n   * @param options An array of string options.\n   * @returns The string value builder.\n   */\n  public setOptions(options: string[]): this {\n    this.options = options;\n    return this;\n  }\n\n  /**\n   * Sets the test regex for the string to be tested against.\n   * @param test The test of the value.\n   * @returns The string value builder.\n   */\n  public setTest(test: StringTest): this {\n    this.test = test;\n    return this;\n  }\n\n  /**\n   * Sets the default value of the value.\n   * @param defaultValue The default value of the value.\n   * @returns The string value builder.\n   */\n  public setDefault(defaultValue: string): this {\n    this.defaultValue = defaultValue;\n    return this;\n  }\n\n  /**\n   * Exports the value.\n   * @returns The exported value.\n   */\n  public export(): unknown {\n    return {\n      type: this.type,\n      name: this.name,\n      description: this.description,\n      required: this.required,\n      structure: this.structure,\n    };\n  }\n}\n","//  Disable the no-param-reassign rule as it is needed to assign default values to undefined parameters.\n/* eslint-disable no-param-reassign */\n\nimport { Response } from 'express';\n\nimport { Schema } from '@typings/schema';\nimport {\n  validateEmail,\n  validateImage,\n  validateIpv4Address,\n  validatePhoneNumber,\n  validateUrl,\n  validateUsername,\n  valiedatePassword,\n} from '@utils/validate';\nimport { ExportedValue } from './Base/BaseValueBuilder';\nimport {\n  ArrayValueBuilder,\n  BooleanValueBuilder,\n  ImageValueBuilder,\n  IntegerValueBuilder,\n  NumberValueBuilder,\n  ObjectValueBuilder,\n  StringValueBuilder,\n} from './Value';\n\nexport type ExportedSchema = Record<string, ExportedValue<ExportedSchema>>;\n\ntype ValueBuilders =\n  | ArrayValueBuilder\n  | StringValueBuilder\n  | NumberValueBuilder\n  | IntegerValueBuilder\n  | BooleanValueBuilder\n  | ObjectValueBuilder<ValueBuilders>\n  | ImageValueBuilder;\n\nexport type BuildersSchema = Record<string, ValueBuilders>;\n\n/**\n * The Schema Builder class.\n */\nexport default class SchemaBuilder {\n  public schema: BuildersSchema;\n\n  /**\n   * Creates a new schema.\n   */\n  public constructor() {\n    this.schema = {};\n  }\n\n  /**\n   * Adds a array value to the schema.\n   * @param callback The callback to build the array value.\n   * @returns The schema builder.\n   */\n  public addArray(callback: (value: ArrayValueBuilder) => void): this {\n    const value = new ArrayValueBuilder();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a string value to the schema.\n   * @param callback The callback to build the string value.\n   * @returns The schema builder.\n   */\n  public addString(callback: (value: StringValueBuilder) => void): this {\n    const value = new StringValueBuilder();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a number value to the schema.\n   * @param callback The callback to build the number value.\n   * @returns The schema builder.\n   */\n  public addNumber(callback: (value: NumberValueBuilder) => void): this {\n    const value = new NumberValueBuilder();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a integer value to the schema.\n   * @param callback The callback to build the integer value.\n   * @returns The schema builder.\n   */\n  public addInteger(callback: (value: IntegerValueBuilder) => void): this {\n    const value = new IntegerValueBuilder();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a boolean value to the schema.\n   * @param callback The callback to build the boolean value.\n   * @returns The schema builder.\n   */\n  public addBoolean(callback: (value: BooleanValueBuilder) => void): this {\n    const value = new BooleanValueBuilder();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a object value to the schema.\n   * @param callback The callback to build the object value.\n   * @returns The schema builder.\n   */\n  public addObject(\n    callback: (value: ObjectValueBuilder<ValueBuilders>) => void\n  ): this {\n    const value = new ObjectValueBuilder<ValueBuilders>();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a image value to the schema.\n   * @param callback The callback to build the image value.\n   * @returns The schema builder.\n   */\n  public addImage(callback: (value: ImageValueBuilder) => void): this {\n    const value = new ImageValueBuilder();\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Validate an object against a schema.\n   * @param data The object data to validate.\n   * @param schema The schema to validate against.\n   * @param properties Whether to validate the schema properties or not.\n   * @returns A string if the validation fails, false otherwise.\n   */\n  private async validateBase<T = 'schema'>(\n    data: Record<string, unknown>,\n    schema:\n      | (T extends 'schema' ? BuildersSchema : never)\n      | (T extends 'properties' ? Schema : never),\n    properties?: boolean\n  ): Promise<string | boolean> {\n    // Check if the data is an object\n    if (typeof data !== 'object') return 'The data provided must be an object.';\n\n    const schemaFields = properties\n      ? Object.entries(schema as Schema)\n      : Object.entries(schema as BuildersSchema);\n\n    for (const [key, value] of schemaFields) {\n      // Check if all required fields have been provided.\n      // If the field has a default value as the required value is not provided, set the field to the default value.\n      if (value.required) {\n        if (!data[key] && value.defaultValue) {\n          data[key] = value.defaultValue;\n          break;\n        } else if (!data[key]) {\n          return `The field \"${key}\" has not been provided.`;\n        }\n      }\n\n      // For non required fields, if the value is not provided, set the field to the default value if it exists.\n      if (!data[key] && value.defaultValue) {\n        data[key] = value.defaultValue;\n        return false;\n      } else if (!data[key]) {\n        return false;\n      }\n    }\n\n    // Check if all provided fields are the correct type\n    for (const [key, value] of schemaFields) {\n      if (typeof data[key] !== value.type)\n        return `The field \"${key}\" must be of type ${value.type}.`;\n    }\n\n    // Check if all provided fields are valid\n    for (const [key, value] of schemaFields) {\n      // Number validation\n      if (value.type === 'number') {\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          typeof data[key] === 'number' &&\n          ((data[key] as number) < value.min ||\n            (data[key] as number) > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n        // Check if the schema value is above the minimum required value\n        if (\n          value.min &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) < value.min\n        )\n          return `The field \"${key}\" must be at least ${value.min}.`;\n\n        // Check if the schema value is below the maximum required value\n        if (\n          value.max &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) > value.max\n        )\n          return `The field \"${key}\" must be less than ${value.max}.`;\n      }\n\n      // Integer validation\n      if (value.type === 'integer') {\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          typeof data[key] === 'number' &&\n          ((data[key] as number) < value.min ||\n            (data[key] as number) > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n        // Check if the schema value is above the minimum required value\n        if (\n          value.min &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) < value.min\n        )\n          return `The field \"${key}\" must be at least ${value.min}.`;\n\n        // Check if the schema value is below the maximum required value\n        if (\n          value.max &&\n          typeof data[key] === 'number' &&\n          (data[key] as number) > value.max\n        )\n          return `The field \"${key}\" must be less than ${value.max}.`;\n\n        // Check if the schema value is an integer\n        if (\n          typeof data[key] !== 'number' ||\n          !Number.isInteger(data[key] as number)\n        )\n          return `The field \"${key}\" must be an integer.`;\n      }\n\n      // String validation\n      if (value.type === 'string') {\n        const req = value;\n        const testVal = data[key] as string;\n\n        // Check if the schema value is included in the schema options\n        if (value.options && !value.options.includes(data[key] as string))\n          return `The field \"${key}\" is not a valid option.`;\n\n        // If both min and max are provided, check if the schema value is within the range\n        if (\n          value.min &&\n          value.max &&\n          (testVal.length < value.min || testVal.length > value.max)\n        )\n          return `The field \"${key}\" must be between ${value.min} and ${value.max} characters.`;\n\n        // Check if the schema value has the minimum required length\n        if (value.min && testVal.length < value.min)\n          return `The field \"${key}\" must be at least ${value.min} characters.`;\n\n        // Check if the schema value has the maximum required length\n        if (value.max && testVal.length > value.max)\n          return `The field \"${key}\" must be less than ${value.max} characters.`;\n\n        // Test if email is valid\n        if (req.test === 'email' && !validateEmail(testVal))\n          return `The field \"${key}\" must be a valid email address.`;\n\n        // Test if username is valid\n        if (req.test === 'username' && !validateUsername(testVal))\n          return `The field \"${key}\" must be a valid username.`;\n\n        // Test if password is valid\n        if (req.test === 'passwordStrength' && !valiedatePassword(testVal))\n          return `The field \"${key}\" is too weak to be a valid password.`;\n\n        // Test if phone number is valid\n        if (req.test === 'phoneNumber' && !validatePhoneNumber(testVal))\n          return `The field \"${key}\" must be a valid phone number.`;\n\n        // Test if IPv4 address is valid\n        if (req.test === 'ipAddress' && !validateIpv4Address(testVal))\n          return `The field \"${key}\" must be a valid IPv4 address.`;\n\n        // Test if a url is valid\n        if (req.test === 'url' && !validateUrl(testVal))\n          return `The field \"${key}\" must be a valid IPv4 address.`;\n\n        // Test if the schema value is a string\n        if (typeof data[key] !== 'string')\n          return `The field \"${key}\" must be a string.`;\n      }\n\n      // Check if the schema value passes all checks\n      if (value.checks)\n        for (const check of value.checks) {\n          const passedCheck = await check.run(key);\n          if (!passedCheck) return `${check.response}.`;\n        }\n\n      // Boolean validation\n      if (value.type === 'boolean') {\n        // TODO: Check this works\n        // Check if the schema value is a boolean\n        if (typeof data[key] !== 'boolean')\n          return `The field \"${key}\" must be a boolean.`;\n      }\n\n      // Object validation\n      if (value.type === 'object') {\n        // TODO: Check this works\n        // Check if the schema value is an object\n        if (typeof data[key] !== 'object')\n          return `The field \"${key}\" must be an object.`;\n\n        // Check if the schema value has the correct properties\n        if (value.properties && Object.keys(value.properties).length > 0) {\n          const result = await this.validateBase<'properties'>(\n            data[key] as Record<string, unknown>,\n            value.properties as Schema,\n            true\n          );\n          if (result) return result;\n        }\n      }\n\n      // Array validation\n      if (value.type === 'array') {\n        // TODO: Check this works\n        // Check if the schema value is an array\n        if (!Array.isArray(data[key]))\n          return `The field \"${key}\" must be an array.`;\n\n        // TODO: Check if the schema value has the correct items\n        /* if (value.items) {\n          for (const item of data[key] as unknown[]) {\n            if (typeof item !== value.items.type)\n              return `The field \"${key}\" must be an array of ${value.items.type}.`;\n            if (!value.items.options.includes(item))\n              return `The field \"${key}\" must be an array of valid options.`;\n          }\n        } */\n      }\n\n      // Image validation\n      if (value.type === 'image') {\n        // TODO: Check this works\n        // Check if the schema value is a string\n        if (typeof data[key] !== 'string')\n          return `The field \"${key}\" must be a string.`;\n\n        // Check if the schema value is a valid image\n        if (!validateImage(data[key] as string))\n          return `The field \"${key}\" must be a valid image.`;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Run the validation function, and if the response object is provided, send a response if the validation fails.\n   * @param data The object data to validate.\n   * @param options The options to use when validating.\n   * @param options.res The response object.\n   * @returns A JSON response meaning it's invalid, or null if it's valid.\n   */\n  public async validate(\n    data: Record<string, unknown>,\n    options?: { res?: Response }\n  ): Promise<Response | null | string> {\n    const result = await this.validateBase(data, this.schema);\n    if (typeof result !== 'string') return null;\n    if (options?.res)\n      return options.res.status(400).json({ status: 400, message: result });\n    return result;\n  }\n\n  /**\n   * Export the schema.\n   * @returns The exported schema.\n   */\n  public export(): ExportedSchema {\n    const exportSchema: Record<string, ExportedValue<ExportedSchema>> = {};\n\n    Object.entries(this.schema).forEach(([key, value]) => {\n      const exportedValue = value.export() as ExportedValue<ExportedSchema>;\n      exportSchema[key] = exportedValue;\n    });\n\n    return exportSchema;\n  }\n}\n","import { NextFunction, Request, Response } from 'express';\nimport { ClientSession } from 'mongoose';\n\nimport { PathString, RateLimit } from '@typings/core';\nimport { logger } from '@utils/index';\nimport { withErrorHandling } from '@utils/middleware';\nimport SchemaBuilder, { ExportedSchema } from './SchemaBuilder';\n\ntype RequestMethod =\n  | 'GET'\n  | 'POST'\n  | 'PATCH'\n  | 'PUT'\n  | 'DELETE'\n  | 'OPTIONS'\n  | 'HEAD'\n  | 'TRACE'\n  | 'CONNECT';\n\ntype EndpointMessageType = 'INFO' | 'WARNING' | 'DANGER' | 'SUCCESS';\n\ninterface EndpointNote {\n  type: EndpointMessageType;\n  text: string;\n}\n\ntype StatusCode =\n  | 200\n  | 201\n  | 204\n  | 301\n  | 400\n  | 401\n  | 403\n  | 404\n  | 405\n  | 409\n  | 500\n  | 501;\n\ninterface EndpointResponse {\n  status: StatusCode;\n  message: string;\n  [key: string]: unknown;\n}\n\nexport interface ExportedEndpoint {\n  name: string;\n  description: string;\n  path: string;\n  method: RequestMethod;\n  notes: EndpointNote[];\n  params: ExportedSchema;\n  queries: ExportedSchema;\n  body: ExportedSchema;\n  responses: EndpointResponse[];\n}\n\n/**\n * The endpoint builder class.\n */\nexport default class EndpointBuilder {\n  public disabled: boolean;\n  public name: string;\n  public description: string;\n  public path: PathString;\n  public method: RequestMethod;\n  public notes: EndpointNote[];\n  public paramSchema?: SchemaBuilder;\n  public querySchema?: SchemaBuilder;\n  public bodySchema?: SchemaBuilder;\n  public responses: EndpointResponse[];\n  public controller: (req: Request, res: Response, next: NextFunction) => void;\n  public ratelimit?: Partial<RateLimit>;\n\n  /**\n   * Creates a new endpoint.\n   * @param options The options for the endpoint.\n   * @param options.disabled The disabled state of the endpoint.\n   * @param options.name The name of the endpoint.\n   * @param options.description The description of the endpoint.\n   * @param options.path The path of the endpoint.\n   * @param options.method The method of the endpoint.\n   */\n  public constructor({\n    disabled,\n    name,\n    description,\n    path,\n    method,\n  }: {\n    disabled?: boolean;\n    name: string;\n    description: string;\n    path: PathString;\n    method: RequestMethod;\n  }) {\n    this.disabled = disabled ?? false;\n    this.name = name;\n    this.description = description;\n    this.path = path;\n    this.method = method;\n    this.notes = [];\n    this.responses = [];\n\n    /**\n     * If the controller is not set, throw an error.\n     */\n    this.controller = () => {\n      throw new Error('Controller not set');\n    };\n  }\n\n  /**\n   * Sets the notes of the endpoint.\n   * @param notes The notes of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setNotes(notes: EndpointNote[]): this {\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request parameters against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setParamSchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.paramSchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request queries against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setQuerySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.querySchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request body against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setBodySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.bodySchema = schema;\n    return this;\n  }\n\n  /**\n   * Sets the responses of the endpoint.\n   * @param responses The responses of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setResponses(responses: EndpointResponse[]): this {\n    this.responses = responses;\n    return this;\n  }\n\n  /**\n   * Sets the controler to run.\n   * @param controller The controlller function to run.\n   * @returns The endpoint builder.\n   */\n  public setController(\n    controller: (\n      req: Request,\n      res: Response,\n      session: ClientSession\n    ) => Promise<unknown> | unknown\n  ): this {\n    this.controller = withErrorHandling(controller);\n    return this;\n  }\n\n  /**\n   * Executes the endpoint function.\n   * @param req The request.\n   * @param res The response.\n   * @param next The next function.\n   */\n  public execute(req: Request, res: Response, next: NextFunction): void {\n    (async () => {\n      try {\n        if (!this.paramSchema && !this.querySchema && !this.bodySchema)\n          return res\n            .status(500)\n            .json({ status: 500, message: 'Schema not set for endpoint.' });\n\n        // Validate the request\n        if (\n          this.paramSchema &&\n          (await this.paramSchema.validate(req.params, { res }))\n        )\n          return;\n        if (\n          this.querySchema &&\n          (await this.querySchema.validate(req.query, { res }))\n        )\n          return;\n        if (\n          this.bodySchema &&\n          (await this.bodySchema.validate(req.body as Record<string, unknown>, {\n            res,\n          }))\n        )\n          return;\n\n        // Return the execution of the controller\n        return this.controller(req, res, next);\n      } catch (error) {\n        logger.error(error);\n      }\n    })();\n  }\n\n  /**\n   * Exports the endpoint.\n   * @returns The exported endpoint.\n   */\n  public export(): Readonly<ExportedEndpoint> {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path === '/' ? '' : this.path,\n      method: this.method,\n      notes: this.notes,\n      params: this.paramSchema ? this.paramSchema.export() : {},\n      queries: this.querySchema ? this.querySchema.export() : {},\n      body: this.bodySchema ? this.bodySchema.export() : {},\n      responses: this.responses,\n    };\n  }\n}\n","import { Router } from 'express';\n\nimport { PathString } from '@typings/core';\nimport BaseAppBuilder from './Base/BaseAppBuilder';\nimport EndpointBuilder, { ExportedEndpoint } from './EndpointBuilder';\n\nexport interface ExportedRoute {\n  name: string;\n  description: string;\n  path: PathString;\n  endpoints: ExportedEndpoint[];\n}\n\n/**\n * The route builder class.\n */\nexport default class RouteBuilder extends BaseAppBuilder {\n  public raw: Router = Router();\n  private path: PathString;\n  private name: string;\n  private description: string;\n  private endpoints: EndpointBuilder[] = [];\n\n  /**\n   * Creates a new route.\n   * @param options The options for the route.\n   * @param options.path The path of the route.\n   * @param options.name The name of the route.\n   * @param options.description The description of the route.\n   */\n  public constructor({\n    name,\n    description,\n    path,\n  }: {\n    name: string;\n    description: string;\n    path: PathString;\n  }) {\n    super();\n    this.path = path;\n    this.name = name;\n    this.description = description;\n  }\n\n  /**\n   * Adds an endpoint to the route.\n   * @param endpoint The endpoint to add to the route.\n   * @returns The router builder.\n   */\n  public addEndpoint(endpoint: EndpointBuilder): this {\n    this.endpoints.push(endpoint);\n\n    // Replace multiple slashes with a single slash.\n    const doubleSlashRegex = /\\/+/g;\n\n    const url: string = `${this.path}${endpoint.path}`.replaceAll(\n      doubleSlashRegex,\n      '/'\n    );\n\n    switch (endpoint.method) {\n      case 'GET':\n        this.raw.get(url, endpoint.controller);\n        break;\n      case 'POST':\n        this.raw.post(url, endpoint.controller);\n        break;\n      case 'PUT':\n        this.raw.put(url, endpoint.controller);\n        break;\n      case 'PATCH':\n        this.raw.patch(url, endpoint.controller);\n        break;\n      case 'DELETE':\n        this.raw.delete(url, endpoint.controller);\n        break;\n      case 'OPTIONS':\n        this.raw.options(url, endpoint.controller);\n        break;\n      default:\n        throw new Error(`Invalid method ${String(endpoint.method)}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds all endpoints from an endpoint file to the route.\n   * @param endpointFile The endpoint file to add endpoints from.\n   * @returns The route builder.\n   */\n  public addEndpointFile(endpointFile: Record<string, EndpointBuilder>): this {\n    for (const value of Object.values(endpointFile)) {\n      this.addEndpoint(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Exports the route.\n   * @returns The exported route.\n   */\n  public export(): Readonly<ExportedRoute> {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path,\n      endpoints: this.endpoints.map((endpoint) => endpoint.export()),\n    };\n  }\n}\n","import { Router } from 'express';\n\nimport { Middleware, PathString, RateLimit } from '@typings/core';\nimport BaseAppBuilder from './Base/BaseAppBuilder';\nimport RouteBuilder, { ExportedRoute } from './RouteBuilder';\n\nexport interface ExportedRouter {\n  name: string;\n  path: PathString;\n  routes: ExportedRoute[];\n}\n\n/**\n * The router builder class.\n */\nexport default class RouterBuilder extends BaseAppBuilder {\n  private path: PathString;\n  private name: string;\n  private routes: RouteBuilder[];\n\n  /**\n   * Creates a new router builder.\n   * @param params The router parameters.\n   * @param params.path The path of the router.\n   * @param params.name The name of the router.\n   */\n  public constructor({ path, name }: { path: PathString; name: string }) {\n    super();\n    this.path = path;\n    this.name = name;\n    this.routes = [];\n  }\n\n  /**\n   * Uses a router.\n   * @param route The router to use.\n   * @returns The router builder.\n   */\n  public addRoute(route: RouteBuilder): this {\n    this.routes.push(route);\n    this.raw.use(this.path, route.raw);\n    return this;\n  }\n\n  /**\n   * Exports the routes and endpoints data.\n   * @returns The exported data.\n   */\n  public export(): Readonly<ExportedRouter> {\n    return {\n      name: this.name,\n      path: this.path,\n      routes: this.routes.map((route) => route.export()),\n    };\n  }\n\n  /**\n   * Returns the router values.\n   * @returns The router values.\n   */\n  public values(): Readonly<{\n    raw: Router;\n    ratelimit?: Partial<RateLimit>;\n    path: `/${string}`;\n    defaultCategory: string;\n    routes: RouteBuilder[];\n    middlewares: Middleware[];\n  }> {\n    return {\n      raw: this.raw,\n      ratelimit: this.ratelimit,\n      path: this.path,\n      defaultCategory: this.name,\n      routes: this.routes,\n      middlewares: this.middlewares,\n    };\n  }\n}\n","type StructureType = 'schema' | 'option';\n\ninterface StructureField {\n  name: string;\n  description: string;\n  type?: 'string' | 'number' | 'boolean' | 'object' | 'array';\n  required?: boolean;\n  structure?: string;\n  option?: string;\n}\n\n/**\n * The StructureBuilder class is used to build a example structures for object schemas and value options.\n */\nexport default class StructureBuilder {\n  private name: string;\n  private type: StructureType;\n  private fields: StructureField[];\n\n  /**\n   * The name of the structure.\n   * @param fields The fields of the structure.\n   * @param fields.name The name of the field.\n   * @param fields.type The type of the field.\n   * @param fields.fields The fields of the field.\n   */\n  public constructor({\n    name,\n    type,\n    fields,\n  }: {\n    name: string;\n    type: StructureType;\n    fields: StructureField[];\n  }) {\n    this.name = name;\n    this.type = type;\n    this.fields = fields;\n  }\n\n  /**\n   * Exports the structure.\n   * @returns The exported structure.\n   */\n  public export(): {\n    name: string;\n    type: StructureType;\n    fields: StructureField[];\n  } {\n    return {\n      name: this.name,\n      type: this.type,\n      fields: this.fields,\n    };\n  }\n}\n","import { Router } from 'express';\nimport rateLimit, { Options } from 'express-rate-limit';\n\nimport { RateLimit } from '@typings/core';\nimport BaseAppBuilder from './Base/BaseAppBuilder';\nimport RouterBuilder, { ExportedRouter } from './RouterBuilder';\n\nexport interface ExportedVersion {\n  version: number;\n  rateLimit?: Partial<RateLimit>;\n  routers: ExportedRouter[];\n}\n\n/**\n * The version builder class.\n */\nexport default class VersionBuilder extends BaseAppBuilder<'app'> {\n  private version: number;\n  private routers: RouterBuilder[];\n\n  /**\n   * Creates a new version builder.\n   * @param config The configuration of the API.\n   * @param config.version The version of the API.\n   */\n  public constructor({ version }: { version: number }) {\n    super('app');\n    this.routers = [];\n    this.version = version;\n  }\n\n  /**\n   * Adds a router to the API.\n   * @param options The options of the rate limit.\n   * @param showInDocs Whether to show the rate limit in the docs.\n   * @returns The API builder.\n   */\n  public setRateLimit(options: Partial<Options>, showInDocs?: boolean): this {\n    // If showInDocs is undefined, it will default to true.\n    if (showInDocs || showInDocs === undefined)\n      this.ratelimit = {\n        statusCode: options.statusCode ?? 429,\n        ...(typeof options.windowMs === 'number'\n          ? { window: options.windowMs }\n          : {}),\n        ...(typeof options.max === 'number' ? { max: options.max } : {}),\n      };\n\n    // Use the express-rate-limit middleware.\n    this.raw.use(`v${this.version}`, rateLimit(options));\n\n    return this;\n  }\n\n  /**\n   * Adds a router to the API.\n   * @param router The router to add.\n   * @returns The API builder.\n   */\n  public addRouter(router: RouterBuilder): this {\n    this.routers.push(router);\n    const routerValues = router.values();\n    this.raw.use(`v${this.version}`, routerValues.raw);\n    return this;\n  }\n\n  /**\n   * Adds a router to the API.\n   * @returns The API data.\n   */\n  public export(): Readonly<ExportedVersion> {\n    return {\n      version: this.version,\n      rateLimit: this.ratelimit,\n      routers: this.routers.map((router) => router.export()),\n    };\n  }\n\n  /**\n   * Adds a router to the API.\n   * @returns The API data.\n   */\n  public values(): Readonly<{\n    path: string;\n    raw: Router;\n    version: number;\n  }> {\n    return {\n      path: `/v${this.version}`,\n      raw: this.raw,\n      version: this.version,\n    };\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","ApiBuilder","EndpointBuilder","RouteBuilder","RouterBuilder","SchemaBuilder","StructureBuilder","VersionBuilder","src_default","__toCommonJS","import_dotenv","import_express","import_fs","import_path","import_colors","import_colors","winston","debug","levelColor","level","colors","consoleFormat","timestamp","ms","message","stack","msg","ANSI_REGEX","logger","logger_default","validateEmail","str","validateUsername","valiedatePassword","validatePhoneNumber","validateIpv4Address","validateUrl","url","validateImage","image","notFound","req","res","next","logger_default","colors","errorHandler","err","error_middleware_default","import_mongoose","handledFunction","controller","req","res","next","session","error","logger_default","withErrorHandling","import_colors","winston","cli","colors","site","consoleFormat","message","stack","msg","logger","logger_default","import_express","import_express_rate_limit","BaseAppBuilder","type","express","options","showInDocs","middleware","BaseValueBuilder","name","description","required","check","structure","ArrayValueBuilder","BaseValueBuilder","min","max","unique","contains","items","defaultValue","BooleanValueBuilder","BaseValueBuilder","defaultValue","ImageValueBuilder","BaseValueBuilder","IntegerValueBuilder","BaseValueBuilder","min","max","defaultValue","NumberValueBuilder","BaseValueBuilder","min","max","defaultValue","ObjectValueBuilder","BaseValueBuilder","properties","defaultValue","StringValueBuilder","BaseValueBuilder","min","max","options","test","defaultValue","SchemaBuilder","callback","value","ArrayValueBuilder","StringValueBuilder","NumberValueBuilder","IntegerValueBuilder","BooleanValueBuilder","ObjectValueBuilder","ImageValueBuilder","data","schema","properties","schemaFields","key","req","testVal","validateEmail","validateUsername","valiedatePassword","validatePhoneNumber","validateIpv4Address","validateUrl","check","result","validateImage","options","exportSchema","exportedValue","_ApiBuilder","BaseAppBuilder","baseUrl","port","structures","version","versionValues","callback","req","res","error_middleware_default","logger_default","ApiBuilder","__publicField","config","configPath","path","configFile","fs","error","cli","packageJSON","fileExtRegex","result","SchemaBuilder","option","value","EndpointBuilder","disabled","name","description","path","method","notes","callback","schema","SchemaBuilder","responses","controller","withErrorHandling","req","res","next","error","logger_default","import_express","RouteBuilder","BaseAppBuilder","name","description","path","endpoint","doubleSlashRegex","url","endpointFile","value","RouterBuilder","BaseAppBuilder","path","name","route","StructureBuilder","name","type","fields","import_express_rate_limit","VersionBuilder","BaseAppBuilder","version","options","showInDocs","rateLimit","router","routerValues","dotenv","src_default","express"]}