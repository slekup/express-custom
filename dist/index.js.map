{"version":3,"sources":["../src/index.ts","../src/utils/logger.ts","../src/utils/validate/tests.ts","../src/utils/validate/validate.ts","../src/utils/middleware/wrapper.middleware.ts","../src/builders/ValueBuilders.ts","../src/builders/SchemaBuilder.ts","../src/builders/EndpointBuilder.ts","../src/builders/RouteBuilder.ts","../src/builders/RouterBuilder.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport express from 'express';\n\ndotenv.config();\n\nexport * from './builders';\n\nexport default express;\n","import colors from 'colors';\nimport { TransformableInfo } from 'logform';\nimport * as winston from 'winston';\n\nconst debug = process.env.DEBUG ? true : false;\n\n/**\n * Returns a color based on the log level.\n * @param level The log level.\n * @returns The colored log level.\n */\nconst levelColor = (level: string): string => {\n  switch (level) {\n    case 'error': {\n      return colors.red(level.toUpperCase());\n    }\n    case 'warn': {\n      return colors.yellow(level.toUpperCase());\n    }\n    case 'info': {\n      return colors.green(level.toUpperCase());\n    }\n    case 'debug': {\n      return colors.blue(level.toUpperCase());\n    }\n    case 'trace': {\n      return colors.magenta(level.toUpperCase());\n    }\n    default: {\n      return colors.white(level.toUpperCase());\n    }\n  }\n};\n\n/**\n * The format for the console transport.\n */\nconst consoleFormat = winston.format.combine(\n  // winston.format.prettyPrint(),\n  winston.format.colorize(),\n  winston.format.timestamp(),\n  winston.format.ms(),\n  winston.format.errors({ stack: true }),\n  // winston.format.splat(),\n  // winston.format.json(),\n  winston.format.printf(\n    ({ timestamp, ms, level, message, stack }: TransformableInfo) => {\n      let msg = message as string;\n\n      // Append the stack trace to the message if it is present\n      if (stack) msg += `\\n${stack as string}`;\n\n      /* eslint-disable no-control-regex */\n      const ANSI_REGEX = /\\u001b\\[[0-9]{1,2}m/gi;\n\n      return `${colors.gray(timestamp as string)} (${colors.magenta(\n        ms as string\n      )}) [${levelColor(level.replace(ANSI_REGEX, ''))}]: ${msg}`;\n    }\n  )\n);\n\n/**\n * The logger instance - console transports only.\n */\nconst logger = winston.createLogger({\n  level: 'debug',\n  format: consoleFormat,\n  transports: [\n    // Console transport\n    new winston.transports.Console({\n      level: debug ? 'debug' : 'info',\n    }),\n    new winston.transports.Console({\n      level: 'error',\n    }),\n    new winston.transports.Console({\n      level: 'warn',\n    }),\n    new winston.transports.Console({\n      level: 'trace',\n    }),\n  ],\n});\n\nexport default logger;\n","/**\n * Tests if a string is empty.\n * @param str The string to test.\n * @returns True if the string is empty, false otherwise.\n */\nexport const email = (str: string): boolean => {\n  // /^\\S+@\\S+\\.\\S+$/\n  // /\\S+@\\S+\\.\\S+/\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(str);\n};\n\n/**\n * Tests if a username is valid.\n * @param str The username to test.\n * @returns True if the username is valid, false otherwise.\n */\nexport const username = (str: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_]{3,16}$/;\n  return usernameRegex.test(str);\n};\n\n/**\n * Tests if a password is valid.\n * @param str The password to test.\n * @returns True if the password is valid, false otherwise.\n */\nexport const password = (str: string): boolean => {\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  return passwordRegex.test(str);\n};\n\n/**\n * Tests if a phone number is valid.\n * @param str The phone number to test.\n * @returns True if the phone number is valid, false otherwise.\n */\nexport const phone = (str: string): boolean => {\n  const phoneNumberRegex = /^\\d{10}$/;\n  return phoneNumberRegex.test(str);\n};\n\n/**\n * Tests if a ipv4 address is valid.\n * @param str The IPv4 address to test.\n * @returns True if the IPv4 address is valid, false otherwise.\n */\nexport const ipv4Address = (str: string): boolean => {\n  // ^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$ - https://stackoverflow.com/questions/5284147/validating-ipv4-addresses-with-regexp\n  const ipv4AddressRegex =\n    /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/;\n  return ipv4AddressRegex.test(str);\n};\n\n/**\n * Tests if a color is valid.\n * @param color The color string to test.\n * @returns True if the color is valid, false otherwise.\n */\nexport const color = (color: string): boolean => {\n  // Remove any whitespace from the input\n  const cleanedColor = color.replace(/\\s/g, '');\n\n  // Check if the input matches a valid hex color pattern\n  if (/^#?[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/.test(cleanedColor)) {\n    // If it does, add a '#' if it's missing and return the cleanedColor\n    return cleanedColor.startsWith('#');\n  }\n\n  return false;\n};\n\n/**\n * Tests if a url is valid.\n * @param url The url to test.\n * @returns True if the url is valid, false otherwise.\n */\nexport const url = (url: string): boolean => {\n  // Check if the url is valid\n  try {\n    const urlObject = new URL(url);\n    return urlObject.href === url; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * Tests if an image is valid.\n * @param image The image to test.\n * @returns True if the image is valid, false otherwise.\n */\nexport const image = (image: string): boolean => {\n  // Check if the image is valid\n  try {\n    const imageObject = new URL(image);\n    return imageObject.href === image; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n","import { Response } from 'express';\n\nimport * as tests from './tests';\n\nexport type SchemaTest =\n  | 'email'\n  | 'username'\n  | 'passwordStrength'\n  | 'phoneNumber'\n  | 'ipAddress'\n  | 'url';\n\nexport type SchemaOption = string | number | boolean | null | undefined;\n\ntype SchemaBaseTypes =\n  | 'number'\n  | 'integer'\n  | 'boolean'\n  | 'object'\n  | 'array'\n  | 'image';\n\nexport type SchemaTypes = SchemaBaseTypes | 'string';\n\nexport interface SchemaItems {\n  type: SchemaTypes;\n  enum: unknown[];\n}\n\nexport interface SchemaCheck {\n  run: ((value: string) => boolean) | ((value: string) => Promise<boolean>);\n  response: string;\n}\n\nexport interface BaseSchema<T = unknown> {\n  description: string;\n  required: boolean;\n  options?: SchemaOption[];\n  enum?: unknown[];\n  items?: SchemaItems;\n  min?: number;\n  max?: number;\n  checks?: SchemaCheck[];\n  properties?: T;\n  schema?: `{${string}}`;\n}\n\ninterface SchemaWithTest<T> extends BaseSchema<T> {\n  type: 'string';\n  test?: SchemaTest;\n}\n\ninterface SchemaWithoutTest<T> extends BaseSchema<T> {\n  type: SchemaBaseTypes;\n}\n\nexport type Schema = Record<\n  string,\n  SchemaWithTest<Schema> | SchemaWithoutTest<Schema>\n>;\n\nexport type SchemaProperty = SchemaWithTest<Schema> | SchemaWithoutTest<Schema>;\n\n/**\n * Validate an object against a schema.\n * @param data The object data to validate.\n * @param schema The schema to validate against.\n * @returns A string if the validation fails, false otherwise.\n */\nconst validateBase = async (\n  data: Record<string, unknown>,\n  schema: Schema\n): Promise<string | boolean> => {\n  // Check if the data is an object\n  if (typeof data !== 'object') return 'The data provided must be an object.';\n\n  const schemaFields = Object.entries(schema);\n\n  // Check if all required fields have been provided\n  for (const [key, value] of schemaFields) {\n    if (value.required && !data[key])\n      return `The field \"${key}\" has not been provided.`;\n  }\n\n  // Check if all provided fields are the correct type\n  for (const [key, value] of schemaFields) {\n    if (typeof data[key] !== value.type)\n      return `The field \"${key}\" must be of type ${value.type}.`;\n  }\n\n  // Check if all provided fields are valid\n  for (const [key, value] of schemaFields) {\n    // Check if the schema value is included in the schema options\n    if (value.options && !value.options.includes(data[key] as string | number))\n      return `The field \"${key}\" is not a valid option.`;\n\n    // Number validation\n    if (value.type === 'number') {\n      // If both min and max are provided, check if the schema value is within the range\n      if (\n        value.min &&\n        value.max &&\n        typeof data[key] === 'number' &&\n        ((data[key] as number) < value.min || (data[key] as number) > value.max)\n      )\n        return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n      // Check if the schema value is above the minimum required value\n      if (\n        value.min &&\n        typeof data[key] === 'number' &&\n        (data[key] as number) < value.min\n      )\n        return `The field \"${key}\" must be at least ${value.min}.`;\n\n      // Check if the schema value is below the maximum required value\n      if (\n        value.max &&\n        typeof data[key] === 'number' &&\n        (data[key] as number) > value.max\n      )\n        return `The field \"${key}\" must be less than ${value.max}.`;\n    }\n\n    // Integer validation\n    if (value.type === 'integer') {\n      // If both min and max are provided, check if the schema value is within the range\n      if (\n        value.min &&\n        value.max &&\n        typeof data[key] === 'number' &&\n        ((data[key] as number) < value.min || (data[key] as number) > value.max)\n      )\n        return `The field \"${key}\" must be between ${value.min} and ${value.max}.`;\n\n      // Check if the schema value is above the minimum required value\n      if (\n        value.min &&\n        typeof data[key] === 'number' &&\n        (data[key] as number) < value.min\n      )\n        return `The field \"${key}\" must be at least ${value.min}.`;\n\n      // Check if the schema value is below the maximum required value\n      if (\n        value.max &&\n        typeof data[key] === 'number' &&\n        (data[key] as number) > value.max\n      )\n        return `The field \"${key}\" must be less than ${value.max}.`;\n\n      // Check if the schema value is an integer\n      if (\n        typeof data[key] !== 'number' ||\n        !Number.isInteger(data[key] as number)\n      )\n        return `The field \"${key}\" must be an integer.`;\n    }\n\n    // String validation\n    if (value.type === 'string') {\n      const req = value;\n      const testVal = data[key] as string;\n\n      // If both min and max are provided, check if the schema value is within the range\n      if (\n        value.min &&\n        value.max &&\n        (testVal.length < value.min || testVal.length > value.max)\n      )\n        return `The field \"${key}\" must be between ${value.min} and ${value.max} characters.`;\n\n      // Check if the schema value has the minimum required length\n      if (value.min && testVal.length < value.min)\n        return `The field \"${key}\" must be at least ${value.min} characters.`;\n\n      // Check if the schema value has the maximum required length\n      if (value.max && testVal.length > value.max)\n        return `The field \"${key}\" must be less than ${value.max} characters.`;\n\n      // Test if email is valid\n      if (req.test === 'email' && !tests.email(testVal))\n        return `The field \"${key}\" must be a valid email address.`;\n\n      // Test if username is valid\n      if (req.test === 'username' && !tests.username(testVal))\n        return `The field \"${key}\" must be a valid username.`;\n\n      // Test if password is valid\n      if (req.test === 'passwordStrength' && !tests.password(testVal))\n        return `The field \"${key}\" is too weak to be a valid password.`;\n\n      // Test if phone number is valid\n      if (req.test === 'phoneNumber' && !tests.phone(testVal))\n        return `The field \"${key}\" must be a valid phone number.`;\n\n      // Test if IPv4 address is valid\n      if (req.test === 'ipAddress' && !tests.ipv4Address(testVal))\n        return `The field \"${key}\" must be a valid IPv4 address.`;\n\n      // Test if a url is valid\n      if (req.test === 'url' && !tests.url(testVal))\n        return `The field \"${key}\" must be a valid IPv4 address.`;\n\n      // Test if the schema value is a string\n      if (typeof data[key] !== 'string')\n        return `The field \"${key}\" must be a string.`;\n    }\n\n    // Check if the schema value passes all checks\n    if (value.checks) {\n      for (const check of value.checks) {\n        const passedCheck = await check.run(key);\n        if (!passedCheck) return `${check.response}.`;\n      }\n    }\n\n    // Boolean validation\n    if (value.type === 'boolean') {\n      // TODO: Check this works\n      // Check if the schema value is a boolean\n      if (typeof data[key] !== 'boolean')\n        return `The field \"${key}\" must be a boolean.`;\n    }\n\n    // Object validation\n    if (value.type === 'object') {\n      // TODO: Check this works\n      // Check if the schema value is an object\n      if (typeof data[key] !== 'object')\n        return `The field \"${key}\" must be an object.`;\n\n      // Check if the schema value has the correct properties\n      if (value.properties) {\n        const result = await validateBase(\n          data[key] as Record<string, unknown>,\n          value.properties\n        );\n        if (result) return result;\n      }\n    }\n\n    // Array validation\n    if (value.type === 'array') {\n      // TODO: Check this works\n      // Check if the schema value is an array\n      if (!Array.isArray(data[key]))\n        return `The field \"${key}\" must be an array.`;\n\n      // Check if the schema value has the correct items\n      if (value.items) {\n        for (const item of data[key] as unknown[]) {\n          if (typeof item !== value.items.type)\n            return `The field \"${key}\" must be an array of ${value.items.type}.`;\n          if (!value.items.enum.includes(item))\n            return `The field \"${key}\" must be an array of valid options.`;\n        }\n      }\n    }\n\n    // Image validation\n    if (value.type === 'image') {\n      // TODO: Check this works\n      // Check if the schema value is a string\n      if (typeof data[key] !== 'string')\n        return `The field \"${key}\" must be a string.`;\n\n      // Check if the schema value is a valid image\n      if (!tests.image(data[key] as string))\n        return `The field \"${key}\" must be a valid image.`;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Run the validation function, and if the response object is provided, send a response if the validation fails.\n * @param data The object data to validate.\n * @param schema The schema to validate against.\n * @param res The response object.\n * @returns A JSON response meaning it's invalid, or null if it's valid.\n */\nconst validate = async (\n  data: Record<string, unknown>,\n  schema: Schema,\n  res: Response\n): Promise<Response | null> => {\n  const result = await validateBase(data, schema);\n  if (result) return res.status(400).json({ status: 400, message: result });\n  return null;\n};\n\nexport default validate;\n","import { NextFunction, Request, Response } from 'express';\nimport { ClientSession, startSession } from 'mongoose';\n\nimport { logger } from '@utils/index';\n\ntype ControllerType = (\n  req: Request,\n  res: Response,\n  session: ClientSession\n) => Promise<unknown> | unknown;\n\n/**\n * Handles a function.\n * @param controller The handler function.\n * @param req The request.\n * @param res The response.\n * @param next The next function.\n */\nconst handledFunction = async (\n  controller: ControllerType,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  const session = await startSession();\n\n  try {\n    session.startTransaction();\n    await controller(req, res, session);\n    await session.commitTransaction();\n    next();\n  } catch (error) {\n    await session.abortTransaction();\n    logger.error(error);\n    res.status(500).json({ error: 'Internal Server Error' });\n  } finally {\n    session.endSession();\n  }\n};\n\n/**\n * Wraps a handler function in error handling.\n * @param controller The handler function.\n * @returns The handler function wrapped in error handling.\n */\nexport const withErrorHandling =\n  (controller: ControllerType) =>\n  (req: Request, res: Response, next: NextFunction): void => {\n    handledFunction(controller, req, res, next);\n  };\n","import {\n  BaseSchema,\n  Schema,\n  SchemaCheck,\n  SchemaItems,\n  SchemaOption,\n  SchemaTest,\n  SchemaTypes,\n} from '@utils/index';\n\n/**\n * The value builder class.\n */\nexport default class ValueBuilder implements BaseSchema {\n  public name: string;\n  public type: SchemaTypes;\n  public typeSchema?: `{${string}}`;\n  public description: string;\n  public required: boolean;\n  public options?: SchemaOption[];\n  public enum?: unknown[];\n  public items?: SchemaItems;\n  public min?: number;\n  public max?: number;\n  public checks?: SchemaCheck[];\n  public properties?: Schema;\n  public test?: SchemaTest;\n\n  /**\n   * Sets the name of the value.\n   * @param type The type of the value.\n   */\n  public constructor(type: SchemaTypes) {\n    this.name = 'Name not provided';\n    this.type = type;\n    this.description = 'Description not provided';\n    this.required = true; // Default to true\n  }\n\n  /**\n   * Sets the type of the value.\n   * @param name The name of the value.\n   * @returns The value builder.\n   */\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the type schema of the value.\n   * @param typeSchema The type schema of the value.\n   * @returns The value builder.\n   */\n  public setTypeSchema(typeSchema: `{${string}}`): this {\n    this.typeSchema = typeSchema;\n    return this;\n  }\n\n  /**\n   * Sets the description of the value.\n   * @param description The description of the value.\n   * @returns The value builder.\n   */\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets whether the value is required.\n   * @param required Whether the value is required.\n   * @returns The value builder.\n   */\n  public setRequired(required: boolean): this {\n    this.required = required;\n    return this;\n  }\n\n  /**\n   * Sets the options of the value.\n   * @param options The options of the value.\n   * @returns The value builder.\n   */\n  public setOptions(options: SchemaOption[]): this {\n    this.options = options;\n    return this;\n  }\n\n  /**\n   * Sets the enum of the value.\n   * @param enumValue The enum of the value.\n   * @returns The value builder.\n   */\n  public setEnum(enumValue: unknown[]): this {\n    this.enum = enumValue;\n    return this;\n  }\n\n  /**\n   * Sets the items of the value.\n   * @param items The items of the value.\n   * @returns The value builder.\n   */\n  public setItems(items: SchemaItems): this {\n    this.items = items;\n    return this;\n  }\n\n  /**\n   * Sets the min of the value.\n   * @param min The min of the value.\n   * @returns The value builder.\n   */\n  public setMin(min: number): this {\n    this.min = min;\n    return this;\n  }\n\n  /**\n   * Sets the max of the value.\n   * @param max The max of the value.\n   * @returns The value builder.\n   */\n  public setMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  /**\n   * Sets the checks of the value.\n   * @param checks The checks of the value.\n   * @returns The value builder.\n   */\n  public setChecks(checks: SchemaCheck[]): this {\n    this.checks = checks;\n    return this;\n  }\n\n  /**\n   * Sets the properties of the value.\n   * @param properties The properties of the value.\n   * @returns The value builder.\n   */\n  public setProperties(properties: Schema): this {\n    this.properties = properties;\n    return this;\n  }\n\n  /**\n   * Sets the test of the value.\n   * @param test The test of the value.\n   * @returns The value builder.\n   */\n  public setTest(test: SchemaTest): this {\n    this.test = test;\n    return this;\n  }\n}\n","import { Schema } from '@utils/index';\nimport ValueBuilder from './ValueBuilders';\n\n/**\n * The Schema Builder class.\n */\nexport default class SchemaBuilder {\n  public schema: Schema;\n\n  /**\n   * Creates a new schema.\n   */\n  public constructor() {\n    this.schema = {} as Schema;\n  }\n\n  /**\n   * Adds a string value to the schema.\n   * @param callback The callback to build the string value.\n   * @returns The schema builder.\n   */\n  public addStringValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('string');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a number value to the schema.\n   * @param callback The callback to build the number value.\n   * @returns The schema builder.\n   */\n  public addNumberValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('number');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a integer value to the schema.\n   * @param callback The callback to build the integer value.\n   * @returns The schema builder.\n   */\n  public addIntegerValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('integer');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a boolean value to the schema.\n   * @param callback The callback to build the boolean value.\n   * @returns The schema builder.\n   */\n  public addBooleanValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('boolean');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a object value to the schema.\n   * @param callback The callback to build the object value.\n   * @returns The schema builder.\n   */\n  public addObjectValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('object');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a array value to the schema.\n   * @param callback The callback to build the array value.\n   * @returns The schema builder.\n   */\n  public addArrayValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('array');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n\n  /**\n   * Adds a image value to the schema.\n   * @param callback The callback to build the image value.\n   * @returns The schema builder.\n   */\n  public addImageValue(callback: (value: ValueBuilder) => void): this {\n    const value = new ValueBuilder('image');\n    callback(value);\n    this.schema[value.name] = value;\n    return this;\n  }\n}\n","import { NextFunction, Request, Response } from 'express';\n\nimport { PathType } from '@typings/core';\nimport { Schema, logger, validate } from '@utils/index';\nimport { withErrorHandling } from '@utils/middleware';\nimport { ClientSession } from 'mongoose';\nimport SchemaBuilder from './SchemaBuilder';\n\ntype RequestMethod =\n  | 'GET'\n  | 'POST'\n  | 'PATCH'\n  | 'PUT'\n  | 'DELETE'\n  | 'OPTIONS'\n  | 'HEAD'\n  | 'TRACE'\n  | 'CONNECT';\n\ntype EndpointMessageType = 'INFO' | 'WARNING' | 'DANGER' | 'SUCCESS';\n\ninterface EndpointNote {\n  type: EndpointMessageType;\n  text: string;\n}\n\ntype StatusCode =\n  | 200\n  | 201\n  | 204\n  | 301\n  | 400\n  | 401\n  | 403\n  | 404\n  | 405\n  | 409\n  | 500\n  | 501;\n\ninterface EndpointResponse {\n  status: StatusCode;\n  message: string;\n  [key: string]: unknown;\n}\n\nexport interface ExportedEndpoint {\n  name: string;\n  description: string;\n  path: string;\n  method: RequestMethod;\n  notes: EndpointNote[];\n  params: Schema;\n  query: Schema;\n  body: Schema;\n  responses: EndpointResponse[];\n}\n\n/**\n * The endpoint builder class.\n */\nexport default class EndpointBuilder {\n  public disabled: boolean;\n  public name: string;\n  public description: string;\n  public path: PathType;\n  public method: RequestMethod;\n  public notes: EndpointNote[];\n  public paramSchema?: Schema;\n  public querySchema?: Schema;\n  public bodySchema?: Schema;\n  public responses: EndpointResponse[];\n  public controller: (req: Request, res: Response, next: NextFunction) => void;\n\n  /**\n   * Creates a new endpoint.\n   */\n  public constructor() {\n    this.disabled = false;\n    this.name = 'Name not provided';\n    this.description = 'Description not provided';\n    this.path = '/';\n    this.method = 'GET';\n    this.notes = [];\n\n    this.responses = [];\n\n    /**\n     * If the controller is not set, throw an error.\n     */\n    this.controller = () => {\n      throw new Error('Controller not set');\n    };\n  }\n\n  /**\n   * Sets the disabled state of the endpoint.\n   * @param disabled The disabled state of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setDisabled(disabled: boolean): this {\n    this.disabled = disabled;\n    return this;\n  }\n\n  /**\n   * Sets the name of the endpoint.\n   * @param name The name of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the description of the endpoint.\n   * @param description The description of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the path of the endpoint.\n   * @param path The path of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setPath(path: PathType): this {\n    this.path = path;\n    return this;\n  }\n\n  /**\n   * Sets the method of the endpoint.\n   * @param method The method of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setMethod(method: RequestMethod): this {\n    this.method = method;\n    return this;\n  }\n\n  /**\n   * Sets the notes of the endpoint.\n   * @param notes The notes of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setNotes(notes: EndpointNote[]): this {\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request parameters against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setParamSchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.paramSchema = schema.schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request queries against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setQuerySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.querySchema = schema.schema;\n    return this;\n  }\n\n  /**\n   * Sets the schema to validate the provided request body against.\n   * @param callback The callback to build the schema.\n   * @returns The endpoint builder.\n   */\n  public setBodySchema(callback: (schema: SchemaBuilder) => void): this {\n    const schema = new SchemaBuilder();\n    callback(schema);\n    this.bodySchema = schema.schema;\n    return this;\n  }\n\n  /**\n   * Sets the responses of the endpoint.\n   * @param responses The responses of the endpoint.\n   * @returns The endpoint builder.\n   */\n  public setResponses(responses: EndpointResponse[]): this {\n    this.responses = responses;\n    return this;\n  }\n\n  /**\n   * Sets the controler to run.\n   * @param controller The controlller function to run.\n   * @returns The endpoint builder.\n   */\n  public setController(\n    controller: (\n      req: Request,\n      res: Response,\n      session: ClientSession\n    ) => Promise<unknown> | unknown\n  ): this {\n    this.controller = withErrorHandling(controller);\n    return this;\n  }\n\n  /**\n   * Executes the endpoint function.\n   * @param req The request.\n   * @param res The response.\n   * @param next The next function.\n   */\n  public execute(req: Request, res: Response, next: NextFunction): void {\n    (async () => {\n      try {\n        if (!this.paramSchema && !this.querySchema && !this.bodySchema)\n          return res\n            .status(500)\n            .json({ status: 500, message: 'Schema not set for endpoint.' });\n\n        // Validate the request\n        if (\n          this.paramSchema &&\n          (await validate(req.params, this.paramSchema, res))\n        )\n          return;\n        if (\n          this.querySchema &&\n          (await validate(req.query, this.querySchema, res))\n        )\n          return;\n        if (\n          this.bodySchema &&\n          (await validate(\n            req.body as Record<string, unknown>,\n            this.bodySchema,\n            res\n          ))\n        )\n          return;\n\n        // Return the execution of the controller\n        return this.controller(req, res, next);\n      } catch (error) {\n        logger.error(error);\n      }\n    })();\n  }\n\n  /**\n   * Exports the endpoint.\n   * @returns The exported endpoint.\n   */\n  public export(): ExportedEndpoint {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path === '/' ? '' : this.path,\n      method: this.method,\n      notes: this.notes,\n      params: this.paramSchema ?? {},\n      query: this.querySchema ?? {},\n      body: this.bodySchema ?? {},\n      responses: this.responses,\n    };\n  }\n}\n","import { Router } from 'express';\n\nimport { Middleware, PathType } from '@typings/core';\nimport EndpointBuilder, { ExportedEndpoint } from './EndpointBuilder';\n\nexport interface ExportedRoute {\n  name: string;\n  description: string;\n  path: PathType;\n  endpoints: ExportedEndpoint[];\n}\n\n/**\n * The route builder class.\n */\nexport default class RouteBuilder {\n  public raw: Router = Router();\n  private path: PathType;\n  private name: string;\n  private description: string;\n  private endpoints: EndpointBuilder[] = [];\n  private middlewares: Middleware[] = [];\n  private afterwares: Middleware[] = [];\n\n  /**\n   * Creates a new route.\n   * @param path The path of the route.\n   */\n  public constructor(path?: PathType) {\n    this.path = path ?? '/';\n    this.name = 'Unnamed route';\n    this.description = 'No description provided.';\n  }\n\n  /**\n   * Sets the path of the route.\n   * @param name The name of the route.\n   * @returns The route builder.\n   */\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the description of the route.\n   * @param description The description of the route.\n   * @returns The route builder.\n   */\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the path of the route.\n   * @param path The path to set the router to.\n   * @returns The router builder.\n   */\n  public setPath(path: `/${string}`): this {\n    this.path = path;\n    return this;\n  }\n\n  /**\n   * Adds a middleware to the route. Add it before adding the route.\n   * @param middleware The middleware to add to the route.\n   * @returns The router builder.\n   */\n  public addMiddleware(middleware: Middleware): this {\n    this.middlewares.push(middleware);\n    return this;\n  }\n\n  /**\n   * Adds an afterware to the route. Add it before adding the route.\n   * @param afterware The afterware to add to the route.\n   * @returns The router builder.\n   */\n  public addAfterware(afterware: Middleware): this {\n    this.afterwares.push(afterware);\n    return this;\n  }\n\n  /**\n   * Adds an endpoint to the route.\n   * @param endpoint The endpoint to add to the route.\n   * @returns The router builder.\n   */\n  public addEndpoint(endpoint: EndpointBuilder): this {\n    this.endpoints.push(endpoint);\n\n    // Replace multiple slashes with a single slash.\n    const doubleSlashRegex = /\\/+/g;\n\n    const url: string = `${this.path}${endpoint.path}`.replace(\n      doubleSlashRegex,\n      '/'\n    );\n\n    switch (endpoint.method) {\n      case 'GET':\n        this.raw.get(url, ...this.middlewares, endpoint.controller);\n        break;\n      case 'POST':\n        this.raw.post(url, ...this.middlewares, endpoint.controller);\n        break;\n      case 'PUT':\n        this.raw.put(url, ...this.middlewares, endpoint.controller);\n        break;\n      case 'PATCH':\n        this.raw.patch(url, ...this.middlewares, endpoint.controller);\n        break;\n      case 'DELETE':\n        this.raw.delete(url, ...this.middlewares, endpoint.controller);\n        break;\n      case 'OPTIONS':\n        this.raw.options(url, ...this.middlewares, endpoint.controller);\n        break;\n      default:\n        throw new Error(`Invalid method ${String(endpoint.method)}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds all endpoints from an endpoint file to the route.\n   * @param endpointFile The endpoint file to add endpoints from.\n   * @returns The route builder.\n   */\n  public addEndpointFile(endpointFile: Record<string, EndpointBuilder>): this {\n    for (const value of Object.values(endpointFile)) {\n      this.addEndpoint(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets the middlewares and afterwares of the route.\n   * @returns The middlewares and afterwares of the route.\n   */\n  public access(): { middlewares: Middleware[]; afterwares: Middleware[] } {\n    return {\n      middlewares: this.middlewares,\n      afterwares: this.afterwares,\n    };\n  }\n\n  /**\n   * Exports the route.\n   * @returns The exported route.\n   */\n  public export(): ExportedRoute {\n    return {\n      name: this.name,\n      description: this.description,\n      path: this.path,\n      endpoints: this.endpoints.map((endpoint) => endpoint.export()),\n    };\n  }\n}\n","import { Router } from 'express';\n\nimport { Middleware, PathType } from '@typings/core';\nimport logger from '@utils/logger';\nimport RouteBuilder, { ExportedRoute } from './RouteBuilder';\n\ninterface ExportedRouter {\n  name: string;\n  path: PathType;\n  routes: ExportedRoute[];\n}\n\n/**\n * The router builder class.\n */\nexport default class RouterBuilder {\n  public raw: Router = Router();\n  private path: `/${string}`;\n  private defaultCategory: string;\n  private routes: RouteBuilder[] = [];\n  private middlewares: Middleware[] = [];\n  private afterwares: Middleware[] = [];\n\n  /**\n   * Creates a new router builder.\n   */\n  public constructor() {\n    // this.raw = Router();\n    this.path = '/';\n    this.defaultCategory = 'No default category';\n  }\n\n  /**\n   * Sets the default category of the route.\n   * @param defaultCategory The default category of the route.\n   * @returns The router builder.\n   */\n  public setDefaultCategory(defaultCategory: string): this {\n    this.defaultCategory = defaultCategory;\n    return this;\n  }\n\n  /**\n   * Sets the path of the route.\n   * @param path The path to set the router to.\n   * @returns The router builder.\n   */\n  public setPath(path: PathType): this {\n    this.path = path;\n    return this;\n  }\n\n  /**\n   * Adds a middleware to the route. Add it before adding the route.\n   * @param middleware The middleware to add to the route.\n   * @returns The router builder.\n   */\n  public addMiddleware(middleware: Middleware): this {\n    this.middlewares.push(middleware);\n    return this;\n  }\n\n  /**\n   * Adds an afterware to the route. Add it before adding the route.\n   * @param afterware The afterware to add to the route.\n   * @returns The router builder.\n   */\n  public addAfterware(afterware: Middleware): this {\n    this.afterwares.push(afterware);\n    return this;\n  }\n\n  /**\n   * Uses a router.\n   * @param route The router to use.\n   * @returns The router builder.\n   */\n  public addRoute(route: RouteBuilder): this {\n    this.routes.push(route);\n\n    const routeAccess = route.access();\n\n    // Use the router.\n    this.raw.use(\n      '/',\n      ...routeAccess.middlewares,\n      route.raw,\n      ...routeAccess.afterwares\n    );\n\n    return this;\n  }\n\n  /**\n   * Gets the express router.\n   * @returns The express router.\n   */\n  public getRouter = (): Router => this.raw;\n\n  /**\n   * Exports the routes and endpoints data.\n   * @returns The exported data.\n   */\n  public export(): ExportedRouter {\n    return {\n      name: this.defaultCategory,\n      path: this.path,\n      routes: this.routes.map((route) => route.export()),\n    };\n  }\n\n  /**\n   * Generates the site with next.js.\n   * @returns The router builder.\n   */\n  public async generateSite(): Promise<this> {\n    /* \n    - somewhere the nextjs website is defined, maybe /site\n    - the export method exports the route data to a JSON file and copies it to the site folder\n    - the export method cds into the folder and runs the nessesary commands to build the project\n    - the site reads the json files and uses it to build the pages\n    */\n\n    logger.info('Generating site...');\n\n    /**\n     * Artificial await.\n     * @returns The artificial await.\n     */\n    const artificialAwait = (): Promise<unknown> =>\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(null);\n        }, 1000);\n      });\n\n    await artificialAwait();\n\n    // logger.info('Site generated.');\n    logger.error('Site generation has not been implemented yet.');\n\n    return this;\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","EndpointBuilder","RouteBuilder","RouterBuilder","src_default","__toCommonJS","import_dotenv","import_express","import_colors","winston","debug","levelColor","level","colors","consoleFormat","timestamp","ms","message","stack","msg","ANSI_REGEX","logger","logger_default","email","str","username","password","phone","ipv4Address","url","image","validateBase","data","schema","schemaFields","key","value","req","testVal","email","username","password","phone","ipv4Address","url","check","result","item","image","validate","res","validate_default","import_mongoose","handledFunction","controller","req","res","next","session","error","logger_default","withErrorHandling","ValueBuilder","type","name","typeSchema","description","required","options","enumValue","items","min","max","checks","properties","test","SchemaBuilder","callback","value","ValueBuilder","EndpointBuilder","disabled","name","description","path","method","notes","callback","schema","SchemaBuilder","responses","controller","withErrorHandling","req","res","next","validate_default","error","logger_default","import_express","RouteBuilder","path","name","description","middleware","afterware","endpoint","doubleSlashRegex","url","endpointFile","value","import_express","RouterBuilder","defaultCategory","path","middleware","afterware","route","routeAccess","logger_default","resolve","dotenv","src_default","express"]}