{"version":3,"file":"wrapper.middleware.js","sourceRoot":"","sources":["../../../src/utils/middleware/wrapper.middleware.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAatC;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAC5B,UAA0B;IAE1B,OAAO,CAAC,GAAY,EAAE,GAAa,EAAQ,EAAE;QAC3C,CAAC,KAAK,IAAI,EAAE;YACV,IAAI;gBACF,MAAM,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aAC5B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;aACzE;QACH,CAAC,CAAC,EAAE,CAAC;IACP,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { NextFunction, Request, Response } from 'express';\n\nimport { logger } from '@utils/index';\n\ntype ControllerType = (\n  req: Request,\n  res: Response\n) => Promise<unknown> | unknown;\n\ntype ErrorHandlingReturnType = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => void;\n\n/**\n * Wraps a handler function in error handling.\n * @param controller The handler function.\n * @returns The handler function wrapped in error handling.\n */\nexport function initController(\n  controller: ControllerType\n): ErrorHandlingReturnType {\n  return (req: Request, res: Response): void => {\n    (async () => {\n      try {\n        await controller(req, res);\n      } catch (error) {\n        logger.error(error);\n        res.status(500).json({ status: 500, message: 'Internal Server Error' });\n      }\n    })();\n  };\n}\n"]}