import { startSession } from 'mongoose';
import { logger } from '@utils/index';
/**
 * Handles a function.
 * @param controller The handler function.
 * @param req The request.
 * @param res The response.
 * @param next The next function.
 */
const handledFunction = async (controller, req, res, next) => {
    const session = await startSession();
    try {
        session.startTransaction();
        await controller(req, res, session);
        await session.commitTransaction();
        next();
    }
    catch (error) {
        await session.abortTransaction();
        logger.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
    finally {
        session.endSession();
    }
};
/**
 * Wraps a handler function in error handling.
 * @param controller The handler function.
 * @returns The handler function wrapped in error handling.
 */
export const withErrorHandling = (controller) => (req, res, next) => {
    handledFunction(controller, req, res, next);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL21pZGRsZXdhcmUvd3JhcHBlci5taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUIsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFRdEM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUMzQixVQUEwQixFQUMxQixHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCLEVBQ0gsRUFBRTtJQUNqQixNQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0lBRXJDLElBQUk7UUFDRixPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMzQixNQUFNLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDbEMsSUFBSSxFQUFFLENBQUM7S0FDUjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztLQUMxRDtZQUFTO1FBQ1IsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUM1QixDQUFDLFVBQTBCLEVBQUUsRUFBRSxDQUMvQixDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBUSxFQUFFO0lBQ3hELGVBQWUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCB7IENsaWVudFNlc3Npb24sIHN0YXJ0U2Vzc2lvbiB9IGZyb20gJ21vbmdvb3NlJztcclxuXHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0B1dGlscy9pbmRleCc7XHJcblxyXG50eXBlIENvbnRyb2xsZXJUeXBlID0gKFxyXG4gIHJlcTogUmVxdWVzdCxcclxuICByZXM6IFJlc3BvbnNlLFxyXG4gIHNlc3Npb246IENsaWVudFNlc3Npb25cclxuKSA9PiBQcm9taXNlPHVua25vd24+IHwgdW5rbm93bjtcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIGEgZnVuY3Rpb24uXHJcbiAqIEBwYXJhbSBjb250cm9sbGVyIFRoZSBoYW5kbGVyIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0gcmVxIFRoZSByZXF1ZXN0LlxyXG4gKiBAcGFyYW0gcmVzIFRoZSByZXNwb25zZS5cclxuICogQHBhcmFtIG5leHQgVGhlIG5leHQgZnVuY3Rpb24uXHJcbiAqL1xyXG5jb25zdCBoYW5kbGVkRnVuY3Rpb24gPSBhc3luYyAoXHJcbiAgY29udHJvbGxlcjogQ29udHJvbGxlclR5cGUsXHJcbiAgcmVxOiBSZXF1ZXN0LFxyXG4gIHJlczogUmVzcG9uc2UsXHJcbiAgbmV4dDogTmV4dEZ1bmN0aW9uXHJcbik6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBzdGFydFNlc3Npb24oKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIHNlc3Npb24uc3RhcnRUcmFuc2FjdGlvbigpO1xyXG4gICAgYXdhaXQgY29udHJvbGxlcihyZXEsIHJlcywgc2Vzc2lvbik7XHJcbiAgICBhd2FpdCBzZXNzaW9uLmNvbW1pdFRyYW5zYWN0aW9uKCk7XHJcbiAgICBuZXh0KCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGF3YWl0IHNlc3Npb24uYWJvcnRUcmFuc2FjdGlvbigpO1xyXG4gICAgbG9nZ2VyLmVycm9yKGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InIH0pO1xyXG4gIH0gZmluYWxseSB7XHJcbiAgICBzZXNzaW9uLmVuZFNlc3Npb24oKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogV3JhcHMgYSBoYW5kbGVyIGZ1bmN0aW9uIGluIGVycm9yIGhhbmRsaW5nLlxyXG4gKiBAcGFyYW0gY29udHJvbGxlciBUaGUgaGFuZGxlciBmdW5jdGlvbi5cclxuICogQHJldHVybnMgVGhlIGhhbmRsZXIgZnVuY3Rpb24gd3JhcHBlZCBpbiBlcnJvciBoYW5kbGluZy5cclxuICovXHJcbmV4cG9ydCBjb25zdCB3aXRoRXJyb3JIYW5kbGluZyA9XHJcbiAgKGNvbnRyb2xsZXI6IENvbnRyb2xsZXJUeXBlKSA9PlxyXG4gIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQgPT4ge1xyXG4gICAgaGFuZGxlZEZ1bmN0aW9uKGNvbnRyb2xsZXIsIHJlcSwgcmVzLCBuZXh0KTtcclxuICB9O1xyXG4iXX0=