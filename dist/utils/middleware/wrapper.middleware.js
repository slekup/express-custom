import { startSession } from 'mongoose';
import { logger } from '@utils/index';
/**
 * Handles a function.
 * @param controller The handler function.
 * @param req The request.
 * @param res The response.
 * @param next The next function.
 */
const handledFunction = async (controller, req, res, next) => {
    const session = await startSession();
    try {
        session.startTransaction();
        await controller(req, res, session);
        await session.commitTransaction();
        next();
    }
    catch (error) {
        await session.abortTransaction();
        logger.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
    finally {
        session.endSession();
    }
};
/**
 * Wraps a handler function in error handling.
 * @param controller The handler function.
 * @returns The handler function wrapped in error handling.
 */
export const withErrorHandling = (controller) => (req, res, next) => {
    handledFunction(controller, req, res, next);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL21pZGRsZXdhcmUvd3JhcHBlci5taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUIsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFRdEM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUMzQixVQUEwQixFQUMxQixHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCLEVBQ0gsRUFBRTtJQUNqQixNQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0lBRXJDLElBQUk7UUFDRixPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMzQixNQUFNLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDbEMsSUFBSSxFQUFFLENBQUM7S0FDUjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztLQUMxRDtZQUFTO1FBQ1IsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUM1QixDQUFDLFVBQTBCLEVBQUUsRUFBRSxDQUMvQixDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBUSxFQUFFO0lBQ3hELGVBQWUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBDbGllbnRTZXNzaW9uLCBzdGFydFNlc3Npb24gfSBmcm9tICdtb25nb29zZSc7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0B1dGlscy9pbmRleCc7XG5cbnR5cGUgQ29udHJvbGxlclR5cGUgPSAoXG4gIHJlcTogUmVxdWVzdCxcbiAgcmVzOiBSZXNwb25zZSxcbiAgc2Vzc2lvbjogQ2xpZW50U2Vzc2lvblxuKSA9PiBQcm9taXNlPHVua25vd24+IHwgdW5rbm93bjtcblxuLyoqXG4gKiBIYW5kbGVzIGEgZnVuY3Rpb24uXG4gKiBAcGFyYW0gY29udHJvbGxlciBUaGUgaGFuZGxlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSByZXEgVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0gcmVzIFRoZSByZXNwb25zZS5cbiAqIEBwYXJhbSBuZXh0IFRoZSBuZXh0IGZ1bmN0aW9uLlxuICovXG5jb25zdCBoYW5kbGVkRnVuY3Rpb24gPSBhc3luYyAoXG4gIGNvbnRyb2xsZXI6IENvbnRyb2xsZXJUeXBlLFxuICByZXE6IFJlcXVlc3QsXG4gIHJlczogUmVzcG9uc2UsXG4gIG5leHQ6IE5leHRGdW5jdGlvblxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBzdGFydFNlc3Npb24oKTtcblxuICB0cnkge1xuICAgIHNlc3Npb24uc3RhcnRUcmFuc2FjdGlvbigpO1xuICAgIGF3YWl0IGNvbnRyb2xsZXIocmVxLCByZXMsIHNlc3Npb24pO1xuICAgIGF3YWl0IHNlc3Npb24uY29tbWl0VHJhbnNhY3Rpb24oKTtcbiAgICBuZXh0KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYXdhaXQgc2Vzc2lvbi5hYm9ydFRyYW5zYWN0aW9uKCk7XG4gICAgbG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyB9KTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcmFwcyBhIGhhbmRsZXIgZnVuY3Rpb24gaW4gZXJyb3IgaGFuZGxpbmcuXG4gKiBAcGFyYW0gY29udHJvbGxlciBUaGUgaGFuZGxlciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIHdyYXBwZWQgaW4gZXJyb3IgaGFuZGxpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRoRXJyb3JIYW5kbGluZyA9XG4gIChjb250cm9sbGVyOiBDb250cm9sbGVyVHlwZSkgPT5cbiAgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCA9PiB7XG4gICAgaGFuZGxlZEZ1bmN0aW9uKGNvbnRyb2xsZXIsIHJlcSwgcmVzLCBuZXh0KTtcbiAgfTtcbiJdfQ==