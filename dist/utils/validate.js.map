{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../src/utils/validate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Validate a cron expression.\n * @param expression The cron expression to validate.\n * @returns Whether the cron expression is valid.\n */\nexport const validateCronExpression = (expression: string): boolean => {\n  const cronExpressionRegex =\n    /^(\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2}) (\\*|[0-9]{1,2}|\\*\\/[0-9]{1,2})$/;\n  return cronExpressionRegex.test(expression);\n};\n\n/**\n * Convert a time to cron time.\n * @param time The time to convert to cron time.\n * @returns The converted time.\n */\nexport const timeToCronExpression = (time: string): string | null => {\n  const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d)$/; // Regular expression to validate HH:MM format\n\n  // Check if the time matches the HH:MM format\n  if (timeRegex.test(time)) {\n    const [hours, minutes] = time.split(':'); // Split the time into hours and minutes\n\n    if (!hours || !minutes) return null; // Return null if the time is invalid\n\n    // Format hours and minutes for cron time\n    const cronHours = hours === '00' ? '0' : hours.replace(/^0+/, ''); // Remove leading zeros, except for '00'\n    const cronMinutes = minutes.replace(/^0+/, ''); // Remove leading zeros\n\n    return `${cronMinutes} ${cronHours} * * *`; // Return the cron time format\n  }\n\n  return null; // Return null if the time is invalid\n};\n\n/**\n * Validate a time.\n * @param time The time to validate.\n * @returns Whether the time is valid.\n */\nexport const validateTime = (time: string): boolean => {\n  const timeRegex = /^(?:[01]\\d|2[0-3]):(?:00|30)$/; // Regular expression to validate HH:MM format\n  return timeRegex.test(time);\n};\n\n/**\n * Tests if a string is empty.\n * @param str The string to test.\n * @returns True if the string is empty, false otherwise.\n */\nexport const validateEmail = (str: string): boolean => {\n  // /^\\S+@\\S+\\.\\S+$/\n  // /\\S+@\\S+\\.\\S+/\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(str);\n};\n\n/**\n * Tests if a username is valid.\n * @param str The username to test.\n * @returns True if the username is valid, false otherwise.\n */\nexport const validateUsername = (str: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_]{3,16}$/;\n  return usernameRegex.test(str);\n};\n\n/**\n * Tests if a password is valid.\n * @param str The password to test.\n * @returns True if the password is valid, false otherwise.\n */\nexport const valiedatePassword = (str: string): boolean => {\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  return passwordRegex.test(str);\n};\n\n/**\n * Tests if a phone number is valid.\n * @param str The phone number to test.\n * @returns True if the phone number is valid, false otherwise.\n */\nexport const validatePhoneNumber = (str: string): boolean => {\n  const phoneNumberRegex = /^\\d{10}$/;\n  return phoneNumberRegex.test(str);\n};\n\n/**\n * Tests if a ipv4 address is valid.\n * @param str The IPv4 address to test.\n * @returns True if the IPv4 address is valid, false otherwise.\n */\nexport const validateIpv4Address = (str: string): boolean => {\n  // ^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$ - https://stackoverflow.com/questions/5284147/validating-ipv4-addresses-with-regexp\n  const ipv4AddressRegex =\n    /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/;\n  return ipv4AddressRegex.test(str);\n};\n\n/**\n * Tests if a color is valid.\n * @param color The color string to test.\n * @returns True if the color is valid, false otherwise.\n */\nexport const validateColor = (color: string): boolean => {\n  // Remove any whitespace from the input\n  const cleanedColor = color.replace(/\\s/g, '');\n\n  // Check if the input matches a valid hex color pattern\n  if (/^#?[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/.test(cleanedColor)) {\n    // If it does, add a '#' if it's missing and return the cleanedColor\n    return cleanedColor.startsWith('#');\n  }\n\n  return false;\n};\n\n/**\n * Tests if a url is valid.\n * @param url The url to test.\n * @returns True if the url is valid, false otherwise.\n */\nexport const validateUrl = (url: string): boolean => {\n  // Check if the url is valid\n  try {\n    const urlObject = new URL(url);\n    return urlObject.href === url; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * Tests if a path is valid.\n * @param path The path to test.\n * @returns True if the path is valid, false otherwise.\n */\nexport const validatePath = (path: string): boolean => {\n  const pathRegex = /^\\/(?:[a-zA-Z0-9_]+\\/)?[a-zA-Z0-9_]*$/;\n  return pathRegex.test(path);\n};\n\n/**\n * Tests if an image is valid.\n * @param image The image to test.\n * @returns True if the image is valid, false otherwise.\n */\nexport const validateImage = (image: string): boolean => {\n  // Check if the image is valid\n  try {\n    const imageObject = new URL(image);\n    return imageObject.href === image; // Additional check to handle relative URLs\n  } catch (err) {\n    return false;\n  }\n};\n"]}