{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/utils/logger.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC;;;;GAIG;AACH,MAAM,UAAU,GAAG,CAAC,KAAa,EAAU,EAAE;IAC3C,QAAQ,KAAK,EAAE;QACb,KAAK,OAAO,CAAC,CAAC;YACZ,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SACxC;QACD,KAAK,MAAM,CAAC,CAAC;YACX,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SAC3C;QACD,KAAK,MAAM,CAAC,CAAC;YACX,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SAC1C;QACD,KAAK,OAAO,CAAC,CAAC;YACZ,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SACzC;QACD,KAAK,OAAO,CAAC,CAAC;YACZ,OAAO,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SAC5C;QACD,OAAO,CAAC,CAAC;YACP,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SAC1C;KACF;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO;AAC1C,gCAAgC;AAChC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,EACnB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AACtC,0BAA0B;AAC1B,yBAAyB;AACzB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAqB,EAAE,EAAE;IACzE,IAAI,GAAG,GAAG,OAAiB,CAAC;IAE5B,yDAAyD;IACzD,IAAI,KAAK;QAAE,GAAG,IAAI,KAAK,KAAe,EAAE,CAAC;IAEzC,qCAAqC;IACrC,MAAM,UAAU,GAAG,uBAAuB,CAAC;IAE3C,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,MAAM,CAAC,IAAI,CACtD,EAAY,CACb,KAAK,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC;AAC7D,CAAC,CAAC,CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;IAClC,KAAK,EAAE,OAAO;IACd,MAAM,EAAE,aAAa;IACrB,UAAU,EAAE;QACV,oBAAoB;QACpB,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,MAAM;SACd,CAAC;KACH;CACF,CAAC,CAAC;AAEH,eAAe,MAAM,CAAC","sourcesContent":["import colors from 'colors';\nimport { TransformableInfo } from 'logform';\nimport * as winston from 'winston';\n\n/**\n * Returns a color based on the log level.\n * @param level The log level.\n * @returns The colored log level.\n */\nconst levelColor = (level: string): string => {\n  switch (level) {\n    case 'error': {\n      return colors.red(level.toUpperCase());\n    }\n    case 'warn': {\n      return colors.yellow(level.toUpperCase());\n    }\n    case 'info': {\n      return colors.green(level.toUpperCase());\n    }\n    case 'debug': {\n      return colors.blue(level.toUpperCase());\n    }\n    case 'trace': {\n      return colors.magenta(level.toUpperCase());\n    }\n    default: {\n      return colors.white(level.toUpperCase());\n    }\n  }\n};\n\n/**\n * The format for the console transport.\n */\nconst consoleFormat = winston.format.combine(\n  // winston.format.prettyPrint(),\n  winston.format.colorize(),\n  winston.format.ms(),\n  winston.format.errors({ stack: true }),\n  // winston.format.splat(),\n  // winston.format.json(),\n  winston.format.printf(({ ms, level, message, stack }: TransformableInfo) => {\n    let msg = message as string;\n\n    // Append the stack trace to the message if it is present\n    if (stack) msg += `\\n${stack as string}`;\n\n    /* eslint-disable no-control-regex */\n    const ANSI_REGEX = /\\u001b\\[[0-9]{1,2}m/gi;\n\n    return `[${colors.gray('express-custom')}] ${colors.cyan(\n      ms as string\n    )} [${levelColor(level.replace(ANSI_REGEX, ''))}]: ${msg}`;\n  })\n);\n\n/**\n * The logger instance - console transports only.\n */\nconst logger = winston.createLogger({\n  level: 'debug',\n  format: consoleFormat,\n  transports: [\n    // Console transport\n    new winston.transports.Console({\n      level: 'info',\n    }),\n  ],\n});\n\nexport default logger;\n"]}